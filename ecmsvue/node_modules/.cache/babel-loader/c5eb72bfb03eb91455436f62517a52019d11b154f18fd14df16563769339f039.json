{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'ProductManagement',\n  data() {\n    return {\n      products: [],\n      isProductFormVisible: false,\n      productForm: {\n        productName: '',\n        price: 0,\n        stockQuantity: 0,\n        status: 'active',\n        merchantId: null // 这里需要设置商家ID\n      },\n      selectedProduct: null,\n      currentMerchantId: 1 // 假设这是当前商家的 ID\n    };\n  },\n  methods: {\n    fetchProducts() {\n      axios.get('http://localhost:8080/api/products').then(response => {\n        this.products = response.data;\n      }).catch(error => {\n        console.error('获取产品时出错:', error);\n      });\n    },\n    showProductForm() {\n      this.selectedProduct = null; // Reset selected product for adding new product\n      this.productForm = {\n        productName: '',\n        price: 0,\n        stockQuantity: 0,\n        status: 'active',\n        merchantId: this.currentMerchantId // 设置为当前商家的 ID\n      };\n      this.isProductFormVisible = true;\n    },\n    editProduct(product) {\n      this.selectedProduct = product; // 记录选择的产品\n      this.productForm = {\n        ...product\n      }; // 将选择的产品信息填入表单\n      this.isProductFormVisible = true;\n    },\n    handleProductFormClose() {\n      this.isProductFormVisible = false;\n    },\n    saveProduct() {\n      const url = this.selectedProduct ? `http://localhost:8080/api/products/${this.selectedProduct.productId}` : 'http://localhost:8080/api/products';\n      const method = this.selectedProduct ? 'put' : 'post';\n\n      // 确保设置 merchantId\n      this.productForm.merchantId = this.currentMerchantId; // 设置为当前商家的 ID\n\n      axios[method](url, this.productForm).then(() => {\n        this.fetchProducts(); // 刷新产品列表\n        this.handleProductFormClose(); // 关闭表单\n      }).catch(error => {\n        console.error('保存产品时出错:', error);\n      });\n    },\n    deleteProduct(productId) {\n      axios.delete(`http://localhost:8080/api/products/${productId}`).then(() => {\n        this.fetchProducts(); // 删除后刷新产品列表\n      }).catch(error => {\n        console.error('删除产品时出错:', error);\n      });\n    }\n  },\n  mounted() {\n    this.fetchProducts(); // 组件加载时获取产品列表\n  }\n};","map":{"version":3,"names":["axios","name","data","products","isProductFormVisible","productForm","productName","price","stockQuantity","status","merchantId","selectedProduct","currentMerchantId","methods","fetchProducts","get","then","response","catch","error","console","showProductForm","editProduct","product","handleProductFormClose","saveProduct","url","productId","method","deleteProduct","delete","mounted"],"sources":["E:\\ecms\\ecmsvue\\src\\views\\Products.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>产品管理</h1>\r\n    <el-button type=\"primary\" @click=\"showProductForm\" style=\"margin-bottom: 20px;\">添加产品</el-button>\r\n    <el-table :data=\"products\" style=\"width: 100%;\">\r\n      <el-table-column prop=\"productName\" label=\"产品名称\" />\r\n      <el-table-column prop=\"price\" label=\"价格\" />\r\n      <el-table-column prop=\"status\" label=\"状态\" />\r\n      <el-table-column label=\"操作\">\r\n        <template #default=\"scope\">\r\n          <el-button size=\"small\" @click=\"editProduct(scope.row)\">编辑</el-button>\r\n          <el-button size=\"small\" type=\"danger\" @click=\"deleteProduct(scope.row.productId)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <el-dialog :visible=\"isProductFormVisible\" title=\"产品表单\" @close=\"handleProductFormClose\" width=\"600px\">\r\n      <el-form :model=\"productForm\" label-width=\"120px\" size=\"medium\">\r\n        <el-form-item label=\"产品名称\">\r\n          <el-input v-model=\"productForm.productName\" placeholder=\"请输入产品名称\" required />\r\n        </el-form-item>\r\n        <el-form-item label=\"价格\">\r\n          <el-input type=\"number\" v-model=\"productForm.price\" placeholder=\"请输入产品价格\" required />\r\n        </el-form-item>\r\n        <el-form-item label=\"库存数量\">\r\n          <el-input type=\"number\" v-model=\"productForm.stockQuantity\" placeholder=\"请输入库存数量\" required />\r\n        </el-form-item>\r\n        <el-form-item label=\"状态\">\r\n          <el-select v-model=\"productForm.status\" placeholder=\"选择状态\" required>\r\n            <el-option label=\"可用\" value=\"active\" />\r\n            <el-option label=\"不可用\" value=\"inactive\" />\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"handleProductFormClose\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveProduct\">保存</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'ProductManagement',\r\n  data() {\r\n    return {\r\n      products: [],\r\n      isProductFormVisible: false,\r\n      productForm: {\r\n        productName: '',\r\n        price: 0,\r\n        stockQuantity: 0,\r\n        status: 'active',\r\n        merchantId: null // 这里需要设置商家ID\r\n      },\r\n      selectedProduct: null,\r\n      currentMerchantId: 1 // 假设这是当前商家的 ID\r\n    };\r\n  },\r\n  methods: {\r\n    fetchProducts() {\r\n      axios.get('http://localhost:8080/api/products')\r\n          .then(response => {\r\n            this.products = response.data;\r\n          })\r\n          .catch(error => {\r\n            console.error('获取产品时出错:', error);\r\n          });\r\n    },\r\n    showProductForm() {\r\n      this.selectedProduct = null; // Reset selected product for adding new product\r\n      this.productForm = {\r\n        productName: '',\r\n        price: 0,\r\n        stockQuantity: 0,\r\n        status: 'active',\r\n        merchantId: this.currentMerchantId // 设置为当前商家的 ID\r\n      };\r\n      this.isProductFormVisible = true;\r\n    },\r\n    editProduct(product) {\r\n      this.selectedProduct = product; // 记录选择的产品\r\n      this.productForm = { ...product }; // 将选择的产品信息填入表单\r\n      this.isProductFormVisible = true;\r\n    },\r\n    handleProductFormClose() {\r\n      this.isProductFormVisible = false;\r\n    },\r\n    saveProduct() {\r\n      const url = this.selectedProduct\r\n          ? `http://localhost:8080/api/products/${this.selectedProduct.productId}`\r\n          : 'http://localhost:8080/api/products';\r\n\r\n      const method = this.selectedProduct ? 'put' : 'post';\r\n\r\n      // 确保设置 merchantId\r\n      this.productForm.merchantId = this.currentMerchantId; // 设置为当前商家的 ID\r\n\r\n      axios[method](url, this.productForm)\r\n          .then(() => {\r\n            this.fetchProducts(); // 刷新产品列表\r\n            this.handleProductFormClose(); // 关闭表单\r\n          })\r\n          .catch(error => {\r\n            console.error('保存产品时出错:', error);\r\n          });\r\n    },\r\n    deleteProduct(productId) {\r\n      axios.delete(`http://localhost:8080/api/products/${productId}`)\r\n          .then(() => {\r\n            this.fetchProducts(); // 删除后刷新产品列表\r\n          })\r\n          .catch(error => {\r\n            console.error('删除产品时出错:', error);\r\n          });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchProducts(); // 组件加载时获取产品列表\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.el-table {\r\n  width: 100%; /* 确保表格占满父容器 */\r\n}\r\n</style>\r\n"],"mappings":"AA2CA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,oBAAoB,EAAE,KAAK;MAC3BC,WAAW,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,KAAK,EAAE,CAAC;QACRC,aAAa,EAAE,CAAC;QAChBC,MAAM,EAAE,QAAQ;QAChBC,UAAU,EAAE,IAAG,CAAE;MACnB,CAAC;MACDC,eAAe,EAAE,IAAI;MACrBC,iBAAiB,EAAE,EAAE;IACvB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAAA,EAAG;MACdd,KAAK,CAACe,GAAG,CAAC,oCAAoC,EACzCC,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACd,QAAO,GAAIc,QAAQ,CAACf,IAAI;MAC/B,CAAC,EACAgB,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAClC,CAAC,CAAC;IACR,CAAC;IACDE,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACV,eAAc,GAAI,IAAI,EAAE;MAC7B,IAAI,CAACN,WAAU,GAAI;QACjBC,WAAW,EAAE,EAAE;QACfC,KAAK,EAAE,CAAC;QACRC,aAAa,EAAE,CAAC;QAChBC,MAAM,EAAE,QAAQ;QAChBC,UAAU,EAAE,IAAI,CAACE,iBAAgB,CAAE;MACrC,CAAC;MACD,IAAI,CAACR,oBAAmB,GAAI,IAAI;IAClC,CAAC;IACDkB,WAAWA,CAACC,OAAO,EAAE;MACnB,IAAI,CAACZ,eAAc,GAAIY,OAAO,EAAE;MAChC,IAAI,CAAClB,WAAU,GAAI;QAAE,GAAGkB;MAAQ,CAAC,EAAE;MACnC,IAAI,CAACnB,oBAAmB,GAAI,IAAI;IAClC,CAAC;IACDoB,sBAAsBA,CAAA,EAAG;MACvB,IAAI,CAACpB,oBAAmB,GAAI,KAAK;IACnC,CAAC;IACDqB,WAAWA,CAAA,EAAG;MACZ,MAAMC,GAAE,GAAI,IAAI,CAACf,eAAc,GACzB,sCAAsC,IAAI,CAACA,eAAe,CAACgB,SAAS,EAAC,GACrE,oCAAoC;MAE1C,MAAMC,MAAK,GAAI,IAAI,CAACjB,eAAc,GAAI,KAAI,GAAI,MAAM;;MAEpD;MACA,IAAI,CAACN,WAAW,CAACK,UAAS,GAAI,IAAI,CAACE,iBAAiB,EAAE;;MAEtDZ,KAAK,CAAC4B,MAAM,CAAC,CAACF,GAAG,EAAE,IAAI,CAACrB,WAAW,EAC9BW,IAAI,CAAC,MAAM;QACV,IAAI,CAACF,aAAa,CAAC,CAAC,EAAE;QACtB,IAAI,CAACU,sBAAsB,CAAC,CAAC,EAAE;MACjC,CAAC,EACAN,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAClC,CAAC,CAAC;IACR,CAAC;IACDU,aAAaA,CAACF,SAAS,EAAE;MACvB3B,KAAK,CAAC8B,MAAM,CAAC,sCAAsCH,SAAS,EAAE,EACzDX,IAAI,CAAC,MAAM;QACV,IAAI,CAACF,aAAa,CAAC,CAAC,EAAE;MACxB,CAAC,EACAI,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAClC,CAAC,CAAC;IACR;EACF,CAAC;EACDY,OAAOA,CAAA,EAAG;IACR,IAAI,CAACjB,aAAa,CAAC,CAAC,EAAE;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}