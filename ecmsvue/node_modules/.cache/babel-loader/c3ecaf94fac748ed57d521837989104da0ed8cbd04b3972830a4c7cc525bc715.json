{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, reactive, onMounted, onUnmounted, nextTick, computed } from 'vue';\nimport { ElMessage, ElNotification } from 'element-plus';\nimport { Refresh } from '@element-plus/icons-vue';\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nimport AppAdminNavbar from \"@/components/AdminNavbar.vue\";\nimport { gsap } from \"gsap\";\nexport default {\n  name: 'AdminDataVisualizationView',\n  components: {\n    AppNavbar: AppAdminNavbar,\n    Refresh\n  },\n  setup() {\n    // 图表引用\n    const salesTrendChart = ref(null);\n    const merchantRankingChart = ref(null);\n    const productRankingChart = ref(null);\n    const regionalDistributionChart = ref(null);\n    const orderStatusDistributionChart = ref(null);\n\n    // 图表实例\n    let salesTrendChartInstance = null;\n    let merchantRankingChartInstance = null;\n    let productRankingChartInstance = null;\n    let regionalDistributionChartInstance = null;\n    let orderStatusDistributionChartInstance = null;\n\n    // 图表数据缓存\n    const chartData = reactive({\n      salesTrend: null,\n      merchantRanking: null,\n      productRanking: null,\n      regionalDistribution: null,\n      orderStatusDistribution: null\n    });\n\n    // 数据加载状态\n    const loading = reactive({\n      dashboard: false,\n      salesTrend: false,\n      merchantRanking: false,\n      productRanking: false,\n      regionalDistribution: false,\n      orderStatusDistribution: false\n    });\n\n    // 时间筛选状态和标签\n    const timeFilter = ref('monthly');\n    const timeFilterLabel = computed(() => {\n      switch (timeFilter.value) {\n        case 'daily':\n          return '每日';\n        case 'weekly':\n          return '每周';\n        case 'monthly':\n          return '每月';\n        default:\n          return '每月';\n      }\n    });\n\n    // 时间筛选变更处理函数\n    const handleTimeFilterChange = value => {\n      // 更新时间筛选\n      timeFilter.value = value;\n\n      // 使用选定的时间周期获取新数据\n      fetchDashboardData();\n\n      // 额外的视觉反馈\n      ElMessage({\n        message: `已切换到${timeFilterLabel.value}视图`,\n        type: 'success',\n        duration: 1500\n      });\n    };\n\n    // 图表选择\n    const selectedChartType = ref('all');\n\n    // 检查图表是否应该可见\n    const isChartVisible = chartType => {\n      return selectedChartType.value === 'all' || selectedChartType.value === chartType;\n    };\n\n    // 处理图表类型变更\n    const handleChartTypeChange = value => {\n      // 等待DOM更新\n      nextTick(async () => {\n        // 重新初始化并渲染需要显示的图表\n        if (value === 'all' || value === 'trend') {\n          await initAndRenderChart('salesTrend', salesTrendChart, chartData.salesTrend);\n        }\n        if (value === 'all' || value === 'merchant') {\n          await initAndRenderChart('merchantRanking', merchantRankingChart, chartData.merchantRanking);\n        }\n        if (value === 'all' || value === 'product') {\n          await initAndRenderChart('productRanking', productRankingChart, chartData.productRanking);\n        }\n        if (value === 'all' || value === 'region') {\n          await initAndRenderChart('regionalDistribution', regionalDistributionChart, chartData.regionalDistribution);\n        }\n        if (value === 'all' || value === 'status') {\n          await initAndRenderChart('orderStatusDistribution', orderStatusDistributionChart, chartData.orderStatusDistribution);\n        }\n      });\n\n      // 通知用户\n      ElNotification({\n        title: '图表显示已更新',\n        message: value === 'all' ? '显示所有图表' : `仅显示${getChartTypeName(value)}图表`,\n        type: 'success',\n        duration: 2000\n      });\n    };\n\n    // 初始化并渲染特定图表\n    const initAndRenderChart = async (chartType, chartRef, data) => {\n      if (!chartRef.value || !data) return;\n\n      // 销毁旧实例\n      disposeChart(chartType);\n\n      // 创建新实例\n      await nextTick();\n      switch (chartType) {\n        case 'salesTrend':\n          salesTrendChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\n          renderSalesTrendChart(data);\n          break;\n        case 'merchantRanking':\n          merchantRankingChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\n          renderMerchantRankingChart(data);\n          break;\n        case 'productRanking':\n          productRankingChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\n          renderProductRankingChart(data);\n          break;\n        case 'regionalDistribution':\n          regionalDistributionChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\n          renderRegionalDistributionChart(data);\n          break;\n        case 'orderStatusDistribution':\n          orderStatusDistributionChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\n          renderOrderStatusDistributionChart(data);\n          break;\n      }\n    };\n\n    // 销毁特定图表实例\n    const disposeChart = chartType => {\n      switch (chartType) {\n        case 'salesTrend':\n          if (salesTrendChartInstance) {\n            salesTrendChartInstance.dispose();\n            salesTrendChartInstance = null;\n          }\n          break;\n        case 'merchantRanking':\n          if (merchantRankingChartInstance) {\n            merchantRankingChartInstance.dispose();\n            merchantRankingChartInstance = null;\n          }\n          break;\n        case 'productRanking':\n          if (productRankingChartInstance) {\n            productRankingChartInstance.dispose();\n            productRankingChartInstance = null;\n          }\n          break;\n        case 'regionalDistribution':\n          if (regionalDistributionChartInstance) {\n            regionalDistributionChartInstance.dispose();\n            regionalDistributionChartInstance = null;\n          }\n          break;\n        case 'orderStatusDistribution':\n          if (orderStatusDistributionChartInstance) {\n            orderStatusDistributionChartInstance.dispose();\n            orderStatusDistributionChartInstance = null;\n          }\n          break;\n      }\n    };\n\n    // 销毁所有图表实例\n    const disposeAllCharts = () => {\n      disposeChart('salesTrend');\n      disposeChart('merchantRanking');\n      disposeChart('productRanking');\n      disposeChart('regionalDistribution');\n      disposeChart('orderStatusDistribution');\n    };\n\n    // 获取图表类型名称\n    const getChartTypeName = chartType => {\n      switch (chartType) {\n        case 'trend':\n          return '销售趋势';\n        case 'merchant':\n          return '商家销售排行';\n        case 'product':\n          return '产品销售排行';\n        case 'region':\n          return '区域销售分布';\n        case 'status':\n          return '订单状态分布';\n        default:\n          return '';\n      }\n    };\n\n    // 销售概览数据\n    const salesOverview = reactive({\n      totalSales: 0,\n      totalOrders: 0,\n      avgOrderValue: 0,\n      pendingOrders: 0,\n      completedOrders: 0,\n      recentSales: 0,\n      merchantCount: 0,\n      activeMerchantCount: 0\n    });\n\n    // 初始化图表主题\n    const initChartTheme = () => {\n      const theme = {\n        color: ['#409EFF', '#67C23A', '#E6A23C', '#F56C6C', '#909399', '#9254de', '#36cfc9', '#ff9c6e'],\n        backgroundColor: 'rgba(252,252,252,0.6)',\n        textStyle: {\n          fontFamily: 'Arial, \"Microsoft YaHei\", sans-serif'\n        },\n        title: {\n          textStyle: {\n            color: '#303133',\n            fontSize: 16,\n            fontWeight: 'normal'\n          },\n          left: 'center'\n        },\n        legend: {\n          textStyle: {\n            color: '#606266'\n          }\n        },\n        grid: {\n          containLabel: true,\n          left: '3%',\n          right: '4%',\n          bottom: '3%'\n        }\n      };\n      echarts.registerTheme('ecmsTheme', theme);\n    };\n\n    // 处理窗口大小变化\n    const handleResize = () => {\n      if (isChartVisible('trend') && salesTrendChartInstance) {\n        salesTrendChartInstance.resize();\n      }\n      if (isChartVisible('merchant') && merchantRankingChartInstance) {\n        merchantRankingChartInstance.resize();\n      }\n      if (isChartVisible('product') && productRankingChartInstance) {\n        productRankingChartInstance.resize();\n      }\n      if (isChartVisible('region') && regionalDistributionChartInstance) {\n        regionalDistributionChartInstance.resize();\n      }\n      if (isChartVisible('status') && orderStatusDistributionChartInstance) {\n        orderStatusDistributionChartInstance.resize();\n      }\n    };\n\n    // 获取仪表板数据\n    const fetchDashboardData = async () => {\n      try {\n        loading.dashboard = true;\n\n        // 显示所有图表的加载指示器\n        loading.salesTrend = true;\n        loading.merchantRanking = true;\n        loading.productRanking = true;\n        loading.regionalDistribution = true;\n        loading.orderStatusDistribution = true;\n\n        // 通知用户正在基于所选时间段更新数据\n        ElMessage({\n          message: `正在加载${timeFilterLabel.value}数据...`,\n          type: 'info',\n          duration: 1000\n        });\n\n        // 销毁所有现有图表实例\n        disposeAllCharts();\n\n        // 使用当前时间筛选获取新数据\n        const response = await axios.get(`http://localhost:8080/api/admin/data-visualization/dashboard?period=${timeFilter.value}`);\n        const dashboardData = response.data;\n\n        // 更新销售概览数据\n        Object.assign(salesOverview, dashboardData.salesOverview);\n\n        // 缓存图表数据\n        Object.assign(chartData, {\n          salesTrend: dashboardData.salesTrend,\n          merchantRanking: dashboardData.merchantRanking,\n          productRanking: dashboardData.productRanking,\n          regionalDistribution: dashboardData.regionalDistribution,\n          orderStatusDistribution: dashboardData.orderStatusDistribution\n        });\n\n        // 等待DOM更新\n        await nextTick();\n\n        // 重新初始化并渲染当前可见的图表\n        const promises = [];\n        if (isChartVisible('trend')) {\n          promises.push(initAndRenderChart('salesTrend', salesTrendChart, chartData.salesTrend));\n        }\n        if (isChartVisible('merchant')) {\n          promises.push(initAndRenderChart('merchantRanking', merchantRankingChart, chartData.merchantRanking));\n        }\n        if (isChartVisible('product')) {\n          promises.push(initAndRenderChart('productRanking', productRankingChart, chartData.productRanking));\n        }\n        if (isChartVisible('region')) {\n          promises.push(initAndRenderChart('regionalDistribution', regionalDistributionChart, chartData.regionalDistribution));\n        }\n        if (isChartVisible('status')) {\n          promises.push(initAndRenderChart('orderStatusDistribution', orderStatusDistributionChart, chartData.orderStatusDistribution));\n        }\n        await Promise.all(promises);\n\n        // 成功通知，提及时间周期\n        ElNotification({\n          title: '数据更新成功',\n          message: `${timeFilterLabel.value}数据已成功加载`,\n          type: 'success',\n          duration: 2000\n        });\n      } catch (error) {\n        console.error('获取仪表板数据失败', error);\n        ElMessage({\n          message: '获取仪表板数据失败: ' + (error.response?.data?.message || error.message),\n          type: 'error'\n        });\n      } finally {\n        // 清除所有加载状态\n        loading.dashboard = false;\n        loading.salesTrend = false;\n        loading.merchantRanking = false;\n        loading.productRanking = false;\n        loading.regionalDistribution = false;\n        loading.orderStatusDistribution = false;\n      }\n    };\n\n    // 渲染销售趋势图，增强的时间周期处理\n    const renderSalesTrendChart = data => {\n      if (!data || !salesTrendChartInstance) {\n        console.error('渲染销售趋势图失败：数据或图表实例不存在');\n        return;\n      }\n      try {\n        const option = {\n          title: {\n            text: data.title || '平台销售趋势',\n            subtext: `按${timeFilterLabel.value}统计`,\n            left: 'center',\n            textStyle: {\n              fontSize: 16\n            },\n            subtextStyle: {\n              fontSize: 12,\n              color: '#909399'\n            }\n          },\n          tooltip: {\n            trigger: 'axis',\n            formatter: function (params) {\n              const param = params[0];\n              let formattedValue = param.value.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n              let timeUnit = '';\n              switch (timeFilter.value) {\n                case 'daily':\n                  timeUnit = '日';\n                  break;\n                case 'weekly':\n                  timeUnit = '周';\n                  break;\n                case 'monthly':\n                  timeUnit = '月';\n                  break;\n              }\n              return `${param.name} ${timeUnit}<br/>${param.seriesName}: ¥${formattedValue}`;\n            },\n            backgroundColor: 'rgba(255,255,255,0.8)',\n            borderColor: '#eee',\n            borderWidth: 1,\n            textStyle: {\n              color: '#333'\n            },\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true\n          },\n          xAxis: {\n            type: 'category',\n            data: data.xAxis || [],\n            boundaryGap: false,\n            axisTick: {\n              alignWithLabel: true\n            },\n            axisLine: {\n              lineStyle: {\n                color: '#dcdfe6'\n              }\n            },\n            axisLabel: {\n              color: '#606266',\n              rotate: data.xAxis && data.xAxis.length > 10 ? 30 : 0\n            }\n          },\n          yAxis: {\n            type: 'value',\n            name: '销售额(元)',\n            nameTextStyle: {\n              color: '#606266'\n            },\n            axisLine: {\n              show: true,\n              lineStyle: {\n                color: '#dcdfe6'\n              }\n            },\n            splitLine: {\n              lineStyle: {\n                color: '#ebeef5'\n              }\n            }\n          },\n          series: [{\n            name: '销售额',\n            type: 'line',\n            data: data.series || [],\n            smooth: true,\n            symbol: 'circle',\n            symbolSize: 6,\n            itemStyle: {\n              color: '#409EFF'\n            },\n            lineStyle: {\n              width: 3\n            },\n            areaStyle: {\n              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                offset: 0,\n                color: 'rgba(64, 158, 255, 0.5)'\n              }, {\n                offset: 1,\n                color: 'rgba(64, 158, 255, 0.1)'\n              }])\n            },\n            markPoint: {\n              data: [{\n                type: 'max',\n                name: '最大值'\n              }, {\n                type: 'min',\n                name: '最小值'\n              }]\n            },\n            markLine: {\n              data: [{\n                type: 'average',\n                name: '平均值'\n              }]\n            }\n          }]\n        };\n        salesTrendChartInstance.setOption(option, true);\n      } catch (error) {\n        console.error('渲染销售趋势图出错:', error);\n      }\n    };\n\n    // 渲染商家销售排行图\n    const renderMerchantRankingChart = data => {\n      if (!data || !merchantRankingChartInstance) {\n        console.error('渲染商家销售排行图失败：数据或图表实例不存在');\n        return;\n      }\n      try {\n        const option = {\n          title: {\n            text: data.title || '商家销售排行',\n            subtext: `按${timeFilterLabel.value}统计`,\n            left: 'center'\n          },\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'shadow'\n            },\n            formatter: '{b}: {c} 元',\n            backgroundColor: 'rgba(255,255,255,0.8)',\n            borderColor: '#eee',\n            borderWidth: 1,\n            textStyle: {\n              color: '#333'\n            },\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true\n          },\n          xAxis: {\n            type: 'value',\n            name: '销售额(元)',\n            nameTextStyle: {\n              color: '#606266'\n            },\n            axisLine: {\n              show: true,\n              lineStyle: {\n                color: '#dcdfe6'\n              }\n            },\n            splitLine: {\n              lineStyle: {\n                color: '#ebeef5'\n              }\n            }\n          },\n          yAxis: {\n            type: 'category',\n            data: data.merchantNames || [],\n            axisLabel: {\n              interval: 0,\n              rotate: 0,\n              color: '#606266'\n            },\n            axisLine: {\n              lineStyle: {\n                color: '#dcdfe6'\n              }\n            }\n          },\n          visualMap: {\n            min: 0,\n            max: Math.max(...(data.salesValues || [0])),\n            text: ['高', '低'],\n            inRange: {\n              color: ['#67C23A', '#409EFF']\n            },\n            calculable: true,\n            orient: 'horizontal',\n            left: 'center',\n            bottom: '0%',\n            show: false\n          },\n          series: [{\n            name: '销售额',\n            type: 'bar',\n            data: data.salesValues || [],\n            barWidth: '50%',\n            itemStyle: {\n              color: function (params) {\n                const value = params.value;\n                const max = Math.max(...(data.salesValues || [0]));\n                return new echarts.graphic.LinearGradient(0, 0, 1, 0, [{\n                  offset: 0,\n                  color: '#67C23A'\n                }, {\n                  offset: value / max,\n                  color: '#409EFF'\n                }]);\n              },\n              borderRadius: [0, 4, 4, 0]\n            },\n            label: {\n              show: true,\n              position: 'right',\n              formatter: '{c} 元'\n            }\n          }]\n        };\n        merchantRankingChartInstance.setOption(option, true);\n      } catch (error) {\n        console.error('渲染商家销售排行图出错:', error);\n      }\n    };\n\n    // 渲染产品销售排行图\n    const renderProductRankingChart = data => {\n      if (!data || !productRankingChartInstance) {\n        console.error('渲染产品销售排行图失败：数据或图表实例不存在');\n        return;\n      }\n      try {\n        const option = {\n          title: {\n            text: data.title || '产品销售排行',\n            subtext: `按${timeFilterLabel.value}统计`,\n            left: 'center'\n          },\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'shadow'\n            },\n            formatter: '{b}: {c} 元',\n            backgroundColor: 'rgba(255,255,255,0.8)',\n            borderColor: '#eee',\n            borderWidth: 1,\n            textStyle: {\n              color: '#333'\n            },\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true\n          },\n          xAxis: {\n            type: 'value',\n            name: '销售额(元)',\n            nameTextStyle: {\n              color: '#606266'\n            },\n            axisLine: {\n              show: true,\n              lineStyle: {\n                color: '#dcdfe6'\n              }\n            },\n            splitLine: {\n              lineStyle: {\n                color: '#ebeef5'\n              }\n            }\n          },\n          yAxis: {\n            type: 'category',\n            data: data.productNames || [],\n            axisLabel: {\n              interval: 0,\n              rotate: 0,\n              color: '#606266'\n            },\n            axisLine: {\n              lineStyle: {\n                color: '#dcdfe6'\n              }\n            }\n          },\n          series: [{\n            name: '销售额',\n            type: 'bar',\n            data: data.salesValues || [],\n            barWidth: '50%',\n            itemStyle: {\n              color: function (params) {\n                const colorList = ['#67C23A', '#409EFF', '#E6A23C', '#F56C6C', '#909399'];\n                return new echarts.graphic.LinearGradient(0, 0, 1, 0, [{\n                  offset: 0,\n                  color: '#E6A23C'\n                }, {\n                  offset: 1,\n                  color: colorList[params.dataIndex % colorList.length]\n                }]);\n              },\n              borderRadius: [0, 4, 4, 0]\n            },\n            label: {\n              show: true,\n              position: 'right',\n              formatter: '{c} 元'\n            }\n          }]\n        };\n        productRankingChartInstance.setOption(option, true);\n      } catch (error) {\n        console.error('渲染产品销售排行图出错:', error);\n      }\n    };\n\n    // 渲染区域销售分布图\n    const renderRegionalDistributionChart = data => {\n      if (!data || !regionalDistributionChartInstance) {\n        console.error('渲染区域销售分布图失败：数据或图表实例不存在');\n        return;\n      }\n      try {\n        const option = {\n          title: {\n            text: data.title || '区域销售分布',\n            subtext: `按${timeFilterLabel.value}统计`,\n            left: 'center'\n          },\n          tooltip: {\n            trigger: 'item',\n            formatter: '{b}: {c} 元 ({d}%)',\n            backgroundColor: 'rgba(255,255,255,0.8)',\n            borderColor: '#eee',\n            borderWidth: 1,\n            textStyle: {\n              color: '#333'\n            },\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\n          },\n          legend: {\n            type: 'scroll',\n            orient: 'vertical',\n            right: 10,\n            top: 20,\n            bottom: 20,\n            textStyle: {\n              color: '#606266'\n            }\n          },\n          series: [{\n            name: '区域销售',\n            type: 'pie',\n            radius: ['40%', '70%'],\n            center: ['40%', '50%'],\n            avoidLabelOverlap: true,\n            itemStyle: {\n              borderRadius: 4,\n              borderColor: '#fff',\n              borderWidth: 2\n            },\n            label: {\n              show: false,\n              position: 'center'\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: '18',\n                fontWeight: 'bold'\n              }\n            },\n            labelLine: {\n              show: false\n            },\n            data: data.regions ? data.regions.map((region, index) => {\n              return {\n                name: region,\n                value: data.values[index]\n              };\n            }) : []\n          }]\n        };\n        regionalDistributionChartInstance.setOption(option, true);\n      } catch (error) {\n        console.error('渲染区域销售分布图出错:', error);\n      }\n    };\n\n    // 渲染订单状态分布图\n    const renderOrderStatusDistributionChart = data => {\n      if (!data || !orderStatusDistributionChartInstance) {\n        console.error('渲染订单状态分布图失败：数据或图表实例不存在');\n        return;\n      }\n      try {\n        const option = {\n          title: {\n            text: data.title || '订单状态分布',\n            subtext: `按${timeFilterLabel.value}统计`,\n            left: 'center'\n          },\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b}: {c} ({d}%)',\n            backgroundColor: 'rgba(255,255,255,0.8)',\n            borderColor: '#eee',\n            borderWidth: 1,\n            textStyle: {\n              color: '#333'\n            },\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\n          },\n          legend: {\n            orient: 'vertical',\n            left: 10,\n            top: 'center',\n            textStyle: {\n              color: '#606266'\n            }\n          },\n          series: [{\n            name: '订单状态',\n            type: 'pie',\n            radius: ['40%', '70%'],\n            avoidLabelOverlap: false,\n            itemStyle: {\n              borderRadius: 4,\n              borderColor: '#fff',\n              borderWidth: 2\n            },\n            label: {\n              show: false,\n              position: 'center'\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: '18',\n                fontWeight: 'bold'\n              }\n            },\n            labelLine: {\n              show: false\n            },\n            data: data.data ? data.data.map(item => {\n              // 为不同状态设置不同颜色\n              const colorMap = {\n                '待处理': '#E6A23C',\n                '已发货': '#409EFF',\n                '已完成': '#67C23A',\n                '已退款': '#F56C6C'\n              };\n              return {\n                ...item,\n                itemStyle: {\n                  color: colorMap[item.name] || undefined\n                }\n              };\n            }) : []\n          }]\n        };\n        orderStatusDistributionChartInstance.setOption(option, true);\n      } catch (error) {\n        console.error('渲染订单状态分布图出错:', error);\n      }\n    };\n\n    // 格式化货币\n    const formatCurrency = value => {\n      if (value === undefined || value === null) return '¥0.00';\n      return '¥' + parseFloat(value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','); // 添加千位分隔符\n    };\n\n    // 组件挂载\n    onMounted(async () => {\n      await nextTick();\n\n      // 初始化图表主题\n      initChartTheme();\n\n      // 添加窗口大小变化监听\n      window.addEventListener('resize', handleResize);\n\n      // 获取初始数据\n      fetchDashboardData();\n\n      // 显示欢迎提示\n      ElNotification({\n        title: '数据仪表板已加载',\n        message: '欢迎使用平台数据可视化系统',\n        type: 'success',\n        duration: 3000\n      });\n    });\n\n    // 组件卸载\n    onUnmounted(() => {\n      // 销毁所有图表实例\n      disposeAllCharts();\n\n      // 移除窗口大小变化监听\n      window.removeEventListener('resize', handleResize);\n    });\n    return {\n      salesTrendChart,\n      merchantRankingChart,\n      productRankingChart,\n      regionalDistributionChart,\n      orderStatusDistributionChart,\n      loading,\n      timeFilter,\n      timeFilterLabel,\n      salesOverview,\n      fetchDashboardData,\n      formatCurrency,\n      selectedChartType,\n      isChartVisible,\n      handleChartTypeChange,\n      handleTimeFilterChange\n    };\n  },\n  methods: {\n    async handleNavigation(path) {\n      // 添加页面跳转确认\n      if (this.$route.path === path) return;\n      await this.leaveAnimation();\n      this.$router.push(path);\n    },\n    leaveAnimation() {\n      return new Promise(resolve => {\n        gsap.to(\".admin-visualization-view\", {\n          duration: 0.2,\n          opacity: 0,\n          y: 100,\n          ease: \"power4.in\",\n          onComplete: resolve\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","onUnmounted","nextTick","computed","ElMessage","ElNotification","Refresh","echarts","axios","AppAdminNavbar","gsap","name","components","AppNavbar","setup","salesTrendChart","merchantRankingChart","productRankingChart","regionalDistributionChart","orderStatusDistributionChart","salesTrendChartInstance","merchantRankingChartInstance","productRankingChartInstance","regionalDistributionChartInstance","orderStatusDistributionChartInstance","chartData","salesTrend","merchantRanking","productRanking","regionalDistribution","orderStatusDistribution","loading","dashboard","timeFilter","timeFilterLabel","value","handleTimeFilterChange","fetchDashboardData","message","type","duration","selectedChartType","isChartVisible","chartType","handleChartTypeChange","initAndRenderChart","title","getChartTypeName","chartRef","data","disposeChart","init","renderSalesTrendChart","renderMerchantRankingChart","renderProductRankingChart","renderRegionalDistributionChart","renderOrderStatusDistributionChart","dispose","disposeAllCharts","salesOverview","totalSales","totalOrders","avgOrderValue","pendingOrders","completedOrders","recentSales","merchantCount","activeMerchantCount","initChartTheme","theme","color","backgroundColor","textStyle","fontFamily","fontSize","fontWeight","left","legend","grid","containLabel","right","bottom","registerTheme","handleResize","resize","response","get","dashboardData","Object","assign","promises","push","Promise","all","error","console","option","text","subtext","subtextStyle","tooltip","trigger","formatter","params","param","formattedValue","toFixed","replace","timeUnit","seriesName","borderColor","borderWidth","extraCssText","xAxis","boundaryGap","axisTick","alignWithLabel","axisLine","lineStyle","axisLabel","rotate","length","yAxis","nameTextStyle","show","splitLine","series","smooth","symbol","symbolSize","itemStyle","width","areaStyle","graphic","LinearGradient","offset","markPoint","markLine","setOption","axisPointer","merchantNames","interval","visualMap","min","max","Math","salesValues","inRange","calculable","orient","barWidth","borderRadius","label","position","productNames","colorList","dataIndex","top","radius","center","avoidLabelOverlap","emphasis","labelLine","regions","map","region","index","values","item","colorMap","undefined","formatCurrency","parseFloat","window","addEventListener","removeEventListener","methods","handleNavigation","path","$route","leaveAnimation","$router","resolve","to","opacity","y","ease","onComplete"],"sources":["D:\\code_new\\ecms\\ecmsvue\\src\\views\\AdminDataVisualizationView.vue"],"sourcesContent":["<template>\r\n  <AppNavbar @navigate=\"handleNavigation\"/>\r\n  <div class=\"admin-visualization-view\">\r\n    <div class=\"view-header\">\r\n      <el-breadcrumb separator=\"/\">\r\n        <el-breadcrumb-item :to=\"{ path: '/admin' }\">首页</el-breadcrumb-item>\r\n        <el-breadcrumb-item>数据分析</el-breadcrumb-item>\r\n        <el-breadcrumb-item>平台数据可视化</el-breadcrumb-item>\r\n      </el-breadcrumb>\r\n      <h2>平台数据可视化</h2>\r\n    </div>\r\n\r\n    <div class=\"admin-visualization-dashboard\">\r\n      <div class=\"dashboard-header\">\r\n        <h1 class=\"dashboard-title\">平台数据分析仪表板</h1>\r\n\r\n        <div class=\"toolbar\">\r\n          <el-select\r\n              v-model=\"timeFilter\"\r\n              placeholder=\"选择时间周期\"\r\n              @change=\"handleTimeFilterChange\"\r\n              class=\"time-filter\">\r\n            <el-option label=\"每日\" value=\"daily\"></el-option>\r\n            <el-option label=\"每周\" value=\"weekly\"></el-option>\r\n            <el-option label=\"每月\" value=\"monthly\"></el-option>\r\n          </el-select>\r\n\r\n          <el-button\r\n              type=\"primary\"\r\n              @click=\"fetchDashboardData\"\r\n              :loading=\"loading.dashboard\"\r\n              class=\"refresh-btn\">\r\n            <el-icon><Refresh /></el-icon> 刷新数据\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 销售概览卡片 -->\r\n      <el-row :gutter=\"24\" class=\"dashboard-cards\">\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"6\" :xl=\"4\">\r\n          <el-card shadow=\"hover\" class=\"data-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>总销售额</span>\r\n                <el-tag type=\"success\" effect=\"plain\" size=\"small\">统计</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"card-content\">\r\n              <h2 class=\"card-value\">{{ formatCurrency(salesOverview.totalSales) }}</h2>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"6\" :xl=\"4\">\r\n          <el-card shadow=\"hover\" class=\"data-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>总订单数</span>\r\n                <el-tag type=\"primary\" effect=\"plain\" size=\"small\">统计</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"card-content\">\r\n              <h2 class=\"card-value\">{{ salesOverview.totalOrders || 0 }}</h2>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"6\" :xl=\"4\">\r\n          <el-card shadow=\"hover\" class=\"data-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>平均订单金额</span>\r\n                <el-tag type=\"warning\" effect=\"plain\" size=\"small\">统计</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"card-content\">\r\n              <h2 class=\"card-value\">{{ formatCurrency(salesOverview.avgOrderValue) }}</h2>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"6\" :xl=\"4\">\r\n          <el-card shadow=\"hover\" class=\"data-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>最近30天销售额</span>\r\n                <el-tag type=\"info\" effect=\"plain\" size=\"small\">统计</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"card-content\">\r\n              <h2 class=\"card-value\">{{ formatCurrency(salesOverview.recentSales) }}</h2>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"6\" :xl=\"4\">\r\n          <el-card shadow=\"hover\" class=\"data-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>商家总数</span>\r\n                <el-tag type=\"danger\" effect=\"plain\" size=\"small\">统计</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"card-content\">\r\n              <h2 class=\"card-value\">{{ salesOverview.merchantCount || 0 }}</h2>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"6\" :xl=\"4\">\r\n          <el-card shadow=\"hover\" class=\"data-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>活跃商家</span>\r\n                <el-tag type=\"success\" effect=\"plain\" size=\"small\">统计</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"card-content\">\r\n              <h2 class=\"card-value\">{{ salesOverview.activeMerchantCount || 0 }}</h2>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <!-- 图表选择器 -->\r\n      <div class=\"chart-selector\">\r\n        <el-radio-group v-model=\"selectedChartType\" @change=\"handleChartTypeChange\" size=\"large\">\r\n          <el-radio-button label=\"all\">全部图表</el-radio-button>\r\n          <el-radio-button label=\"trend\">销售趋势</el-radio-button>\r\n          <el-radio-button label=\"merchant\">商家排行</el-radio-button>\r\n          <el-radio-button label=\"product\">产品排行</el-radio-button>\r\n          <el-radio-button label=\"region\">区域分布</el-radio-button>\r\n          <el-radio-button label=\"status\">订单状态</el-radio-button>\r\n        </el-radio-group>\r\n      </div>\r\n\r\n      <!-- 图表区域 -->\r\n      <el-row :gutter=\"24\" class=\"dashboard-charts\">\r\n        <!-- 销售趋势图 -->\r\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"24\" :xl=\"24\" v-if=\"isChartVisible('trend')\">\r\n          <el-card shadow=\"hover\" class=\"chart-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>平台销售趋势</span>\r\n                <el-tag type=\"primary\">{{ timeFilterLabel }}</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"chart-container\" v-loading=\"loading.salesTrend\">\r\n              <div ref=\"salesTrendChart\" class=\"chart\"></div>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <!-- 商家销售排行图 -->\r\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"12\" :lg=\"12\" :xl=\"12\" v-if=\"isChartVisible('merchant')\">\r\n          <el-card shadow=\"hover\" class=\"chart-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>商家销售排行</span>\r\n                <el-tag type=\"success\">排名</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"chart-container\" v-loading=\"loading.merchantRanking\">\r\n              <div ref=\"merchantRankingChart\" class=\"chart\"></div>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <!-- 产品销售排行图 -->\r\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"12\" :lg=\"12\" :xl=\"12\" v-if=\"isChartVisible('product')\">\r\n          <el-card shadow=\"hover\" class=\"chart-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>产品销售排行</span>\r\n                <el-tag type=\"warning\">排名</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"chart-container\" v-loading=\"loading.productRanking\">\r\n              <div ref=\"productRankingChart\" class=\"chart\"></div>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <!-- 区域销售分布图 -->\r\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"12\" :lg=\"12\" :xl=\"12\" v-if=\"isChartVisible('region')\">\r\n          <el-card shadow=\"hover\" class=\"chart-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>区域销售分布</span>\r\n                <el-tag type=\"info\">分布</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"chart-container\" v-loading=\"loading.regionalDistribution\">\r\n              <div ref=\"regionalDistributionChart\" class=\"chart\"></div>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <!-- 订单状态分布图 -->\r\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"12\" :lg=\"12\" :xl=\"12\" v-if=\"isChartVisible('status')\">\r\n          <el-card shadow=\"hover\" class=\"chart-card\">\r\n            <template #header>\r\n              <div class=\"card-header\">\r\n                <span>订单状态分布</span>\r\n                <el-tag type=\"danger\">分布</el-tag>\r\n              </div>\r\n            </template>\r\n            <div class=\"chart-container\" v-loading=\"loading.orderStatusDistribution\">\r\n              <div ref=\"orderStatusDistributionChart\" class=\"chart\"></div>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted, onUnmounted, nextTick, computed } from 'vue';\r\nimport { ElMessage, ElNotification } from 'element-plus';\r\nimport { Refresh } from '@element-plus/icons-vue';\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\nimport AppAdminNavbar from \"@/components/AdminNavbar.vue\";\r\nimport {gsap} from \"gsap\";\r\n\r\nexport default {\r\n  name: 'AdminDataVisualizationView',\r\n  components: {\r\n    AppNavbar: AppAdminNavbar,\r\n    Refresh\r\n  },\r\n  setup() {\r\n    // 图表引用\r\n    const salesTrendChart = ref(null);\r\n    const merchantRankingChart = ref(null);\r\n    const productRankingChart = ref(null);\r\n    const regionalDistributionChart = ref(null);\r\n    const orderStatusDistributionChart = ref(null);\r\n\r\n    // 图表实例\r\n    let salesTrendChartInstance = null;\r\n    let merchantRankingChartInstance = null;\r\n    let productRankingChartInstance = null;\r\n    let regionalDistributionChartInstance = null;\r\n    let orderStatusDistributionChartInstance = null;\r\n\r\n    // 图表数据缓存\r\n    const chartData = reactive({\r\n      salesTrend: null,\r\n      merchantRanking: null,\r\n      productRanking: null,\r\n      regionalDistribution: null,\r\n      orderStatusDistribution: null\r\n    });\r\n\r\n    // 数据加载状态\r\n    const loading = reactive({\r\n      dashboard: false,\r\n      salesTrend: false,\r\n      merchantRanking: false,\r\n      productRanking: false,\r\n      regionalDistribution: false,\r\n      orderStatusDistribution: false\r\n    });\r\n\r\n    // 时间筛选状态和标签\r\n    const timeFilter = ref('monthly');\r\n    const timeFilterLabel = computed(() => {\r\n      switch (timeFilter.value) {\r\n        case 'daily': return '每日';\r\n        case 'weekly': return '每周';\r\n        case 'monthly': return '每月';\r\n        default: return '每月';\r\n      }\r\n    });\r\n\r\n    // 时间筛选变更处理函数\r\n    const handleTimeFilterChange = (value) => {\r\n      // 更新时间筛选\r\n      timeFilter.value = value;\r\n\r\n      // 使用选定的时间周期获取新数据\r\n      fetchDashboardData();\r\n\r\n      // 额外的视觉反馈\r\n      ElMessage({\r\n        message: `已切换到${timeFilterLabel.value}视图`,\r\n        type: 'success',\r\n        duration: 1500\r\n      });\r\n    };\r\n\r\n    // 图表选择\r\n    const selectedChartType = ref('all');\r\n\r\n    // 检查图表是否应该可见\r\n    const isChartVisible = (chartType) => {\r\n      return selectedChartType.value === 'all' || selectedChartType.value === chartType;\r\n    };\r\n\r\n    // 处理图表类型变更\r\n    const handleChartTypeChange = (value) => {\r\n      // 等待DOM更新\r\n      nextTick(async () => {\r\n        // 重新初始化并渲染需要显示的图表\r\n        if (value === 'all' || value === 'trend') {\r\n          await initAndRenderChart('salesTrend', salesTrendChart, chartData.salesTrend);\r\n        }\r\n        if (value === 'all' || value === 'merchant') {\r\n          await initAndRenderChart('merchantRanking', merchantRankingChart, chartData.merchantRanking);\r\n        }\r\n        if (value === 'all' || value === 'product') {\r\n          await initAndRenderChart('productRanking', productRankingChart, chartData.productRanking);\r\n        }\r\n        if (value === 'all' || value === 'region') {\r\n          await initAndRenderChart('regionalDistribution', regionalDistributionChart, chartData.regionalDistribution);\r\n        }\r\n        if (value === 'all' || value === 'status') {\r\n          await initAndRenderChart('orderStatusDistribution', orderStatusDistributionChart, chartData.orderStatusDistribution);\r\n        }\r\n      });\r\n\r\n      // 通知用户\r\n      ElNotification({\r\n        title: '图表显示已更新',\r\n        message: value === 'all' ? '显示所有图表' : `仅显示${getChartTypeName(value)}图表`,\r\n        type: 'success',\r\n        duration: 2000\r\n      });\r\n    };\r\n\r\n    // 初始化并渲染特定图表\r\n    const initAndRenderChart = async (chartType, chartRef, data) => {\r\n      if (!chartRef.value || !data) return;\r\n\r\n      // 销毁旧实例\r\n      disposeChart(chartType);\r\n\r\n      // 创建新实例\r\n      await nextTick();\r\n\r\n      switch (chartType) {\r\n        case 'salesTrend':\r\n          salesTrendChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\r\n          renderSalesTrendChart(data);\r\n          break;\r\n        case 'merchantRanking':\r\n          merchantRankingChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\r\n          renderMerchantRankingChart(data);\r\n          break;\r\n        case 'productRanking':\r\n          productRankingChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\r\n          renderProductRankingChart(data);\r\n          break;\r\n        case 'regionalDistribution':\r\n          regionalDistributionChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\r\n          renderRegionalDistributionChart(data);\r\n          break;\r\n        case 'orderStatusDistribution':\r\n          orderStatusDistributionChartInstance = echarts.init(chartRef.value, 'ecmsTheme');\r\n          renderOrderStatusDistributionChart(data);\r\n          break;\r\n      }\r\n    };\r\n\r\n    // 销毁特定图表实例\r\n    const disposeChart = (chartType) => {\r\n      switch (chartType) {\r\n        case 'salesTrend':\r\n          if (salesTrendChartInstance) {\r\n            salesTrendChartInstance.dispose();\r\n            salesTrendChartInstance = null;\r\n          }\r\n          break;\r\n        case 'merchantRanking':\r\n          if (merchantRankingChartInstance) {\r\n            merchantRankingChartInstance.dispose();\r\n            merchantRankingChartInstance = null;\r\n          }\r\n          break;\r\n        case 'productRanking':\r\n          if (productRankingChartInstance) {\r\n            productRankingChartInstance.dispose();\r\n            productRankingChartInstance = null;\r\n          }\r\n          break;\r\n        case 'regionalDistribution':\r\n          if (regionalDistributionChartInstance) {\r\n            regionalDistributionChartInstance.dispose();\r\n            regionalDistributionChartInstance = null;\r\n          }\r\n          break;\r\n        case 'orderStatusDistribution':\r\n          if (orderStatusDistributionChartInstance) {\r\n            orderStatusDistributionChartInstance.dispose();\r\n            orderStatusDistributionChartInstance = null;\r\n          }\r\n          break;\r\n      }\r\n    };\r\n\r\n    // 销毁所有图表实例\r\n    const disposeAllCharts = () => {\r\n      disposeChart('salesTrend');\r\n      disposeChart('merchantRanking');\r\n      disposeChart('productRanking');\r\n      disposeChart('regionalDistribution');\r\n      disposeChart('orderStatusDistribution');\r\n    };\r\n\r\n    // 获取图表类型名称\r\n    const getChartTypeName = (chartType) => {\r\n      switch (chartType) {\r\n        case 'trend': return '销售趋势';\r\n        case 'merchant': return '商家销售排行';\r\n        case 'product': return '产品销售排行';\r\n        case 'region': return '区域销售分布';\r\n        case 'status': return '订单状态分布';\r\n        default: return '';\r\n      }\r\n    };\r\n\r\n    // 销售概览数据\r\n    const salesOverview = reactive({\r\n      totalSales: 0,\r\n      totalOrders: 0,\r\n      avgOrderValue: 0,\r\n      pendingOrders: 0,\r\n      completedOrders: 0,\r\n      recentSales: 0,\r\n      merchantCount: 0,\r\n      activeMerchantCount: 0\r\n    });\r\n\r\n    // 初始化图表主题\r\n    const initChartTheme = () => {\r\n      const theme = {\r\n        color: ['#409EFF', '#67C23A', '#E6A23C', '#F56C6C', '#909399', '#9254de', '#36cfc9', '#ff9c6e'],\r\n        backgroundColor: 'rgba(252,252,252,0.6)',\r\n        textStyle: {\r\n          fontFamily: 'Arial, \"Microsoft YaHei\", sans-serif'\r\n        },\r\n        title: {\r\n          textStyle: {\r\n            color: '#303133',\r\n            fontSize: 16,\r\n            fontWeight: 'normal'\r\n          },\r\n          left: 'center'\r\n        },\r\n        legend: {\r\n          textStyle: {\r\n            color: '#606266'\r\n          }\r\n        },\r\n        grid: {\r\n          containLabel: true,\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%'\r\n        }\r\n      };\r\n\r\n      echarts.registerTheme('ecmsTheme', theme);\r\n    };\r\n\r\n    // 处理窗口大小变化\r\n    const handleResize = () => {\r\n      if (isChartVisible('trend') && salesTrendChartInstance) {\r\n        salesTrendChartInstance.resize();\r\n      }\r\n      if (isChartVisible('merchant') && merchantRankingChartInstance) {\r\n        merchantRankingChartInstance.resize();\r\n      }\r\n      if (isChartVisible('product') && productRankingChartInstance) {\r\n        productRankingChartInstance.resize();\r\n      }\r\n      if (isChartVisible('region') && regionalDistributionChartInstance) {\r\n        regionalDistributionChartInstance.resize();\r\n      }\r\n      if (isChartVisible('status') && orderStatusDistributionChartInstance) {\r\n        orderStatusDistributionChartInstance.resize();\r\n      }\r\n    };\r\n\r\n    // 获取仪表板数据\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        loading.dashboard = true;\r\n\r\n        // 显示所有图表的加载指示器\r\n        loading.salesTrend = true;\r\n        loading.merchantRanking = true;\r\n        loading.productRanking = true;\r\n        loading.regionalDistribution = true;\r\n        loading.orderStatusDistribution = true;\r\n\r\n        // 通知用户正在基于所选时间段更新数据\r\n        ElMessage({\r\n          message: `正在加载${timeFilterLabel.value}数据...`,\r\n          type: 'info',\r\n          duration: 1000\r\n        });\r\n\r\n        // 销毁所有现有图表实例\r\n        disposeAllCharts();\r\n\r\n        // 使用当前时间筛选获取新数据\r\n        const response = await axios.get(`http://localhost:8080/api/admin/data-visualization/dashboard?period=${timeFilter.value}`);\r\n        const dashboardData = response.data;\r\n\r\n        // 更新销售概览数据\r\n        Object.assign(salesOverview, dashboardData.salesOverview);\r\n\r\n        // 缓存图表数据\r\n        Object.assign(chartData, {\r\n          salesTrend: dashboardData.salesTrend,\r\n          merchantRanking: dashboardData.merchantRanking,\r\n          productRanking: dashboardData.productRanking,\r\n          regionalDistribution: dashboardData.regionalDistribution,\r\n          orderStatusDistribution: dashboardData.orderStatusDistribution\r\n        });\r\n\r\n        // 等待DOM更新\r\n        await nextTick();\r\n\r\n        // 重新初始化并渲染当前可见的图表\r\n        const promises = [];\r\n\r\n        if (isChartVisible('trend')) {\r\n          promises.push(initAndRenderChart('salesTrend', salesTrendChart, chartData.salesTrend));\r\n        }\r\n\r\n        if (isChartVisible('merchant')) {\r\n          promises.push(initAndRenderChart('merchantRanking', merchantRankingChart, chartData.merchantRanking));\r\n        }\r\n\r\n        if (isChartVisible('product')) {\r\n          promises.push(initAndRenderChart('productRanking', productRankingChart, chartData.productRanking));\r\n        }\r\n\r\n        if (isChartVisible('region')) {\r\n          promises.push(initAndRenderChart('regionalDistribution', regionalDistributionChart, chartData.regionalDistribution));\r\n        }\r\n\r\n        if (isChartVisible('status')) {\r\n          promises.push(initAndRenderChart('orderStatusDistribution', orderStatusDistributionChart, chartData.orderStatusDistribution));\r\n        }\r\n\r\n        await Promise.all(promises);\r\n\r\n        // 成功通知，提及时间周期\r\n        ElNotification({\r\n          title: '数据更新成功',\r\n          message: `${timeFilterLabel.value}数据已成功加载`,\r\n          type: 'success',\r\n          duration: 2000\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('获取仪表板数据失败', error);\r\n        ElMessage({\r\n          message: '获取仪表板数据失败: ' + (error.response?.data?.message || error.message),\r\n          type: 'error'\r\n        });\r\n      } finally {\r\n        // 清除所有加载状态\r\n        loading.dashboard = false;\r\n        loading.salesTrend = false;\r\n        loading.merchantRanking = false;\r\n        loading.productRanking = false;\r\n        loading.regionalDistribution = false;\r\n        loading.orderStatusDistribution = false;\r\n      }\r\n    };\r\n\r\n    // 渲染销售趋势图，增强的时间周期处理\r\n    const renderSalesTrendChart = (data) => {\r\n      if (!data || !salesTrendChartInstance) {\r\n        console.error('渲染销售趋势图失败：数据或图表实例不存在');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const option = {\r\n          title: {\r\n            text: data.title || '平台销售趋势',\r\n            subtext: `按${timeFilterLabel.value}统计`,\r\n            left: 'center',\r\n            textStyle: {\r\n              fontSize: 16\r\n            },\r\n            subtextStyle: {\r\n              fontSize: 12,\r\n              color: '#909399'\r\n            }\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis',\r\n            formatter: function(params) {\r\n              const param = params[0];\r\n              let formattedValue = param.value.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n              let timeUnit = '';\r\n\r\n              switch (timeFilter.value) {\r\n                case 'daily':\r\n                  timeUnit = '日';\r\n                  break;\r\n                case 'weekly':\r\n                  timeUnit = '周';\r\n                  break;\r\n                case 'monthly':\r\n                  timeUnit = '月';\r\n                  break;\r\n              }\r\n\r\n              return `${param.name} ${timeUnit}<br/>${param.seriesName}: ¥${formattedValue}`;\r\n            },\r\n            backgroundColor: 'rgba(255,255,255,0.8)',\r\n            borderColor: '#eee',\r\n            borderWidth: 1,\r\n            textStyle: {\r\n              color: '#333'\r\n            },\r\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\r\n          },\r\n          grid: {\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '3%',\r\n            containLabel: true\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: data.xAxis || [],\r\n            boundaryGap: false,\r\n            axisTick: {\r\n              alignWithLabel: true\r\n            },\r\n            axisLine: {\r\n              lineStyle: {\r\n                color: '#dcdfe6'\r\n              }\r\n            },\r\n            axisLabel: {\r\n              color: '#606266',\r\n              rotate: data.xAxis && data.xAxis.length > 10 ? 30 : 0\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            name: '销售额(元)',\r\n            nameTextStyle: {\r\n              color: '#606266'\r\n            },\r\n            axisLine: {\r\n              show: true,\r\n              lineStyle: {\r\n                color: '#dcdfe6'\r\n              }\r\n            },\r\n            splitLine: {\r\n              lineStyle: {\r\n                color: '#ebeef5'\r\n              }\r\n            }\r\n          },\r\n          series: [{\r\n            name: '销售额',\r\n            type: 'line',\r\n            data: data.series || [],\r\n            smooth: true,\r\n            symbol: 'circle',\r\n            symbolSize: 6,\r\n            itemStyle: {\r\n              color: '#409EFF'\r\n            },\r\n            lineStyle: {\r\n              width: 3\r\n            },\r\n            areaStyle: {\r\n              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                { offset: 0, color: 'rgba(64, 158, 255, 0.5)' },\r\n                { offset: 1, color: 'rgba(64, 158, 255, 0.1)' }\r\n              ])\r\n            },\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '最大值' },\r\n                { type: 'min', name: '最小值' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [\r\n                { type: 'average', name: '平均值' }\r\n              ]\r\n            }\r\n          }]\r\n        };\r\n\r\n        salesTrendChartInstance.setOption(option, true);\r\n      } catch (error) {\r\n        console.error('渲染销售趋势图出错:', error);\r\n      }\r\n    };\r\n\r\n    // 渲染商家销售排行图\r\n    const renderMerchantRankingChart = (data) => {\r\n      if (!data || !merchantRankingChartInstance) {\r\n        console.error('渲染商家销售排行图失败：数据或图表实例不存在');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const option = {\r\n          title: {\r\n            text: data.title || '商家销售排行',\r\n            subtext: `按${timeFilterLabel.value}统计`,\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            },\r\n            formatter: '{b}: {c} 元',\r\n            backgroundColor: 'rgba(255,255,255,0.8)',\r\n            borderColor: '#eee',\r\n            borderWidth: 1,\r\n            textStyle: {\r\n              color: '#333'\r\n            },\r\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\r\n          },\r\n          grid: {\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '3%',\r\n            containLabel: true\r\n          },\r\n          xAxis: {\r\n            type: 'value',\r\n            name: '销售额(元)',\r\n            nameTextStyle: {\r\n              color: '#606266'\r\n            },\r\n            axisLine: {\r\n              show: true,\r\n              lineStyle: {\r\n                color: '#dcdfe6'\r\n              }\r\n            },\r\n            splitLine: {\r\n              lineStyle: {\r\n                color: '#ebeef5'\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'category',\r\n            data: data.merchantNames || [],\r\n            axisLabel: {\r\n              interval: 0,\r\n              rotate: 0,\r\n              color: '#606266'\r\n            },\r\n            axisLine: {\r\n              lineStyle: {\r\n                color: '#dcdfe6'\r\n              }\r\n            }\r\n          },\r\n          visualMap: {\r\n            min: 0,\r\n            max: Math.max(...(data.salesValues || [0])),\r\n            text: ['高', '低'],\r\n            inRange: {\r\n              color: ['#67C23A', '#409EFF']\r\n            },\r\n            calculable: true,\r\n            orient: 'horizontal',\r\n            left: 'center',\r\n            bottom: '0%',\r\n            show: false\r\n          },\r\n          series: [{\r\n            name: '销售额',\r\n            type: 'bar',\r\n            data: data.salesValues || [],\r\n            barWidth: '50%',\r\n            itemStyle: {\r\n              color: function (params) {\r\n                const value = params.value;\r\n                const max = Math.max(...(data.salesValues || [0]));\r\n                return new echarts.graphic.LinearGradient(0, 0, 1, 0, [\r\n                  { offset: 0, color: '#67C23A' },\r\n                  { offset: value / max, color: '#409EFF' }\r\n                ]);\r\n              },\r\n              borderRadius: [0, 4, 4, 0]\r\n            },\r\n            label: {\r\n              show: true,\r\n              position: 'right',\r\n              formatter: '{c} 元'\r\n            }\r\n          }]\r\n        };\r\n\r\n        merchantRankingChartInstance.setOption(option, true);\r\n      } catch (error) {\r\n        console.error('渲染商家销售排行图出错:', error);\r\n      }\r\n    };\r\n\r\n    // 渲染产品销售排行图\r\n    const renderProductRankingChart = (data) => {\r\n      if (!data || !productRankingChartInstance) {\r\n        console.error('渲染产品销售排行图失败：数据或图表实例不存在');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const option = {\r\n          title: {\r\n            text: data.title || '产品销售排行',\r\n            subtext: `按${timeFilterLabel.value}统计`,\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            },\r\n            formatter: '{b}: {c} 元',\r\n            backgroundColor: 'rgba(255,255,255,0.8)',\r\n            borderColor: '#eee',\r\n            borderWidth: 1,\r\n            textStyle: {\r\n              color: '#333'\r\n            },\r\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\r\n          },\r\n          grid: {\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '3%',\r\n            containLabel: true\r\n          },\r\n          xAxis: {\r\n            type: 'value',\r\n            name: '销售额(元)',\r\n            nameTextStyle: {\r\n              color: '#606266'\r\n            },\r\n            axisLine: {\r\n              show: true,\r\n              lineStyle: {\r\n                color: '#dcdfe6'\r\n              }\r\n            },\r\n            splitLine: {\r\n              lineStyle: {\r\n                color: '#ebeef5'\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'category',\r\n            data: data.productNames || [],\r\n            axisLabel: {\r\n              interval: 0,\r\n              rotate: 0,\r\n              color: '#606266'\r\n            },\r\n            axisLine: {\r\n              lineStyle: {\r\n                color: '#dcdfe6'\r\n              }\r\n            }\r\n          },\r\n          series: [{\r\n            name: '销售额',\r\n            type: 'bar',\r\n            data: data.salesValues || [],\r\n            barWidth: '50%',\r\n            itemStyle: {\r\n              color: function (params) {\r\n                const colorList = ['#67C23A', '#409EFF', '#E6A23C', '#F56C6C', '#909399'];\r\n                return new echarts.graphic.LinearGradient(0, 0, 1, 0, [\r\n                  { offset: 0, color: '#E6A23C' },\r\n                  { offset: 1, color: colorList[params.dataIndex % colorList.length] }\r\n                ]);\r\n              },\r\n              borderRadius: [0, 4, 4, 0]\r\n            },\r\n            label: {\r\n              show: true,\r\n              position: 'right',\r\n              formatter: '{c} 元'\r\n            }\r\n          }]\r\n        };\r\n\r\n        productRankingChartInstance.setOption(option, true);\r\n      } catch (error) {\r\n        console.error('渲染产品销售排行图出错:', error);\r\n      }\r\n    };\r\n\r\n    // 渲染区域销售分布图\r\n    const renderRegionalDistributionChart = (data) => {\r\n      if (!data || !regionalDistributionChartInstance) {\r\n        console.error('渲染区域销售分布图失败：数据或图表实例不存在');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const option = {\r\n          title: {\r\n            text: data.title || '区域销售分布',\r\n            subtext: `按${timeFilterLabel.value}统计`,\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            trigger: 'item',\r\n            formatter: '{b}: {c} 元 ({d}%)',\r\n            backgroundColor: 'rgba(255,255,255,0.8)',\r\n            borderColor: '#eee',\r\n            borderWidth: 1,\r\n            textStyle: {\r\n              color: '#333'\r\n            },\r\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\r\n          },\r\n          legend: {\r\n            type: 'scroll',\r\n            orient: 'vertical',\r\n            right: 10,\r\n            top: 20,\r\n            bottom: 20,\r\n            textStyle: {\r\n              color: '#606266'\r\n            }\r\n          },\r\n          series: [{\r\n            name: '区域销售',\r\n            type: 'pie',\r\n            radius: ['40%', '70%'],\r\n            center: ['40%', '50%'],\r\n            avoidLabelOverlap: true,\r\n            itemStyle: {\r\n              borderRadius: 4,\r\n              borderColor: '#fff',\r\n              borderWidth: 2\r\n            },\r\n            label: {\r\n              show: false,\r\n              position: 'center'\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                show: true,\r\n                fontSize: '18',\r\n                fontWeight: 'bold'\r\n              }\r\n            },\r\n            labelLine: {\r\n              show: false\r\n            },\r\n            data: data.regions ? data.regions.map((region, index) => {\r\n              return {\r\n                name: region,\r\n                value: data.values[index]\r\n              };\r\n            }) : []\r\n          }]\r\n        };\r\n\r\n        regionalDistributionChartInstance.setOption(option, true);\r\n      } catch (error) {\r\n        console.error('渲染区域销售分布图出错:', error);\r\n      }\r\n    };\r\n\r\n    // 渲染订单状态分布图\r\n    const renderOrderStatusDistributionChart = (data) => {\r\n      if (!data || !orderStatusDistributionChartInstance) {\r\n        console.error('渲染订单状态分布图失败：数据或图表实例不存在');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const option = {\r\n          title: {\r\n            text: data.title || '订单状态分布',\r\n            subtext: `按${timeFilterLabel.value}统计`,\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b}: {c} ({d}%)',\r\n            backgroundColor: 'rgba(255,255,255,0.8)',\r\n            borderColor: '#eee',\r\n            borderWidth: 1,\r\n            textStyle: {\r\n              color: '#333'\r\n            },\r\n            extraCssText: 'box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'\r\n          },\r\n          legend: {\r\n            orient: 'vertical',\r\n            left: 10,\r\n            top: 'center',\r\n            textStyle: {\r\n              color: '#606266'\r\n            }\r\n          },\r\n          series: [{\r\n            name: '订单状态',\r\n            type: 'pie',\r\n            radius: ['40%', '70%'],\r\n            avoidLabelOverlap: false,\r\n            itemStyle: {\r\n              borderRadius: 4,\r\n              borderColor: '#fff',\r\n              borderWidth: 2\r\n            },\r\n            label: {\r\n              show: false,\r\n              position: 'center'\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                show: true,\r\n                fontSize: '18',\r\n                fontWeight: 'bold'\r\n              }\r\n            },\r\n            labelLine: {\r\n              show: false\r\n            },\r\n            data: data.data ? data.data.map(item => {\r\n              // 为不同状态设置不同颜色\r\n              const colorMap = {\r\n                '待处理': '#E6A23C',\r\n                '已发货': '#409EFF',\r\n                '已完成': '#67C23A',\r\n                '已退款': '#F56C6C'\r\n              };\r\n\r\n              return {\r\n                ...item,\r\n                itemStyle: {\r\n                  color: colorMap[item.name] || undefined\r\n                }\r\n              };\r\n            }) : []\r\n          }]\r\n        };\r\n\r\n        orderStatusDistributionChartInstance.setOption(option, true);\r\n      } catch (error) {\r\n        console.error('渲染订单状态分布图出错:', error);\r\n      }\r\n    };\r\n\r\n    // 格式化货币\r\n    const formatCurrency = (value) => {\r\n      if (value === undefined || value === null) return '¥0.00';\r\n      return '¥' + parseFloat(value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','); // 添加千位分隔符\r\n    };\r\n\r\n    // 组件挂载\r\n    onMounted(async () => {\r\n      await nextTick();\r\n\r\n      // 初始化图表主题\r\n      initChartTheme();\r\n\r\n      // 添加窗口大小变化监听\r\n      window.addEventListener('resize', handleResize);\r\n\r\n      // 获取初始数据\r\n      fetchDashboardData();\r\n\r\n      // 显示欢迎提示\r\n      ElNotification({\r\n        title: '数据仪表板已加载',\r\n        message: '欢迎使用平台数据可视化系统',\r\n        type: 'success',\r\n        duration: 3000\r\n      });\r\n    });\r\n\r\n    // 组件卸载\r\n    onUnmounted(() => {\r\n      // 销毁所有图表实例\r\n      disposeAllCharts();\r\n\r\n      // 移除窗口大小变化监听\r\n      window.removeEventListener('resize', handleResize);\r\n    });\r\n\r\n    return {\r\n      salesTrendChart,\r\n      merchantRankingChart,\r\n      productRankingChart,\r\n      regionalDistributionChart,\r\n      orderStatusDistributionChart,\r\n      loading,\r\n      timeFilter,\r\n      timeFilterLabel,\r\n      salesOverview,\r\n      fetchDashboardData,\r\n      formatCurrency,\r\n      selectedChartType,\r\n      isChartVisible,\r\n      handleChartTypeChange,\r\n      handleTimeFilterChange\r\n    };\r\n  },\r\n  methods:{\r\n    \r\n    async handleNavigation(path) {\r\n      // 添加页面跳转确认\r\n      if (this.$route.path === path) return;\r\n\r\n      await this.leaveAnimation();\r\n      this.$router.push(path);\r\n    },\r\n    leaveAnimation() {\r\n      return new Promise((resolve) => {\r\n        gsap.to(\".admin-visualization-view\", {\r\n          duration: 0.2,\r\n          opacity: 0,\r\n          y: 100,\r\n          ease: \"power4.in\",\r\n          onComplete: resolve\r\n        });\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.admin-visualization-view {\r\n  padding: 20px;\r\n}\r\n\r\n.view-header {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.view-header h2 {\r\n  margin-top: 10px;\r\n}\r\n\r\n.admin-visualization-dashboard {\r\n  padding: 20px;\r\n}\r\n\r\n.dashboard-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.toolbar {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.time-filter {\r\n  min-width: 120px;\r\n}\r\n\r\n.dashboard-cards {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.data-card {\r\n  margin-bottom: 20px;\r\n  height: 100%;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.card-content {\r\n  text-align: center;\r\n  padding: 10px 0;\r\n}\r\n\r\n.card-value {\r\n  font-size: 24px;\r\n  color: #303133;\r\n  margin: 0;\r\n}\r\n\r\n.chart-selector {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-card {\r\n  margin-bottom: 20px;\r\n  height: 100%;\r\n}\r\n\r\n.chart-container {\r\n  height: 350px;\r\n  width: 100%;\r\n}\r\n\r\n.chart {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.dashboard-charts {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dashboard-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .toolbar {\r\n    margin-top: 10px;\r\n    width: 100%;\r\n  }\r\n\r\n  .time-filter {\r\n    flex-grow: 1;\r\n  }\r\n\r\n  .chart-container {\r\n    height: 300px;\r\n  }\r\n\r\n  .card-value {\r\n    font-size: 20px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;AA0NA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,QAAO,QAAS,KAAK;AAC/E,SAASC,SAAS,EAAEC,cAAa,QAAS,cAAc;AACxD,SAASC,OAAM,QAAS,yBAAyB;AACjD,OAAO,KAAKC,OAAM,MAAO,SAAS;AAClC,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,cAAa,MAAO,8BAA8B;AACzD,SAAQC,IAAI,QAAO,MAAM;AAEzB,eAAe;EACbC,IAAI,EAAE,4BAA4B;EAClCC,UAAU,EAAE;IACVC,SAAS,EAAEJ,cAAc;IACzBH;EACF,CAAC;EACDQ,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,eAAc,GAAIjB,GAAG,CAAC,IAAI,CAAC;IACjC,MAAMkB,oBAAmB,GAAIlB,GAAG,CAAC,IAAI,CAAC;IACtC,MAAMmB,mBAAkB,GAAInB,GAAG,CAAC,IAAI,CAAC;IACrC,MAAMoB,yBAAwB,GAAIpB,GAAG,CAAC,IAAI,CAAC;IAC3C,MAAMqB,4BAA2B,GAAIrB,GAAG,CAAC,IAAI,CAAC;;IAE9C;IACA,IAAIsB,uBAAsB,GAAI,IAAI;IAClC,IAAIC,4BAA2B,GAAI,IAAI;IACvC,IAAIC,2BAA0B,GAAI,IAAI;IACtC,IAAIC,iCAAgC,GAAI,IAAI;IAC5C,IAAIC,oCAAmC,GAAI,IAAI;;IAE/C;IACA,MAAMC,SAAQ,GAAI1B,QAAQ,CAAC;MACzB2B,UAAU,EAAE,IAAI;MAChBC,eAAe,EAAE,IAAI;MACrBC,cAAc,EAAE,IAAI;MACpBC,oBAAoB,EAAE,IAAI;MAC1BC,uBAAuB,EAAE;IAC3B,CAAC,CAAC;;IAEF;IACA,MAAMC,OAAM,GAAIhC,QAAQ,CAAC;MACvBiC,SAAS,EAAE,KAAK;MAChBN,UAAU,EAAE,KAAK;MACjBC,eAAe,EAAE,KAAK;MACtBC,cAAc,EAAE,KAAK;MACrBC,oBAAoB,EAAE,KAAK;MAC3BC,uBAAuB,EAAE;IAC3B,CAAC,CAAC;;IAEF;IACA,MAAMG,UAAS,GAAInC,GAAG,CAAC,SAAS,CAAC;IACjC,MAAMoC,eAAc,GAAI/B,QAAQ,CAAC,MAAM;MACrC,QAAQ8B,UAAU,CAACE,KAAK;QACtB,KAAK,OAAO;UAAE,OAAO,IAAI;QACzB,KAAK,QAAQ;UAAE,OAAO,IAAI;QAC1B,KAAK,SAAS;UAAE,OAAO,IAAI;QAC3B;UAAS,OAAO,IAAI;MACtB;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,sBAAqB,GAAKD,KAAK,IAAK;MACxC;MACAF,UAAU,CAACE,KAAI,GAAIA,KAAK;;MAExB;MACAE,kBAAkB,CAAC,CAAC;;MAEpB;MACAjC,SAAS,CAAC;QACRkC,OAAO,EAAE,OAAOJ,eAAe,CAACC,KAAK,IAAI;QACzCI,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMC,iBAAgB,GAAI3C,GAAG,CAAC,KAAK,CAAC;;IAEpC;IACA,MAAM4C,cAAa,GAAKC,SAAS,IAAK;MACpC,OAAOF,iBAAiB,CAACN,KAAI,KAAM,KAAI,IAAKM,iBAAiB,CAACN,KAAI,KAAMQ,SAAS;IACnF,CAAC;;IAED;IACA,MAAMC,qBAAoB,GAAKT,KAAK,IAAK;MACvC;MACAjC,QAAQ,CAAC,YAAY;QACnB;QACA,IAAIiC,KAAI,KAAM,KAAI,IAAKA,KAAI,KAAM,OAAO,EAAE;UACxC,MAAMU,kBAAkB,CAAC,YAAY,EAAE9B,eAAe,EAAEU,SAAS,CAACC,UAAU,CAAC;QAC/E;QACA,IAAIS,KAAI,KAAM,KAAI,IAAKA,KAAI,KAAM,UAAU,EAAE;UAC3C,MAAMU,kBAAkB,CAAC,iBAAiB,EAAE7B,oBAAoB,EAAES,SAAS,CAACE,eAAe,CAAC;QAC9F;QACA,IAAIQ,KAAI,KAAM,KAAI,IAAKA,KAAI,KAAM,SAAS,EAAE;UAC1C,MAAMU,kBAAkB,CAAC,gBAAgB,EAAE5B,mBAAmB,EAAEQ,SAAS,CAACG,cAAc,CAAC;QAC3F;QACA,IAAIO,KAAI,KAAM,KAAI,IAAKA,KAAI,KAAM,QAAQ,EAAE;UACzC,MAAMU,kBAAkB,CAAC,sBAAsB,EAAE3B,yBAAyB,EAAEO,SAAS,CAACI,oBAAoB,CAAC;QAC7G;QACA,IAAIM,KAAI,KAAM,KAAI,IAAKA,KAAI,KAAM,QAAQ,EAAE;UACzC,MAAMU,kBAAkB,CAAC,yBAAyB,EAAE1B,4BAA4B,EAAEM,SAAS,CAACK,uBAAuB,CAAC;QACtH;MACF,CAAC,CAAC;;MAEF;MACAzB,cAAc,CAAC;QACbyC,KAAK,EAAE,SAAS;QAChBR,OAAO,EAAEH,KAAI,KAAM,KAAI,GAAI,QAAO,GAAI,MAAMY,gBAAgB,CAACZ,KAAK,CAAC,IAAI;QACvEI,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMK,kBAAiB,GAAI,MAAAA,CAAOF,SAAS,EAAEK,QAAQ,EAAEC,IAAI,KAAK;MAC9D,IAAI,CAACD,QAAQ,CAACb,KAAI,IAAK,CAACc,IAAI,EAAE;;MAE9B;MACAC,YAAY,CAACP,SAAS,CAAC;;MAEvB;MACA,MAAMzC,QAAQ,CAAC,CAAC;MAEhB,QAAQyC,SAAS;QACf,KAAK,YAAY;UACfvB,uBAAsB,GAAIb,OAAO,CAAC4C,IAAI,CAACH,QAAQ,CAACb,KAAK,EAAE,WAAW,CAAC;UACnEiB,qBAAqB,CAACH,IAAI,CAAC;UAC3B;QACF,KAAK,iBAAiB;UACpB5B,4BAA2B,GAAId,OAAO,CAAC4C,IAAI,CAACH,QAAQ,CAACb,KAAK,EAAE,WAAW,CAAC;UACxEkB,0BAA0B,CAACJ,IAAI,CAAC;UAChC;QACF,KAAK,gBAAgB;UACnB3B,2BAA0B,GAAIf,OAAO,CAAC4C,IAAI,CAACH,QAAQ,CAACb,KAAK,EAAE,WAAW,CAAC;UACvEmB,yBAAyB,CAACL,IAAI,CAAC;UAC/B;QACF,KAAK,sBAAsB;UACzB1B,iCAAgC,GAAIhB,OAAO,CAAC4C,IAAI,CAACH,QAAQ,CAACb,KAAK,EAAE,WAAW,CAAC;UAC7EoB,+BAA+B,CAACN,IAAI,CAAC;UACrC;QACF,KAAK,yBAAyB;UAC5BzB,oCAAmC,GAAIjB,OAAO,CAAC4C,IAAI,CAACH,QAAQ,CAACb,KAAK,EAAE,WAAW,CAAC;UAChFqB,kCAAkC,CAACP,IAAI,CAAC;UACxC;MACJ;IACF,CAAC;;IAED;IACA,MAAMC,YAAW,GAAKP,SAAS,IAAK;MAClC,QAAQA,SAAS;QACf,KAAK,YAAY;UACf,IAAIvB,uBAAuB,EAAE;YAC3BA,uBAAuB,CAACqC,OAAO,CAAC,CAAC;YACjCrC,uBAAsB,GAAI,IAAI;UAChC;UACA;QACF,KAAK,iBAAiB;UACpB,IAAIC,4BAA4B,EAAE;YAChCA,4BAA4B,CAACoC,OAAO,CAAC,CAAC;YACtCpC,4BAA2B,GAAI,IAAI;UACrC;UACA;QACF,KAAK,gBAAgB;UACnB,IAAIC,2BAA2B,EAAE;YAC/BA,2BAA2B,CAACmC,OAAO,CAAC,CAAC;YACrCnC,2BAA0B,GAAI,IAAI;UACpC;UACA;QACF,KAAK,sBAAsB;UACzB,IAAIC,iCAAiC,EAAE;YACrCA,iCAAiC,CAACkC,OAAO,CAAC,CAAC;YAC3ClC,iCAAgC,GAAI,IAAI;UAC1C;UACA;QACF,KAAK,yBAAyB;UAC5B,IAAIC,oCAAoC,EAAE;YACxCA,oCAAoC,CAACiC,OAAO,CAAC,CAAC;YAC9CjC,oCAAmC,GAAI,IAAI;UAC7C;UACA;MACJ;IACF,CAAC;;IAED;IACA,MAAMkC,gBAAe,GAAIA,CAAA,KAAM;MAC7BR,YAAY,CAAC,YAAY,CAAC;MAC1BA,YAAY,CAAC,iBAAiB,CAAC;MAC/BA,YAAY,CAAC,gBAAgB,CAAC;MAC9BA,YAAY,CAAC,sBAAsB,CAAC;MACpCA,YAAY,CAAC,yBAAyB,CAAC;IACzC,CAAC;;IAED;IACA,MAAMH,gBAAe,GAAKJ,SAAS,IAAK;MACtC,QAAQA,SAAS;QACf,KAAK,OAAO;UAAE,OAAO,MAAM;QAC3B,KAAK,UAAU;UAAE,OAAO,QAAQ;QAChC,KAAK,SAAS;UAAE,OAAO,QAAQ;QAC/B,KAAK,QAAQ;UAAE,OAAO,QAAQ;QAC9B,KAAK,QAAQ;UAAE,OAAO,QAAQ;QAC9B;UAAS,OAAO,EAAE;MACpB;IACF,CAAC;;IAED;IACA,MAAMgB,aAAY,GAAI5D,QAAQ,CAAC;MAC7B6D,UAAU,EAAE,CAAC;MACbC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,CAAC;MAChBC,aAAa,EAAE,CAAC;MAChBC,eAAe,EAAE,CAAC;MAClBC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,CAAC;MAChBC,mBAAmB,EAAE;IACvB,CAAC,CAAC;;IAEF;IACA,MAAMC,cAAa,GAAIA,CAAA,KAAM;MAC3B,MAAMC,KAAI,GAAI;QACZC,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAC/FC,eAAe,EAAE,uBAAuB;QACxCC,SAAS,EAAE;UACTC,UAAU,EAAE;QACd,CAAC;QACD3B,KAAK,EAAE;UACL0B,SAAS,EAAE;YACTF,KAAK,EAAE,SAAS;YAChBI,QAAQ,EAAE,EAAE;YACZC,UAAU,EAAE;UACd,CAAC;UACDC,IAAI,EAAE;QACR,CAAC;QACDC,MAAM,EAAE;UACNL,SAAS,EAAE;YACTF,KAAK,EAAE;UACT;QACF,CAAC;QACDQ,IAAI,EAAE;UACJC,YAAY,EAAE,IAAI;UAClBH,IAAI,EAAE,IAAI;UACVI,KAAK,EAAE,IAAI;UACXC,MAAM,EAAE;QACV;MACF,CAAC;MAED1E,OAAO,CAAC2E,aAAa,CAAC,WAAW,EAAEb,KAAK,CAAC;IAC3C,CAAC;;IAED;IACA,MAAMc,YAAW,GAAIA,CAAA,KAAM;MACzB,IAAIzC,cAAc,CAAC,OAAO,KAAKtB,uBAAuB,EAAE;QACtDA,uBAAuB,CAACgE,MAAM,CAAC,CAAC;MAClC;MACA,IAAI1C,cAAc,CAAC,UAAU,KAAKrB,4BAA4B,EAAE;QAC9DA,4BAA4B,CAAC+D,MAAM,CAAC,CAAC;MACvC;MACA,IAAI1C,cAAc,CAAC,SAAS,KAAKpB,2BAA2B,EAAE;QAC5DA,2BAA2B,CAAC8D,MAAM,CAAC,CAAC;MACtC;MACA,IAAI1C,cAAc,CAAC,QAAQ,KAAKnB,iCAAiC,EAAE;QACjEA,iCAAiC,CAAC6D,MAAM,CAAC,CAAC;MAC5C;MACA,IAAI1C,cAAc,CAAC,QAAQ,KAAKlB,oCAAoC,EAAE;QACpEA,oCAAoC,CAAC4D,MAAM,CAAC,CAAC;MAC/C;IACF,CAAC;;IAED;IACA,MAAM/C,kBAAiB,GAAI,MAAAA,CAAA,KAAY;MACrC,IAAI;QACFN,OAAO,CAACC,SAAQ,GAAI,IAAI;;QAExB;QACAD,OAAO,CAACL,UAAS,GAAI,IAAI;QACzBK,OAAO,CAACJ,eAAc,GAAI,IAAI;QAC9BI,OAAO,CAACH,cAAa,GAAI,IAAI;QAC7BG,OAAO,CAACF,oBAAmB,GAAI,IAAI;QACnCE,OAAO,CAACD,uBAAsB,GAAI,IAAI;;QAEtC;QACA1B,SAAS,CAAC;UACRkC,OAAO,EAAE,OAAOJ,eAAe,CAACC,KAAK,OAAO;UAC5CI,IAAI,EAAE,MAAM;UACZC,QAAQ,EAAE;QACZ,CAAC,CAAC;;QAEF;QACAkB,gBAAgB,CAAC,CAAC;;QAElB;QACA,MAAM2B,QAAO,GAAI,MAAM7E,KAAK,CAAC8E,GAAG,CAAC,uEAAuErD,UAAU,CAACE,KAAK,EAAE,CAAC;QAC3H,MAAMoD,aAAY,GAAIF,QAAQ,CAACpC,IAAI;;QAEnC;QACAuC,MAAM,CAACC,MAAM,CAAC9B,aAAa,EAAE4B,aAAa,CAAC5B,aAAa,CAAC;;QAEzD;QACA6B,MAAM,CAACC,MAAM,CAAChE,SAAS,EAAE;UACvBC,UAAU,EAAE6D,aAAa,CAAC7D,UAAU;UACpCC,eAAe,EAAE4D,aAAa,CAAC5D,eAAe;UAC9CC,cAAc,EAAE2D,aAAa,CAAC3D,cAAc;UAC5CC,oBAAoB,EAAE0D,aAAa,CAAC1D,oBAAoB;UACxDC,uBAAuB,EAAEyD,aAAa,CAACzD;QACzC,CAAC,CAAC;;QAEF;QACA,MAAM5B,QAAQ,CAAC,CAAC;;QAEhB;QACA,MAAMwF,QAAO,GAAI,EAAE;QAEnB,IAAIhD,cAAc,CAAC,OAAO,CAAC,EAAE;UAC3BgD,QAAQ,CAACC,IAAI,CAAC9C,kBAAkB,CAAC,YAAY,EAAE9B,eAAe,EAAEU,SAAS,CAACC,UAAU,CAAC,CAAC;QACxF;QAEA,IAAIgB,cAAc,CAAC,UAAU,CAAC,EAAE;UAC9BgD,QAAQ,CAACC,IAAI,CAAC9C,kBAAkB,CAAC,iBAAiB,EAAE7B,oBAAoB,EAAES,SAAS,CAACE,eAAe,CAAC,CAAC;QACvG;QAEA,IAAIe,cAAc,CAAC,SAAS,CAAC,EAAE;UAC7BgD,QAAQ,CAACC,IAAI,CAAC9C,kBAAkB,CAAC,gBAAgB,EAAE5B,mBAAmB,EAAEQ,SAAS,CAACG,cAAc,CAAC,CAAC;QACpG;QAEA,IAAIc,cAAc,CAAC,QAAQ,CAAC,EAAE;UAC5BgD,QAAQ,CAACC,IAAI,CAAC9C,kBAAkB,CAAC,sBAAsB,EAAE3B,yBAAyB,EAAEO,SAAS,CAACI,oBAAoB,CAAC,CAAC;QACtH;QAEA,IAAIa,cAAc,CAAC,QAAQ,CAAC,EAAE;UAC5BgD,QAAQ,CAACC,IAAI,CAAC9C,kBAAkB,CAAC,yBAAyB,EAAE1B,4BAA4B,EAAEM,SAAS,CAACK,uBAAuB,CAAC,CAAC;QAC/H;QAEA,MAAM8D,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;;QAE3B;QACArF,cAAc,CAAC;UACbyC,KAAK,EAAE,QAAQ;UACfR,OAAO,EAAE,GAAGJ,eAAe,CAACC,KAAK,SAAS;UAC1CI,IAAI,EAAE,SAAS;UACfC,QAAQ,EAAE;QACZ,CAAC,CAAC;MAEJ,EAAE,OAAOsD,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC1F,SAAS,CAAC;UACRkC,OAAO,EAAE,aAAY,IAAKwD,KAAK,CAACT,QAAQ,EAAEpC,IAAI,EAAEX,OAAM,IAAKwD,KAAK,CAACxD,OAAO,CAAC;UACzEC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,UAAU;QACR;QACAR,OAAO,CAACC,SAAQ,GAAI,KAAK;QACzBD,OAAO,CAACL,UAAS,GAAI,KAAK;QAC1BK,OAAO,CAACJ,eAAc,GAAI,KAAK;QAC/BI,OAAO,CAACH,cAAa,GAAI,KAAK;QAC9BG,OAAO,CAACF,oBAAmB,GAAI,KAAK;QACpCE,OAAO,CAACD,uBAAsB,GAAI,KAAK;MACzC;IACF,CAAC;;IAED;IACA,MAAMsB,qBAAoB,GAAKH,IAAI,IAAK;MACtC,IAAI,CAACA,IAAG,IAAK,CAAC7B,uBAAuB,EAAE;QACrC2E,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAC;QACrC;MACF;MAEA,IAAI;QACF,MAAME,MAAK,GAAI;UACblD,KAAK,EAAE;YACLmD,IAAI,EAAEhD,IAAI,CAACH,KAAI,IAAK,QAAQ;YAC5BoD,OAAO,EAAE,IAAIhE,eAAe,CAACC,KAAK,IAAI;YACtCyC,IAAI,EAAE,QAAQ;YACdJ,SAAS,EAAE;cACTE,QAAQ,EAAE;YACZ,CAAC;YACDyB,YAAY,EAAE;cACZzB,QAAQ,EAAE,EAAE;cACZJ,KAAK,EAAE;YACT;UACF,CAAC;UACD8B,OAAO,EAAE;YACPC,OAAO,EAAE,MAAM;YACfC,SAAS,EAAE,SAAAA,CAASC,MAAM,EAAE;cAC1B,MAAMC,KAAI,GAAID,MAAM,CAAC,CAAC,CAAC;cACvB,IAAIE,cAAa,GAAID,KAAK,CAACrE,KAAK,CAACuE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC;cACjF,IAAIC,QAAO,GAAI,EAAE;cAEjB,QAAQ3E,UAAU,CAACE,KAAK;gBACtB,KAAK,OAAO;kBACVyE,QAAO,GAAI,GAAG;kBACd;gBACF,KAAK,QAAQ;kBACXA,QAAO,GAAI,GAAG;kBACd;gBACF,KAAK,SAAS;kBACZA,QAAO,GAAI,GAAG;kBACd;cACJ;cAEA,OAAO,GAAGJ,KAAK,CAAC7F,IAAI,IAAIiG,QAAQ,QAAQJ,KAAK,CAACK,UAAU,MAAMJ,cAAc,EAAE;YAChF,CAAC;YACDlC,eAAe,EAAE,uBAAuB;YACxCuC,WAAW,EAAE,MAAM;YACnBC,WAAW,EAAE,CAAC;YACdvC,SAAS,EAAE;cACTF,KAAK,EAAE;YACT,CAAC;YACD0C,YAAY,EAAE;UAChB,CAAC;UACDlC,IAAI,EAAE;YACJF,IAAI,EAAE,IAAI;YACVI,KAAK,EAAE,IAAI;YACXC,MAAM,EAAE,IAAI;YACZF,YAAY,EAAE;UAChB,CAAC;UACDkC,KAAK,EAAE;YACL1E,IAAI,EAAE,UAAU;YAChBU,IAAI,EAAEA,IAAI,CAACgE,KAAI,IAAK,EAAE;YACtBC,WAAW,EAAE,KAAK;YAClBC,QAAQ,EAAE;cACRC,cAAc,EAAE;YAClB,CAAC;YACDC,QAAQ,EAAE;cACRC,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF,CAAC;YACDiD,SAAS,EAAE;cACTjD,KAAK,EAAE,SAAS;cAChBkD,MAAM,EAAEvE,IAAI,CAACgE,KAAI,IAAKhE,IAAI,CAACgE,KAAK,CAACQ,MAAK,GAAI,EAAC,GAAI,EAAC,GAAI;YACtD;UACF,CAAC;UACDC,KAAK,EAAE;YACLnF,IAAI,EAAE,OAAO;YACb5B,IAAI,EAAE,QAAQ;YACdgH,aAAa,EAAE;cACbrD,KAAK,EAAE;YACT,CAAC;YACD+C,QAAQ,EAAE;cACRO,IAAI,EAAE,IAAI;cACVN,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF,CAAC;YACDuD,SAAS,EAAE;cACTP,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF;UACF,CAAC;UACDwD,MAAM,EAAE,CAAC;YACPnH,IAAI,EAAE,KAAK;YACX4B,IAAI,EAAE,MAAM;YACZU,IAAI,EAAEA,IAAI,CAAC6E,MAAK,IAAK,EAAE;YACvBC,MAAM,EAAE,IAAI;YACZC,MAAM,EAAE,QAAQ;YAChBC,UAAU,EAAE,CAAC;YACbC,SAAS,EAAE;cACT5D,KAAK,EAAE;YACT,CAAC;YACDgD,SAAS,EAAE;cACTa,KAAK,EAAE;YACT,CAAC;YACDC,SAAS,EAAE;cACT9D,KAAK,EAAE,IAAI/D,OAAO,CAAC8H,OAAO,CAACC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CACpD;gBAAEC,MAAM,EAAE,CAAC;gBAAEjE,KAAK,EAAE;cAA0B,CAAC,EAC/C;gBAAEiE,MAAM,EAAE,CAAC;gBAAEjE,KAAK,EAAE;cAA0B,EAC/C;YACH,CAAC;YACDkE,SAAS,EAAE;cACTvF,IAAI,EAAE,CACJ;gBAAEV,IAAI,EAAE,KAAK;gBAAE5B,IAAI,EAAE;cAAM,CAAC,EAC5B;gBAAE4B,IAAI,EAAE,KAAK;gBAAE5B,IAAI,EAAE;cAAM;YAE/B,CAAC;YACD8H,QAAQ,EAAE;cACRxF,IAAI,EAAE,CACJ;gBAAEV,IAAI,EAAE,SAAS;gBAAE5B,IAAI,EAAE;cAAM;YAEnC;UACF,CAAC;QACH,CAAC;QAEDS,uBAAuB,CAACsH,SAAS,CAAC1C,MAAM,EAAE,IAAI,CAAC;MACjD,EAAE,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MACpC;IACF,CAAC;;IAED;IACA,MAAMzC,0BAAyB,GAAKJ,IAAI,IAAK;MAC3C,IAAI,CAACA,IAAG,IAAK,CAAC5B,4BAA4B,EAAE;QAC1C0E,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAC;QACvC;MACF;MAEA,IAAI;QACF,MAAME,MAAK,GAAI;UACblD,KAAK,EAAE;YACLmD,IAAI,EAAEhD,IAAI,CAACH,KAAI,IAAK,QAAQ;YAC5BoD,OAAO,EAAE,IAAIhE,eAAe,CAACC,KAAK,IAAI;YACtCyC,IAAI,EAAE;UACR,CAAC;UACDwB,OAAO,EAAE;YACPC,OAAO,EAAE,MAAM;YACfsC,WAAW,EAAE;cACXpG,IAAI,EAAE;YACR,CAAC;YACD+D,SAAS,EAAE,YAAY;YACvB/B,eAAe,EAAE,uBAAuB;YACxCuC,WAAW,EAAE,MAAM;YACnBC,WAAW,EAAE,CAAC;YACdvC,SAAS,EAAE;cACTF,KAAK,EAAE;YACT,CAAC;YACD0C,YAAY,EAAE;UAChB,CAAC;UACDlC,IAAI,EAAE;YACJF,IAAI,EAAE,IAAI;YACVI,KAAK,EAAE,IAAI;YACXC,MAAM,EAAE,IAAI;YACZF,YAAY,EAAE;UAChB,CAAC;UACDkC,KAAK,EAAE;YACL1E,IAAI,EAAE,OAAO;YACb5B,IAAI,EAAE,QAAQ;YACdgH,aAAa,EAAE;cACbrD,KAAK,EAAE;YACT,CAAC;YACD+C,QAAQ,EAAE;cACRO,IAAI,EAAE,IAAI;cACVN,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF,CAAC;YACDuD,SAAS,EAAE;cACTP,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF;UACF,CAAC;UACDoD,KAAK,EAAE;YACLnF,IAAI,EAAE,UAAU;YAChBU,IAAI,EAAEA,IAAI,CAAC2F,aAAY,IAAK,EAAE;YAC9BrB,SAAS,EAAE;cACTsB,QAAQ,EAAE,CAAC;cACXrB,MAAM,EAAE,CAAC;cACTlD,KAAK,EAAE;YACT,CAAC;YACD+C,QAAQ,EAAE;cACRC,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF;UACF,CAAC;UACDwE,SAAS,EAAE;YACTC,GAAG,EAAE,CAAC;YACNC,GAAG,EAAEC,IAAI,CAACD,GAAG,CAAC,IAAI/F,IAAI,CAACiG,WAAU,IAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3CjD,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAChBkD,OAAO,EAAE;cACP7E,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS;YAC9B,CAAC;YACD8E,UAAU,EAAE,IAAI;YAChBC,MAAM,EAAE,YAAY;YACpBzE,IAAI,EAAE,QAAQ;YACdK,MAAM,EAAE,IAAI;YACZ2C,IAAI,EAAE;UACR,CAAC;UACDE,MAAM,EAAE,CAAC;YACPnH,IAAI,EAAE,KAAK;YACX4B,IAAI,EAAE,KAAK;YACXU,IAAI,EAAEA,IAAI,CAACiG,WAAU,IAAK,EAAE;YAC5BI,QAAQ,EAAE,KAAK;YACfpB,SAAS,EAAE;cACT5D,KAAK,EAAE,SAAAA,CAAUiC,MAAM,EAAE;gBACvB,MAAMpE,KAAI,GAAIoE,MAAM,CAACpE,KAAK;gBAC1B,MAAM6G,GAAE,GAAIC,IAAI,CAACD,GAAG,CAAC,IAAI/F,IAAI,CAACiG,WAAU,IAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClD,OAAO,IAAI3I,OAAO,CAAC8H,OAAO,CAACC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CACpD;kBAAEC,MAAM,EAAE,CAAC;kBAAEjE,KAAK,EAAE;gBAAU,CAAC,EAC/B;kBAAEiE,MAAM,EAAEpG,KAAI,GAAI6G,GAAG;kBAAE1E,KAAK,EAAE;gBAAU,EACzC,CAAC;cACJ,CAAC;cACDiF,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAC3B,CAAC;YACDC,KAAK,EAAE;cACL5B,IAAI,EAAE,IAAI;cACV6B,QAAQ,EAAE,OAAO;cACjBnD,SAAS,EAAE;YACb;UACF,CAAC;QACH,CAAC;QAEDjF,4BAA4B,CAACqH,SAAS,CAAC1C,MAAM,EAAE,IAAI,CAAC;MACtD,EAAE,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;IACF,CAAC;;IAED;IACA,MAAMxC,yBAAwB,GAAKL,IAAI,IAAK;MAC1C,IAAI,CAACA,IAAG,IAAK,CAAC3B,2BAA2B,EAAE;QACzCyE,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAC;QACvC;MACF;MAEA,IAAI;QACF,MAAME,MAAK,GAAI;UACblD,KAAK,EAAE;YACLmD,IAAI,EAAEhD,IAAI,CAACH,KAAI,IAAK,QAAQ;YAC5BoD,OAAO,EAAE,IAAIhE,eAAe,CAACC,KAAK,IAAI;YACtCyC,IAAI,EAAE;UACR,CAAC;UACDwB,OAAO,EAAE;YACPC,OAAO,EAAE,MAAM;YACfsC,WAAW,EAAE;cACXpG,IAAI,EAAE;YACR,CAAC;YACD+D,SAAS,EAAE,YAAY;YACvB/B,eAAe,EAAE,uBAAuB;YACxCuC,WAAW,EAAE,MAAM;YACnBC,WAAW,EAAE,CAAC;YACdvC,SAAS,EAAE;cACTF,KAAK,EAAE;YACT,CAAC;YACD0C,YAAY,EAAE;UAChB,CAAC;UACDlC,IAAI,EAAE;YACJF,IAAI,EAAE,IAAI;YACVI,KAAK,EAAE,IAAI;YACXC,MAAM,EAAE,IAAI;YACZF,YAAY,EAAE;UAChB,CAAC;UACDkC,KAAK,EAAE;YACL1E,IAAI,EAAE,OAAO;YACb5B,IAAI,EAAE,QAAQ;YACdgH,aAAa,EAAE;cACbrD,KAAK,EAAE;YACT,CAAC;YACD+C,QAAQ,EAAE;cACRO,IAAI,EAAE,IAAI;cACVN,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF,CAAC;YACDuD,SAAS,EAAE;cACTP,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF;UACF,CAAC;UACDoD,KAAK,EAAE;YACLnF,IAAI,EAAE,UAAU;YAChBU,IAAI,EAAEA,IAAI,CAACyG,YAAW,IAAK,EAAE;YAC7BnC,SAAS,EAAE;cACTsB,QAAQ,EAAE,CAAC;cACXrB,MAAM,EAAE,CAAC;cACTlD,KAAK,EAAE;YACT,CAAC;YACD+C,QAAQ,EAAE;cACRC,SAAS,EAAE;gBACThD,KAAK,EAAE;cACT;YACF;UACF,CAAC;UACDwD,MAAM,EAAE,CAAC;YACPnH,IAAI,EAAE,KAAK;YACX4B,IAAI,EAAE,KAAK;YACXU,IAAI,EAAEA,IAAI,CAACiG,WAAU,IAAK,EAAE;YAC5BI,QAAQ,EAAE,KAAK;YACfpB,SAAS,EAAE;cACT5D,KAAK,EAAE,SAAAA,CAAUiC,MAAM,EAAE;gBACvB,MAAMoD,SAAQ,GAAI,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;gBACzE,OAAO,IAAIpJ,OAAO,CAAC8H,OAAO,CAACC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CACpD;kBAAEC,MAAM,EAAE,CAAC;kBAAEjE,KAAK,EAAE;gBAAU,CAAC,EAC/B;kBAAEiE,MAAM,EAAE,CAAC;kBAAEjE,KAAK,EAAEqF,SAAS,CAACpD,MAAM,CAACqD,SAAQ,GAAID,SAAS,CAAClC,MAAM;gBAAE,EACpE,CAAC;cACJ,CAAC;cACD8B,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAC3B,CAAC;YACDC,KAAK,EAAE;cACL5B,IAAI,EAAE,IAAI;cACV6B,QAAQ,EAAE,OAAO;cACjBnD,SAAS,EAAE;YACb;UACF,CAAC;QACH,CAAC;QAEDhF,2BAA2B,CAACoH,SAAS,CAAC1C,MAAM,EAAE,IAAI,CAAC;MACrD,EAAE,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;IACF,CAAC;;IAED;IACA,MAAMvC,+BAA8B,GAAKN,IAAI,IAAK;MAChD,IAAI,CAACA,IAAG,IAAK,CAAC1B,iCAAiC,EAAE;QAC/CwE,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAC;QACvC;MACF;MAEA,IAAI;QACF,MAAME,MAAK,GAAI;UACblD,KAAK,EAAE;YACLmD,IAAI,EAAEhD,IAAI,CAACH,KAAI,IAAK,QAAQ;YAC5BoD,OAAO,EAAE,IAAIhE,eAAe,CAACC,KAAK,IAAI;YACtCyC,IAAI,EAAE;UACR,CAAC;UACDwB,OAAO,EAAE;YACPC,OAAO,EAAE,MAAM;YACfC,SAAS,EAAE,mBAAmB;YAC9B/B,eAAe,EAAE,uBAAuB;YACxCuC,WAAW,EAAE,MAAM;YACnBC,WAAW,EAAE,CAAC;YACdvC,SAAS,EAAE;cACTF,KAAK,EAAE;YACT,CAAC;YACD0C,YAAY,EAAE;UAChB,CAAC;UACDnC,MAAM,EAAE;YACNtC,IAAI,EAAE,QAAQ;YACd8G,MAAM,EAAE,UAAU;YAClBrE,KAAK,EAAE,EAAE;YACT6E,GAAG,EAAE,EAAE;YACP5E,MAAM,EAAE,EAAE;YACVT,SAAS,EAAE;cACTF,KAAK,EAAE;YACT;UACF,CAAC;UACDwD,MAAM,EAAE,CAAC;YACPnH,IAAI,EAAE,MAAM;YACZ4B,IAAI,EAAE,KAAK;YACXuH,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;YACtBC,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;YACtBC,iBAAiB,EAAE,IAAI;YACvB9B,SAAS,EAAE;cACTqB,YAAY,EAAE,CAAC;cACfzC,WAAW,EAAE,MAAM;cACnBC,WAAW,EAAE;YACf,CAAC;YACDyC,KAAK,EAAE;cACL5B,IAAI,EAAE,KAAK;cACX6B,QAAQ,EAAE;YACZ,CAAC;YACDQ,QAAQ,EAAE;cACRT,KAAK,EAAE;gBACL5B,IAAI,EAAE,IAAI;gBACVlD,QAAQ,EAAE,IAAI;gBACdC,UAAU,EAAE;cACd;YACF,CAAC;YACDuF,SAAS,EAAE;cACTtC,IAAI,EAAE;YACR,CAAC;YACD3E,IAAI,EAAEA,IAAI,CAACkH,OAAM,GAAIlH,IAAI,CAACkH,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;cACvD,OAAO;gBACL3J,IAAI,EAAE0J,MAAM;gBACZlI,KAAK,EAAEc,IAAI,CAACsH,MAAM,CAACD,KAAK;cAC1B,CAAC;YACH,CAAC,IAAI;UACP,CAAC;QACH,CAAC;QAED/I,iCAAiC,CAACmH,SAAS,CAAC1C,MAAM,EAAE,IAAI,CAAC;MAC3D,EAAE,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;IACF,CAAC;;IAED;IACA,MAAMtC,kCAAiC,GAAKP,IAAI,IAAK;MACnD,IAAI,CAACA,IAAG,IAAK,CAACzB,oCAAoC,EAAE;QAClDuE,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAC;QACvC;MACF;MAEA,IAAI;QACF,MAAME,MAAK,GAAI;UACblD,KAAK,EAAE;YACLmD,IAAI,EAAEhD,IAAI,CAACH,KAAI,IAAK,QAAQ;YAC5BoD,OAAO,EAAE,IAAIhE,eAAe,CAACC,KAAK,IAAI;YACtCyC,IAAI,EAAE;UACR,CAAC;UACDwB,OAAO,EAAE;YACPC,OAAO,EAAE,MAAM;YACfC,SAAS,EAAE,0BAA0B;YACrC/B,eAAe,EAAE,uBAAuB;YACxCuC,WAAW,EAAE,MAAM;YACnBC,WAAW,EAAE,CAAC;YACdvC,SAAS,EAAE;cACTF,KAAK,EAAE;YACT,CAAC;YACD0C,YAAY,EAAE;UAChB,CAAC;UACDnC,MAAM,EAAE;YACNwE,MAAM,EAAE,UAAU;YAClBzE,IAAI,EAAE,EAAE;YACRiF,GAAG,EAAE,QAAQ;YACbrF,SAAS,EAAE;cACTF,KAAK,EAAE;YACT;UACF,CAAC;UACDwD,MAAM,EAAE,CAAC;YACPnH,IAAI,EAAE,MAAM;YACZ4B,IAAI,EAAE,KAAK;YACXuH,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;YACtBE,iBAAiB,EAAE,KAAK;YACxB9B,SAAS,EAAE;cACTqB,YAAY,EAAE,CAAC;cACfzC,WAAW,EAAE,MAAM;cACnBC,WAAW,EAAE;YACf,CAAC;YACDyC,KAAK,EAAE;cACL5B,IAAI,EAAE,KAAK;cACX6B,QAAQ,EAAE;YACZ,CAAC;YACDQ,QAAQ,EAAE;cACRT,KAAK,EAAE;gBACL5B,IAAI,EAAE,IAAI;gBACVlD,QAAQ,EAAE,IAAI;gBACdC,UAAU,EAAE;cACd;YACF,CAAC;YACDuF,SAAS,EAAE;cACTtC,IAAI,EAAE;YACR,CAAC;YACD3E,IAAI,EAAEA,IAAI,CAACA,IAAG,GAAIA,IAAI,CAACA,IAAI,CAACmH,GAAG,CAACI,IAAG,IAAK;cACtC;cACA,MAAMC,QAAO,GAAI;gBACf,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE;cACT,CAAC;cAED,OAAO;gBACL,GAAGD,IAAI;gBACPtC,SAAS,EAAE;kBACT5D,KAAK,EAAEmG,QAAQ,CAACD,IAAI,CAAC7J,IAAI,KAAK+J;gBAChC;cACF,CAAC;YACH,CAAC,IAAI;UACP,CAAC;QACH,CAAC;QAEDlJ,oCAAoC,CAACkH,SAAS,CAAC1C,MAAM,EAAE,IAAI,CAAC;MAC9D,EAAE,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;IACF,CAAC;;IAED;IACA,MAAM6E,cAAa,GAAKxI,KAAK,IAAK;MAChC,IAAIA,KAAI,KAAMuI,SAAQ,IAAKvI,KAAI,KAAM,IAAI,EAAE,OAAO,OAAO;MACzD,OAAO,GAAE,GAAIyI,UAAU,CAACzI,KAAK,CAAC,CAACuE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC,EAAE;IACnF,CAAC;;IAED;IACA3G,SAAS,CAAC,YAAY;MACpB,MAAME,QAAQ,CAAC,CAAC;;MAEhB;MACAkE,cAAc,CAAC,CAAC;;MAEhB;MACAyG,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE3F,YAAY,CAAC;;MAE/C;MACA9C,kBAAkB,CAAC,CAAC;;MAEpB;MACAhC,cAAc,CAAC;QACbyC,KAAK,EAAE,UAAU;QACjBR,OAAO,EAAE,eAAe;QACxBC,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAvC,WAAW,CAAC,MAAM;MAChB;MACAyD,gBAAgB,CAAC,CAAC;;MAElB;MACAmH,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAE5F,YAAY,CAAC;IACpD,CAAC,CAAC;IAEF,OAAO;MACLpE,eAAe;MACfC,oBAAoB;MACpBC,mBAAmB;MACnBC,yBAAyB;MACzBC,4BAA4B;MAC5BY,OAAO;MACPE,UAAU;MACVC,eAAe;MACfyB,aAAa;MACbtB,kBAAkB;MAClBsI,cAAc;MACdlI,iBAAiB;MACjBC,cAAc;MACdE,qBAAqB;MACrBR;IACF,CAAC;EACH,CAAC;EACD4I,OAAO,EAAC;IAEN,MAAMC,gBAAgBA,CAACC,IAAI,EAAE;MAC3B;MACA,IAAI,IAAI,CAACC,MAAM,CAACD,IAAG,KAAMA,IAAI,EAAE;MAE/B,MAAM,IAAI,CAACE,cAAc,CAAC,CAAC;MAC3B,IAAI,CAACC,OAAO,CAAC1F,IAAI,CAACuF,IAAI,CAAC;IACzB,CAAC;IACDE,cAAcA,CAAA,EAAG;MACf,OAAO,IAAIxF,OAAO,CAAE0F,OAAO,IAAK;QAC9B5K,IAAI,CAAC6K,EAAE,CAAC,2BAA2B,EAAE;UACnC/I,QAAQ,EAAE,GAAG;UACbgJ,OAAO,EAAE,CAAC;UACVC,CAAC,EAAE,GAAG;UACNC,IAAI,EAAE,WAAW;UACjBC,UAAU,EAAEL;QACd,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}