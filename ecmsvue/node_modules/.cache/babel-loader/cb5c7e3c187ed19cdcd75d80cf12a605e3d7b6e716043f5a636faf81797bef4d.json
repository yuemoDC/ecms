{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, computed, onMounted, nextTick } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport * as echarts from 'echarts';\nimport axios from 'axios';\n\n// 数据状态\n\nexport default {\n  __name: 'DataAnalysisDashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedMerchantId = ref(null);\n    const merchants = ref([{\n      id: 1,\n      name: '商家A'\n    }, {\n      id: 2,\n      name: '商家B'\n    }, {\n      id: 3,\n      name: '商家C'\n    }\n    // 实际应用中应该从API获取商家列表\n    ]);\n    const loading = ref(false);\n    const dashboardData = ref(null);\n\n    // 图表引用\n    const salesChartRef = ref(null);\n    const inventoryPieRef = ref(null);\n    const customerSegmentPieRef = ref(null);\n\n    // 对话框状态\n    const insightsDialogVisible = ref(false);\n    const insightsDialogTitle = ref('');\n    const activeInsightTab = ref('insights');\n    const currentInsights = ref('');\n    const currentRecommendations = ref('');\n\n    // 加载仪表板数据\n    const loadDashboardData = async () => {\n      if (!selectedMerchantId.value) {\n        ElMessage.warning('请先选择商家');\n        return;\n      }\n      loading.value = true;\n      try {\n        const response = await axios.get(`http://localhost:8080/api/data-analysis/dashboard/${selectedMerchantId.value}`);\n        dashboardData.value = response.data;\n\n        // 渲染图表\n        nextTick(() => {\n          renderSalesChart();\n          renderInventoryPie();\n          renderCustomerSegmentPie();\n        });\n      } catch (error) {\n        console.error('加载数据失败:', error);\n        ElMessage.error('加载数据失败，请稍后重试');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 渲染销售趋势图表\n    const renderSalesChart = () => {\n      if (!salesChartRef.value) return;\n      const chart = echarts.init(salesChartRef.value);\n      const salesData = dashboardData.value.salesTrend.monthlySales;\n      const option = {\n        title: {\n          text: '月度销售趋势',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: params => {\n            return `${params[0].name}<br/>销售额: ￥${params[0].value.toFixed(2)}`;\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: Object.keys(salesData),\n          axisLabel: {\n            rotate: 45\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: '￥{value}'\n          }\n        },\n        series: [{\n          data: Object.values(salesData),\n          type: 'line',\n          smooth: true,\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(64, 158, 255, 0.3)'\n            }, {\n              offset: 1,\n              color: 'rgba(64, 158, 255, 0.1)'\n            }])\n          },\n          itemStyle: {\n            color: '#409EFF'\n          }\n        }]\n      };\n      chart.setOption(option);\n\n      // 监听窗口大小变化\n      window.addEventListener('resize', () => {\n        chart.resize();\n      });\n    };\n\n    // 渲染库存状态饼图\n    const renderInventoryPie = () => {\n      if (!inventoryPieRef.value) return;\n      const chart = echarts.init(inventoryPieRef.value);\n      const statusCounts = dashboardData.value.inventoryAlerts.alertsByRisk;\n      const pieData = Object.entries(statusCounts).map(([key, value]) => ({\n        name: getStatusText(key),\n        value: value.length,\n        status: key\n      }));\n      const option = {\n        title: {\n          text: '库存状态分布',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{b}: {c} ({d}%)'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left'\n        },\n        series: [{\n          type: 'pie',\n          radius: ['40%', '70%'],\n          avoidLabelOverlap: false,\n          itemStyle: {\n            borderRadius: 10,\n            borderColor: '#fff',\n            borderWidth: 2\n          },\n          label: {\n            show: false,\n            position: 'center'\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: '20',\n              fontWeight: 'bold'\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: pieData,\n          color: ['#F56C6C', '#E6A23C', '#409EFF', '#67C23A', '#909399']\n        }]\n      };\n      chart.setOption(option);\n      window.addEventListener('resize', () => {\n        chart.resize();\n      });\n    };\n\n    // 渲染客户细分饼图\n    const renderCustomerSegmentPie = () => {\n      if (!customerSegmentPieRef.value) return;\n      const chart = echarts.init(customerSegmentPieRef.value);\n      const segmentStats = dashboardData.value.customerBehavior.segmentStats;\n      const pieData = Object.entries(segmentStats).map(([segment, stats]) => ({\n        name: segment,\n        value: stats.count\n      }));\n      const option = {\n        title: {\n          text: '客户细分分布',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{b}: {c} ({d}%)'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left'\n        },\n        series: [{\n          type: 'pie',\n          radius: '65%',\n          center: ['50%', '55%'],\n          data: pieData,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          },\n          color: ['#5470C6', '#91CC75', '#FAC858', '#EE6666']\n        }]\n      };\n      chart.setOption(option);\n      window.addEventListener('resize', () => {\n        chart.resize();\n      });\n    };\n\n    // 显示洞察对话框\n    const showInsights = type => {\n      activeInsightTab.value = 'insights';\n      if (type === 'sales') {\n        insightsDialogTitle.value = '销售趋势分析洞察';\n        currentInsights.value = formatText(dashboardData.value.salesTrend.insights);\n        currentRecommendations.value = formatText(dashboardData.value.salesTrend.recommendations);\n      } else if (type === 'inventory') {\n        insightsDialogTitle.value = '库存状况评估';\n        currentInsights.value = formatText(dashboardData.value.inventoryAlerts.inventoryHealthAssessment);\n        currentRecommendations.value = formatInventoryRecommendations();\n      } else if (type === 'customer') {\n        insightsDialogTitle.value = '客户行为分析';\n        currentInsights.value = formatText(dashboardData.value.customerBehavior.insights);\n        currentRecommendations.value = formatText(dashboardData.value.customerBehavior.recommendations);\n      }\n      insightsDialogVisible.value = true;\n    };\n\n    // 格式化文本，将换行符转换为HTML\n    const formatText = text => {\n      return text.replace(/\\n/g, '<br>');\n    };\n\n    // 格式化库存建议\n    const formatInventoryRecommendations = () => {\n      const recommendations = dashboardData.value.inventoryAlerts.inventoryRecommendations;\n      if (!recommendations.length) return '暂无补货建议';\n      let html = '<h4>库存补货建议：</h4><ul>';\n      recommendations.forEach(item => {\n        html += `<li>${item.productName}:\n      当前库存 ${item.currentStock},\n      预测销量 ${item.predictedSales},\n      建议库存 ${item.recommendedStock},\n      需补货 ${item.restockAmount}</li>`;\n      });\n      html += '</ul>';\n      return html;\n    };\n\n    // 获取建议补货量\n    const getRecommendedRestock = productId => {\n      const recommendation = dashboardData.value.inventoryAlerts.inventoryRecommendations.find(r => r.productId === productId);\n      return recommendation ? recommendation.restockAmount : '-';\n    };\n\n    // 获取状态标签类型\n    const getStatusTagType = status => {\n      const statusMap = {\n        'CRITICAL': 'danger',\n        'WARNING': 'warning',\n        'ATTENTION': 'info',\n        'HEALTHY': 'success',\n        'STABLE': ''\n      };\n      return statusMap[status] || '';\n    };\n\n    // 获取状态文本\n    const getStatusText = status => {\n      const statusMap = {\n        'CRITICAL': '紧急',\n        'WARNING': '警告',\n        'ATTENTION': '注意',\n        'HEALTHY': '充足',\n        'STABLE': '稳定'\n      };\n      return statusMap[status] || status;\n    };\n\n    // 表格行样式\n    const tableRowClassName = ({\n      row\n    }) => {\n      if (row.status === 'CRITICAL') return 'critical-row';\n      if (row.status === 'WARNING') return 'warning-row';\n      return '';\n    };\n\n    // 计算客户细分表格数据\n    const customerSegmentTableData = computed(() => {\n      if (!dashboardData.value) return [];\n      const segmentStats = dashboardData.value.customerBehavior.segmentStats;\n      const customerAnalytics = dashboardData.value.customerBehavior.customerAnalytics;\n      return Object.entries(segmentStats).map(([segment, stats]) => {\n        const segmentCustomers = customerAnalytics.filter(c => c.customerSegment === segment);\n        const avgTotalSpend = segmentCustomers.reduce((sum, c) => sum + c.totalSpend, 0) / segmentCustomers.length || 0;\n        const avgFrequency = segmentCustomers.reduce((sum, c) => sum + c.monthlyFrequency, 0) / segmentCustomers.length || 0;\n        return {\n          segment,\n          count: stats.count,\n          percentage: stats.percentage,\n          avgTotalSpend,\n          avgFrequency\n        };\n      });\n    });\n\n    // 获取高价值客户TOP10\n    const topCustomers = computed(() => {\n      if (!dashboardData.value) return [];\n      return dashboardData.value.customerBehavior.customerAnalytics.filter(c => c.customerSegment === '高价值客户').sort((a, b) => b.totalSpend - a.totalSpend).slice(0, 10);\n    });\n\n    // 表格合计方法\n    const getSummaries = param => {\n      const {\n        columns,\n        data\n      } = param;\n      const sums = [];\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = '总计';\n          return;\n        }\n        const values = data.map(item => Number(item[column.property]));\n        if (!values.every(value => isNaN(value))) {\n          sums[index] = values.reduce((prev, curr) => {\n            const value = Number(curr);\n            if (!isNaN(value)) {\n              return prev + curr;\n            } else {\n              return prev;\n            }\n          }, 0);\n          if (column.property === 'percentage') {\n            sums[index] = sums[index].toFixed(1) + '%';\n          } else if (column.property === 'avgTotalSpend') {\n            sums[index] = '￥' + sums[index].toFixed(2);\n          } else if (column.property === 'avgFrequency') {\n            sums[index] = sums[index].toFixed(2) + ' 次/月';\n          }\n        } else {\n          sums[index] = '-';\n        }\n      });\n      return sums;\n    };\n\n    // 组件挂载时初始化\n    onMounted(() => {\n      // 如果有默认商家ID，自动加载数据\n      if (selectedMerchantId.value) {\n        loadDashboardData();\n      }\n    });\n    const __returned__ = {\n      selectedMerchantId,\n      merchants,\n      loading,\n      dashboardData,\n      salesChartRef,\n      inventoryPieRef,\n      customerSegmentPieRef,\n      insightsDialogVisible,\n      insightsDialogTitle,\n      activeInsightTab,\n      currentInsights,\n      currentRecommendations,\n      loadDashboardData,\n      renderSalesChart,\n      renderInventoryPie,\n      renderCustomerSegmentPie,\n      showInsights,\n      formatText,\n      formatInventoryRecommendations,\n      getRecommendedRestock,\n      getStatusTagType,\n      getStatusText,\n      tableRowClassName,\n      customerSegmentTableData,\n      topCustomers,\n      getSummaries,\n      ref,\n      computed,\n      onMounted,\n      nextTick,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get echarts() {\n        return echarts;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","nextTick","ElMessage","echarts","axios","selectedMerchantId","merchants","id","name","loading","dashboardData","salesChartRef","inventoryPieRef","customerSegmentPieRef","insightsDialogVisible","insightsDialogTitle","activeInsightTab","currentInsights","currentRecommendations","loadDashboardData","value","warning","response","get","data","renderSalesChart","renderInventoryPie","renderCustomerSegmentPie","error","console","chart","init","salesData","salesTrend","monthlySales","option","title","text","left","tooltip","trigger","formatter","params","toFixed","xAxis","type","Object","keys","axisLabel","rotate","yAxis","series","values","smooth","areaStyle","color","graphic","LinearGradient","offset","itemStyle","setOption","window","addEventListener","resize","statusCounts","inventoryAlerts","alertsByRisk","pieData","entries","map","key","getStatusText","length","status","legend","orient","radius","avoidLabelOverlap","borderRadius","borderColor","borderWidth","label","show","position","emphasis","fontSize","fontWeight","labelLine","segmentStats","customerBehavior","segment","stats","count","center","shadowBlur","shadowOffsetX","shadowColor","showInsights","formatText","insights","recommendations","inventoryHealthAssessment","formatInventoryRecommendations","replace","inventoryRecommendations","html","forEach","item","productName","currentStock","predictedSales","recommendedStock","restockAmount","getRecommendedRestock","productId","recommendation","find","r","getStatusTagType","statusMap","tableRowClassName","row","customerSegmentTableData","customerAnalytics","segmentCustomers","filter","c","customerSegment","avgTotalSpend","reduce","sum","totalSpend","avgFrequency","monthlyFrequency","percentage","topCustomers","sort","a","b","slice","getSummaries","param","columns","sums","column","index","Number","property","every","isNaN","prev","curr"],"sources":["E:/shixun/420/ecms/ecmsvue/src/views/DataAnalysisDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"data-analysis-dashboard\">\r\n    <!-- 头部标题 -->\r\n    <el-card class=\"mb-4\">\r\n      <div class=\"header\">\r\n        <h2>综合数据分析仪表板</h2>\r\n        <div class=\"controls\">\r\n          <el-select\r\n              v-model=\"selectedMerchantId\"\r\n              placeholder=\"选择商家\"\r\n              @change=\"loadDashboardData\"\r\n              style=\"width: 200px\"\r\n          >\r\n            <el-option\r\n                v-for=\"merchant in merchants\"\r\n                :key=\"merchant.id\"\r\n                :label=\"merchant.name\"\r\n                :value=\"merchant.id\"\r\n            />\r\n          </el-select>\r\n          <el-button\r\n              type=\"primary\"\r\n              @click=\"loadDashboardData\"\r\n              :loading=\"loading\"\r\n              :disabled=\"!selectedMerchantId\"\r\n          >\r\n            刷新数据\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n\r\n    <!-- 加载状态 -->\r\n    <div v-if=\"loading\" class=\"loading-mask\">\r\n      <el-loading :fullscreen=\"false\" />\r\n    </div>\r\n\r\n    <!-- 主要内容区域 -->\r\n    <div v-else-if=\"dashboardData\">\r\n      <!-- 关键指标卡片 -->\r\n      <el-row :gutter=\"20\" class=\"metrics-row\">\r\n        <el-col :span=\"6\">\r\n          <el-card shadow=\"hover\" class=\"metric-card\">\r\n            <el-statistic title=\"总销售额\" :value=\"dashboardData.salesTrend.totalSales\" prefix=\"￥\" :precision=\"2\" />\r\n          </el-card>\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-card shadow=\"hover\" class=\"metric-card\">\r\n            <el-statistic title=\"平均月销售额\" :value=\"dashboardData.salesTrend.avgMonthlySales\" prefix=\"￥\" :precision=\"2\" />\r\n          </el-card>\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-card shadow=\"hover\" class=\"metric-card urgent-card\">\r\n            <el-statistic title=\"紧急库存预警\" :value=\"dashboardData.inventoryAlerts.criticalCount\" suffix=\"个产品\" />\r\n          </el-card>\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-card shadow=\"hover\" class=\"metric-card\">\r\n            <el-statistic title=\"高价值客户贡献\" :value=\"dashboardData.customerBehavior.highValueContribution\" suffix=\"%\" :precision=\"1\" />\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <!-- 销售趋势分析 -->\r\n      <el-card class=\"mb-4\">\r\n        <template #header>\r\n          <div class=\"card-header\">\r\n            <span>销售趋势分析</span>\r\n            <el-button type=\"text\" @click=\"showInsights('sales')\">查看洞察</el-button>\r\n          </div>\r\n        </template>\r\n\r\n        <el-row :gutter=\"20\">\r\n          <el-col :span=\"16\">\r\n            <!-- 销售趋势图表 -->\r\n            <div ref=\"salesChartRef\" style=\"height: 400px;\"></div>\r\n          </el-col>\r\n          <el-col :span=\"8\">\r\n            <!-- 增长率表格 -->\r\n            <el-table\r\n                :data=\"dashboardData.salesTrend.growthRates\"\r\n                style=\"width: 100%\"\r\n                max-height=\"400\"\r\n            >\r\n              <el-table-column prop=\"month\" label=\"月份\" width=\"120\" />\r\n              <el-table-column prop=\"sales\" label=\"销售额\" width=\"120\">\r\n                <template #default=\"scope\">\r\n                  ￥{{ scope.row.sales.toFixed(2) }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"growthRate\" label=\"环比增长\">\r\n                <template #default=\"scope\">\r\n                  <el-tag\r\n                      :type=\"scope.row.growthRate > 0 ? 'success' : 'danger'\"\r\n                      effect=\"plain\"\r\n                  >\r\n                    {{ scope.row.growthRate }}%\r\n                  </el-tag>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </el-col>\r\n        </el-row>\r\n      </el-card>\r\n\r\n      <!-- 库存预警 -->\r\n      <el-card class=\"mb-4\">\r\n        <template #header>\r\n          <div class=\"card-header\">\r\n            <span>库存预警分析</span>\r\n            <el-button type=\"text\" @click=\"showInsights('inventory')\">查看评估</el-button>\r\n          </div>\r\n        </template>\r\n\r\n        <el-row :gutter=\"20\">\r\n          <el-col :span=\"8\">\r\n            <!-- 库存状态分布饼图 -->\r\n            <div ref=\"inventoryPieRef\" style=\"height: 300px;\"></div>\r\n          </el-col>\r\n          <el-col :span=\"16\">\r\n            <!-- 库存预警列表 -->\r\n            <el-table\r\n                :data=\"dashboardData.inventoryAlerts.stockoutPredictions\"\r\n                style=\"width: 100%\"\r\n                max-height=\"300\"\r\n                :row-class-name=\"tableRowClassName\"\r\n            >\r\n              <el-table-column prop=\"productName\" label=\"产品名称\" width=\"180\" />\r\n              <el-table-column prop=\"currentStock\" label=\"当前库存\" width=\"100\" />\r\n              <el-table-column prop=\"dailySalesRate\" label=\"日均销售\" width=\"100\">\r\n                <template #default=\"scope\">\r\n                  {{ scope.row.dailySalesRate.toFixed(2) }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"daysToStockout\" label=\"可维持天数\" width=\"120\" />\r\n              <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\r\n                <template #default=\"scope\">\r\n                  <el-tag\r\n                      :type=\"getStatusTagType(scope.row.status)\"\r\n                      effect=\"plain\"\r\n                  >\r\n                    {{ getStatusText(scope.row.status) }}\r\n                  </el-tag>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column label=\"建议补货量\">\r\n                <template #default=\"scope\">\r\n                  {{ getRecommendedRestock(scope.row.productId) }}\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </el-col>\r\n        </el-row>\r\n      </el-card>\r\n\r\n      <!-- 客户行为分析 -->\r\n      <el-card class=\"mb-4\">\r\n        <template #header>\r\n          <div class=\"card-header\">\r\n            <span>客户行为分析</span>\r\n            <el-button type=\"text\" @click=\"showInsights('customer')\">查看建议</el-button>\r\n          </div>\r\n        </template>\r\n\r\n        <el-row :gutter=\"20\">\r\n          <el-col :span=\"8\">\r\n            <!-- 客户细分饼图 -->\r\n            <div ref=\"customerSegmentPieRef\" style=\"height: 300px;\"></div>\r\n          </el-col>\r\n          <el-col :span=\"16\">\r\n            <!-- 客户细分统计表 -->\r\n            <el-table\r\n                :data=\"customerSegmentTableData\"\r\n                style=\"width: 100%\"\r\n                show-summary\r\n                :summary-method=\"getSummaries\"\r\n            >\r\n              <el-table-column prop=\"segment\" label=\"客户细分\" width=\"120\" />\r\n              <el-table-column prop=\"count\" label=\"客户数量\" width=\"100\" />\r\n              <el-table-column prop=\"percentage\" label=\"占比\" width=\"100\">\r\n                <template #default=\"scope\">\r\n                  {{ scope.row.percentage.toFixed(1) }}%\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"avgTotalSpend\" label=\"平均消费额\" width=\"120\">\r\n                <template #default=\"scope\">\r\n                  ￥{{ scope.row.avgTotalSpend.toFixed(2) }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"avgFrequency\" label=\"平均购买频率\">\r\n                <template #default=\"scope\">\r\n                  {{ scope.row.avgFrequency.toFixed(2) }} 次/月\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n\r\n            <!-- 高价值客户榜单 -->\r\n            <el-card class=\"mt-4\" shadow=\"never\">\r\n              <template #header>\r\n                <span>高价值客户榜单 TOP 10</span>\r\n              </template>\r\n              <el-table\r\n                  :data=\"topCustomers\"\r\n                  style=\"width: 100%\"\r\n                  size=\"small\"\r\n              >\r\n                <el-table-column type=\"index\" label=\"排名\" width=\"60\" />\r\n                <el-table-column prop=\"customerId\" label=\"客户ID\" width=\"100\" />\r\n                <el-table-column prop=\"totalSpend\" label=\"总消费额\" width=\"120\">\r\n                  <template #default=\"scope\">\r\n                    ￥{{ scope.row.totalSpend.toFixed(2) }}\r\n                  </template>\r\n                </el-table-column>\r\n                <el-table-column prop=\"orderCount\" label=\"订单数\" width=\"80\" />\r\n                <el-table-column prop=\"rfmScore\" label=\"RFM分数\">\r\n                  <template #default=\"scope\">\r\n                    <el-tag>{{ scope.row.rfmScore }}</el-tag>\r\n                  </template>\r\n                </el-table-column>\r\n              </el-table>\r\n            </el-card>\r\n          </el-col>\r\n        </el-row>\r\n      </el-card>\r\n    </div>\r\n\r\n    <!-- 洞察对话框 -->\r\n    <el-dialog\r\n        v-model=\"insightsDialogVisible\"\r\n        :title=\"insightsDialogTitle\"\r\n        width=\"60%\"\r\n        center\r\n    >\r\n      <div class=\"insights-content\">\r\n        <el-tabs v-model=\"activeInsightTab\">\r\n          <el-tab-pane label=\"洞察\" name=\"insights\">\r\n            <div class=\"text-content\" v-html=\"currentInsights\"></div>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"建议\" name=\"recommendations\">\r\n            <div class=\"text-content\" v-html=\"currentRecommendations\"></div>\r\n          </el-tab-pane>\r\n        </el-tabs>\r\n      </div>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"insightsDialogVisible = false\">关闭</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, nextTick } from 'vue';\r\nimport { ElMessage } from 'element-plus';\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\n// 数据状态\r\nconst selectedMerchantId = ref(null);\r\nconst merchants = ref([\r\n  { id: 1, name: '商家A' },\r\n  { id: 2, name: '商家B' },\r\n  { id: 3, name: '商家C' },\r\n  // 实际应用中应该从API获取商家列表\r\n]);\r\nconst loading = ref(false);\r\nconst dashboardData = ref(null);\r\n\r\n// 图表引用\r\nconst salesChartRef = ref(null);\r\nconst inventoryPieRef = ref(null);\r\nconst customerSegmentPieRef = ref(null);\r\n\r\n// 对话框状态\r\nconst insightsDialogVisible = ref(false);\r\nconst insightsDialogTitle = ref('');\r\nconst activeInsightTab = ref('insights');\r\nconst currentInsights = ref('');\r\nconst currentRecommendations = ref('');\r\n\r\n// 加载仪表板数据\r\nconst loadDashboardData = async () => {\r\n  if (!selectedMerchantId.value) {\r\n    ElMessage.warning('请先选择商家');\r\n    return;\r\n  }\r\n\r\n  loading.value = true;\r\n  try {\r\n    const response = await axios.get(`http://localhost:8080/api/data-analysis/dashboard/${selectedMerchantId.value}`);\r\n    dashboardData.value = response.data;\r\n\r\n    // 渲染图表\r\n    nextTick(() => {\r\n      renderSalesChart();\r\n      renderInventoryPie();\r\n      renderCustomerSegmentPie();\r\n    });\r\n  } catch (error) {\r\n    console.error('加载数据失败:', error);\r\n    ElMessage.error('加载数据失败，请稍后重试');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 渲染销售趋势图表\r\nconst renderSalesChart = () => {\r\n  if (!salesChartRef.value) return;\r\n\r\n  const chart = echarts.init(salesChartRef.value);\r\n  const salesData = dashboardData.value.salesTrend.monthlySales;\r\n\r\n  const option = {\r\n    title: {\r\n      text: '月度销售趋势',\r\n      left: 'center'\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      formatter: (params) => {\r\n        return `${params[0].name}<br/>销售额: ￥${params[0].value.toFixed(2)}`;\r\n      }\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      data: Object.keys(salesData),\r\n      axisLabel: {\r\n        rotate: 45\r\n      }\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n      axisLabel: {\r\n        formatter: '￥{value}'\r\n      }\r\n    },\r\n    series: [{\r\n      data: Object.values(salesData),\r\n      type: 'line',\r\n      smooth: true,\r\n      areaStyle: {\r\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n          { offset: 0, color: 'rgba(64, 158, 255, 0.3)' },\r\n          { offset: 1, color: 'rgba(64, 158, 255, 0.1)' }\r\n        ])\r\n      },\r\n      itemStyle: {\r\n        color: '#409EFF'\r\n      }\r\n    }]\r\n  };\r\n\r\n  chart.setOption(option);\r\n\r\n  // 监听窗口大小变化\r\n  window.addEventListener('resize', () => {\r\n    chart.resize();\r\n  });\r\n};\r\n\r\n// 渲染库存状态饼图\r\nconst renderInventoryPie = () => {\r\n  if (!inventoryPieRef.value) return;\r\n\r\n  const chart = echarts.init(inventoryPieRef.value);\r\n  const statusCounts = dashboardData.value.inventoryAlerts.alertsByRisk;\r\n\r\n  const pieData = Object.entries(statusCounts).map(([key, value]) => ({\r\n    name: getStatusText(key),\r\n    value: value.length,\r\n    status: key\r\n  }));\r\n\r\n  const option = {\r\n    title: {\r\n      text: '库存状态分布',\r\n      left: 'center'\r\n    },\r\n    tooltip: {\r\n      trigger: 'item',\r\n      formatter: '{b}: {c} ({d}%)'\r\n    },\r\n    legend: {\r\n      orient: 'vertical',\r\n      left: 'left'\r\n    },\r\n    series: [{\r\n      type: 'pie',\r\n      radius: ['40%', '70%'],\r\n      avoidLabelOverlap: false,\r\n      itemStyle: {\r\n        borderRadius: 10,\r\n        borderColor: '#fff',\r\n        borderWidth: 2\r\n      },\r\n      label: {\r\n        show: false,\r\n        position: 'center'\r\n      },\r\n      emphasis: {\r\n        label: {\r\n          show: true,\r\n          fontSize: '20',\r\n          fontWeight: 'bold'\r\n        }\r\n      },\r\n      labelLine: {\r\n        show: false\r\n      },\r\n      data: pieData,\r\n      color: ['#F56C6C', '#E6A23C', '#409EFF', '#67C23A', '#909399']\r\n    }]\r\n  };\r\n\r\n  chart.setOption(option);\r\n  window.addEventListener('resize', () => {\r\n    chart.resize();\r\n  });\r\n};\r\n\r\n// 渲染客户细分饼图\r\nconst renderCustomerSegmentPie = () => {\r\n  if (!customerSegmentPieRef.value) return;\r\n\r\n  const chart = echarts.init(customerSegmentPieRef.value);\r\n  const segmentStats = dashboardData.value.customerBehavior.segmentStats;\r\n\r\n  const pieData = Object.entries(segmentStats).map(([segment, stats]) => ({\r\n    name: segment,\r\n    value: stats.count\r\n  }));\r\n\r\n  const option = {\r\n    title: {\r\n      text: '客户细分分布',\r\n      left: 'center'\r\n    },\r\n    tooltip: {\r\n      trigger: 'item',\r\n      formatter: '{b}: {c} ({d}%)'\r\n    },\r\n    legend: {\r\n      orient: 'vertical',\r\n      left: 'left'\r\n    },\r\n    series: [{\r\n      type: 'pie',\r\n      radius: '65%',\r\n      center: ['50%', '55%'],\r\n      data: pieData,\r\n      emphasis: {\r\n        itemStyle: {\r\n          shadowBlur: 10,\r\n          shadowOffsetX: 0,\r\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n        }\r\n      },\r\n      color: ['#5470C6', '#91CC75', '#FAC858', '#EE6666']\r\n    }]\r\n  };\r\n\r\n  chart.setOption(option);\r\n  window.addEventListener('resize', () => {\r\n    chart.resize();\r\n  });\r\n};\r\n\r\n// 显示洞察对话框\r\nconst showInsights = (type) => {\r\n  activeInsightTab.value = 'insights';\r\n\r\n  if (type === 'sales') {\r\n    insightsDialogTitle.value = '销售趋势分析洞察';\r\n    currentInsights.value = formatText(dashboardData.value.salesTrend.insights);\r\n    currentRecommendations.value = formatText(dashboardData.value.salesTrend.recommendations);\r\n  } else if (type === 'inventory') {\r\n    insightsDialogTitle.value = '库存状况评估';\r\n    currentInsights.value = formatText(dashboardData.value.inventoryAlerts.inventoryHealthAssessment);\r\n    currentRecommendations.value = formatInventoryRecommendations();\r\n  } else if (type === 'customer') {\r\n    insightsDialogTitle.value = '客户行为分析';\r\n    currentInsights.value = formatText(dashboardData.value.customerBehavior.insights);\r\n    currentRecommendations.value = formatText(dashboardData.value.customerBehavior.recommendations);\r\n  }\r\n\r\n  insightsDialogVisible.value = true;\r\n};\r\n\r\n// 格式化文本，将换行符转换为HTML\r\nconst formatText = (text) => {\r\n  return text.replace(/\\n/g, '<br>');\r\n};\r\n\r\n// 格式化库存建议\r\nconst formatInventoryRecommendations = () => {\r\n  const recommendations = dashboardData.value.inventoryAlerts.inventoryRecommendations;\r\n  if (!recommendations.length) return '暂无补货建议';\r\n\r\n  let html = '<h4>库存补货建议：</h4><ul>';\r\n  recommendations.forEach(item => {\r\n    html += `<li>${item.productName}:\r\n      当前库存 ${item.currentStock},\r\n      预测销量 ${item.predictedSales},\r\n      建议库存 ${item.recommendedStock},\r\n      需补货 ${item.restockAmount}</li>`;\r\n  });\r\n  html += '</ul>';\r\n  return html;\r\n};\r\n\r\n// 获取建议补货量\r\nconst getRecommendedRestock = (productId) => {\r\n  const recommendation = dashboardData.value.inventoryAlerts.inventoryRecommendations\r\n      .find(r => r.productId === productId);\r\n  return recommendation ? recommendation.restockAmount : '-';\r\n};\r\n\r\n// 获取状态标签类型\r\nconst getStatusTagType = (status) => {\r\n  const statusMap = {\r\n    'CRITICAL': 'danger',\r\n    'WARNING': 'warning',\r\n    'ATTENTION': 'info',\r\n    'HEALTHY': 'success',\r\n    'STABLE': ''\r\n  };\r\n  return statusMap[status] || '';\r\n};\r\n\r\n// 获取状态文本\r\nconst getStatusText = (status) => {\r\n  const statusMap = {\r\n    'CRITICAL': '紧急',\r\n    'WARNING': '警告',\r\n    'ATTENTION': '注意',\r\n    'HEALTHY': '充足',\r\n    'STABLE': '稳定'\r\n  };\r\n  return statusMap[status] || status;\r\n};\r\n\r\n// 表格行样式\r\nconst tableRowClassName = ({ row }) => {\r\n  if (row.status === 'CRITICAL') return 'critical-row';\r\n  if (row.status === 'WARNING') return 'warning-row';\r\n  return '';\r\n};\r\n\r\n// 计算客户细分表格数据\r\nconst customerSegmentTableData = computed(() => {\r\n  if (!dashboardData.value) return [];\r\n\r\n  const segmentStats = dashboardData.value.customerBehavior.segmentStats;\r\n  const customerAnalytics = dashboardData.value.customerBehavior.customerAnalytics;\r\n\r\n  return Object.entries(segmentStats).map(([segment, stats]) => {\r\n    const segmentCustomers = customerAnalytics.filter(c => c.customerSegment === segment);\r\n    const avgTotalSpend = segmentCustomers.reduce((sum, c) => sum + c.totalSpend, 0) / segmentCustomers.length || 0;\r\n    const avgFrequency = segmentCustomers.reduce((sum, c) => sum + c.monthlyFrequency, 0) / segmentCustomers.length || 0;\r\n\r\n    return {\r\n      segment,\r\n      count: stats.count,\r\n      percentage: stats.percentage,\r\n      avgTotalSpend,\r\n      avgFrequency\r\n    };\r\n  });\r\n});\r\n\r\n// 获取高价值客户TOP10\r\nconst topCustomers = computed(() => {\r\n  if (!dashboardData.value) return [];\r\n\r\n  return dashboardData.value.customerBehavior.customerAnalytics\r\n      .filter(c => c.customerSegment === '高价值客户')\r\n      .sort((a, b) => b.totalSpend - a.totalSpend)\r\n      .slice(0, 10);\r\n});\r\n\r\n// 表格合计方法\r\nconst getSummaries = (param) => {\r\n  const { columns, data } = param;\r\n  const sums = [];\r\n\r\n  columns.forEach((column, index) => {\r\n    if (index === 0) {\r\n      sums[index] = '总计';\r\n      return;\r\n    }\r\n\r\n    const values = data.map(item => Number(item[column.property]));\r\n    if (!values.every(value => isNaN(value))) {\r\n      sums[index] = values.reduce((prev, curr) => {\r\n        const value = Number(curr);\r\n        if (!isNaN(value)) {\r\n          return prev + curr;\r\n        } else {\r\n          return prev;\r\n        }\r\n      }, 0);\r\n\r\n      if (column.property === 'percentage') {\r\n        sums[index] = sums[index].toFixed(1) + '%';\r\n      } else if (column.property === 'avgTotalSpend') {\r\n        sums[index] = '￥' + sums[index].toFixed(2);\r\n      } else if (column.property === 'avgFrequency') {\r\n        sums[index] = sums[index].toFixed(2) + ' 次/月';\r\n      }\r\n    } else {\r\n      sums[index] = '-';\r\n    }\r\n  });\r\n\r\n  return sums;\r\n};\r\n\r\n// 组件挂载时初始化\r\nonMounted(() => {\r\n  // 如果有默认商家ID，自动加载数据\r\n  if (selectedMerchantId.value) {\r\n    loadDashboardData();\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.data-analysis-dashboard {\r\n  padding: 20px;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.controls {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.loading-mask {\r\n  position: relative;\r\n  height: 60vh;\r\n}\r\n\r\n.metrics-row {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.metric-card {\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.metric-card:hover {\r\n  transform: translateY(-5px);\r\n}\r\n\r\n.urgent-card {\r\n  border-left: 5px solid #F56C6C;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.mb-4 {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.mt-4 {\r\n  margin-top: 20px;\r\n}\r\n\r\n.text-content {\r\n  line-height: 1.6;\r\n  white-space: pre-line;\r\n}\r\n\r\n:deep(.critical-row) {\r\n  background-color: #fef0f0;\r\n}\r\n\r\n:deep(.warning-row) {\r\n  background-color: #fdf6ec;\r\n}\r\n\r\n.insights-content {\r\n  max-height: 60vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n:deep(.el-statistic__head) {\r\n  font-size: 14px;\r\n  color: #909399;\r\n}\r\n\r\n:deep(.el-statistic__content) {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n}\r\n\r\n:deep(.el-table .cell) {\r\n  padding: 0 8px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}