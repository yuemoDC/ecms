{"ast":null,"code":"import axios from 'axios';\n\n// 创建 Axios 实例\nconst instance = axios.create({\n  baseURL: 'http://localhost:8080',\n  // API 基础地址\n  timeout: 5000,\n  // 请求超时时间设为 5000 毫秒\n  headers: {\n    'Content-Type': 'application/json' // 设置请求的默认 Content-Type 为 JSON\n  }\n});\n\n// 请求拦截器\ninstance.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  const token = localStorage.getItem('token'); // 从本地存储中获取 token\n  if (token) {\n    // 如果 token 存在，将其添加到请求头的 Authorization 字段中\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config; // 返回修改后的请求配置\n}, error => {\n  // 对请求错误做些什么\n  return Promise.reject(error); // 返回一个拒绝的 Promise，表示请求出错\n});\n\n// 响应拦截器\ninstance.interceptors.response.use(response => response,\n// 直接返回响应数据\nerror => {\n  // 对响应错误做些什么\n  if (error.response) {\n    // 如果有响应\n    // 根据状态码处理不同的错误\n    switch (error.response.status) {\n      case 401:\n        // 未授权，清除 token 并跳转到登录页面\n        localStorage.removeItem('token'); // 清除 token\n        window.location.href = '/login'; // 跳转到登录页面\n        break;\n      default:\n        // 处理其他错误\n        console.error('API请求错误:', error);\n      // 打印错误信息\n    }\n  }\n  return Promise.reject(error); // 返回一个拒绝的 Promise，表示响应出错\n});\nexport default instance; // 导出 Axios 实例，供全局使用","map":{"version":3,"names":["axios","instance","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","console"],"sources":["E:/软件工程实训/ecmsV1.2/ecmsvue/src/utils/axios.js"],"sourcesContent":["import axios from 'axios';\n\n// 创建 Axios 实例\nconst instance = axios.create({\n    baseURL: 'http://localhost:8080', // API 基础地址\n    timeout: 5000, // 请求超时时间设为 5000 毫秒\n    headers: {\n        'Content-Type': 'application/json' // 设置请求的默认 Content-Type 为 JSON\n    }\n});\n\n// 请求拦截器\ninstance.interceptors.request.use(\n    config => {\n        // 在发送请求之前做些什么\n        const token = localStorage.getItem('token'); // 从本地存储中获取 token\n        if (token) {\n            // 如果 token 存在，将其添加到请求头的 Authorization 字段中\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config; // 返回修改后的请求配置\n    },\n    error => {\n        // 对请求错误做些什么\n        return Promise.reject(error); // 返回一个拒绝的 Promise，表示请求出错\n    }\n);\n\n// 响应拦截器\ninstance.interceptors.response.use(\n    response => response, // 直接返回响应数据\n    error => {\n        // 对响应错误做些什么\n        if (error.response) { // 如果有响应\n            // 根据状态码处理不同的错误\n            switch (error.response.status) {\n                case 401:\n                    // 未授权，清除 token 并跳转到登录页面\n                    localStorage.removeItem('token'); // 清除 token\n                    window.location.href = '/login'; // 跳转到登录页面\n                    break;\n                default:\n                    // 处理其他错误\n                    console.error('API请求错误:', error); // 打印错误信息\n            }\n        }\n        return Promise.reject(error); // 返回一个拒绝的 Promise，表示响应出错\n    }\n);\n\nexport default instance; // 导出 Axios 实例，供全局使用"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC1BC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,IAAI;EAAE;EACfC,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB,CAAC;EACvC;AACJ,CAAC,CAAC;;AAEF;AACAJ,QAAQ,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACP;IACAD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM,CAAC,CAAC;AACnB,CAAC,EACDK,KAAK,IAAI;EACL;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAClC,CACJ,CAAC;;AAED;AACAb,QAAQ,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC9BS,QAAQ,IAAIA,QAAQ;AAAE;AACtBH,KAAK,IAAI;EACL;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAAE;IAClB;IACA,QAAQH,KAAK,CAACG,QAAQ,CAACC,MAAM;MACzB,KAAK,GAAG;QACJ;QACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAClCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;QACjC;MACJ;QACI;QACAC,OAAO,CAACT,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAAE;IAC1C;EACJ;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAClC,CACJ,CAAC;AAED,eAAeb,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}