{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport AppNavbar from \"@/components/Navbar.vue\";\nexport default {\n  name: 'OrderManagement',\n  components: {\n    AppNavbar\n  },\n  data() {\n    return {\n      orders: [],\n      searchKeyword: '',\n      // 新增搜索关键词\n      orderForm: {\n        orderNumber: '',\n        totalAmount: 0,\n        orderStatus: 'pending',\n        merchantId: null,\n        customerId: null\n      },\n      selectedOrder: null,\n      dialogVisible: false\n    };\n  },\n  methods: {\n    getStatusTagType(status) {\n      const map = {\n        pending: 'warning',\n        shipped: 'primary',\n        completed: 'success',\n        refunded: 'danger'\n      };\n      return map[status] || '';\n    },\n    getStatusText(status) {\n      const map = {\n        pending: '待处理',\n        shipped: '已发货',\n        completed: '已完成',\n        refunded: '已退款'\n      };\n      return map[status] || status;\n    },\n    fetchOrders() {\n      axios.get('http://localhost:8080/api/orders').then(response => {\n        this.orders = response.data;\n      }).catch(error => {\n        ElMessage.error('获取订单列表失败: ' + error.message);\n        console.error('获取订单时出错:', error);\n      });\n    },\n    fetchOrdersByKeyword() {\n      const url = this.searchKeyword ? `http://localhost:8080/api/orders/search?keyword=${this.searchKeyword}` : 'http://localhost:8080/api/orders';\n      axios.get(url).then(response => {\n        this.orders = response.data;\n      }).catch(error => {\n        ElMessage.error('获取订单列表失败: ' + error.message);\n        console.error('获取订单时出错:', error);\n      });\n    },\n    showOrderForm() {\n      this.selectedOrder = null;\n      this.orderForm = {\n        orderNumber: '',\n        totalAmount: 0,\n        orderStatus: 'pending',\n        merchantId: null,\n        customerId: null\n      };\n      this.dialogVisible = true;\n    },\n    editOrder(order) {\n      this.selectedOrder = order;\n      this.orderForm = {\n        orderNumber: order.orderNumber,\n        totalAmount: order.totalAmount,\n        orderStatus: order.orderStatus,\n        merchantId: order.merchantId,\n        customerId: order.customerId\n      };\n      this.dialogVisible = true;\n    },\n    clearForm() {\n      this.selectedOrder = null;\n      this.orderForm = {\n        orderNumber: '',\n        totalAmount: 0,\n        orderStatus: 'pending',\n        merchantId: null,\n        customerId: null\n      };\n    },\n    saveOrder() {\n      const url = this.selectedOrder ? `http://localhost:8080/api/orders/${this.selectedOrder.orderId}` : 'http://localhost:8080/api/orders';\n      const method = this.selectedOrder ? 'put' : 'post';\n      const orderData = {\n        merchantId: this.orderForm.merchantId,\n        customerId: this.orderForm.customerId,\n        orderNumber: this.orderForm.orderNumber,\n        totalAmount: this.orderForm.totalAmount,\n        orderStatus: this.orderForm.orderStatus\n      };\n      axios[method](url, orderData).then(() => {\n        ElMessage.success(this.selectedOrder ? '订单更新成功' : '订单添加成功');\n        this.fetchOrders();\n        this.dialogVisible = false;\n      }).catch(error => {\n        ElMessage.error('操作失败: ' + error.message);\n        console.error('保存订单时出错:', error);\n      });\n    },\n    confirmDelete(orderId) {\n      ElMessageBox.confirm('确定要删除这个订单吗？此操作不可撤销。', '警告', {\n        confirmButtonText: '确认删除',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.deleteOrder(orderId);\n      }).catch(() => {\n        ElMessage.info('已取消删除');\n      });\n    },\n    deleteOrder(orderId) {\n      axios.delete(`http://localhost:8080/api/orders/${orderId}`).then(() => {\n        ElMessage.success('订单删除成功');\n        this.fetchOrders();\n      }).catch(error => {\n        ElMessage.error('删除失败: ' + error.message);\n        console.error('删除订单时出错:', error);\n      });\n    }\n  },\n  mounted() {\n    this.fetchOrders(); // 初始加载所有订单\n  }\n};","map":{"version":3,"names":["axios","ElMessage","ElMessageBox","AppNavbar","name","components","data","orders","searchKeyword","orderForm","orderNumber","totalAmount","orderStatus","merchantId","customerId","selectedOrder","dialogVisible","methods","getStatusTagType","status","map","pending","shipped","completed","refunded","getStatusText","fetchOrders","get","then","response","catch","error","message","console","fetchOrdersByKeyword","url","showOrderForm","editOrder","order","clearForm","saveOrder","orderId","method","orderData","success","confirmDelete","confirm","confirmButtonText","cancelButtonText","type","deleteOrder","info","delete","mounted"],"sources":["D:\\code_new\\ecms\\ecmsvue\\src\\views\\Orders.vue"],"sourcesContent":["<template>\n  <div>\n    <AppNavbar />\n    <h1>订单管理</h1>\n    <el-input\n        v-model=\"searchKeyword\"\n        placeholder=\"请输入订单编号进行搜索\"\n        style=\"width: 300px; margin-bottom: 20px;\"\n        @input=\"fetchOrdersByKeyword\"\n    />\n    <el-button type=\"primary\" @click=\"showOrderForm\" style=\"margin-bottom: 20px;\">添加订单</el-button>\n\n    <!-- 订单表格 -->\n    <el-table :data=\"orders\" style=\"width: 100%;\">\n      <el-table-column prop=\"orderNumber\" label=\"订单编号\" />\n      <el-table-column prop=\"totalAmount\" label=\"总金额\">\n        <template #default=\"scope\">\n          ¥{{ scope.row.totalAmount.toFixed(2) }}\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"orderStatus\" label=\"状态\">\n        <template #default=\"scope\">\n          <el-tag :type=\"getStatusTagType(scope.row.orderStatus)\">\n            {{ getStatusText(scope.row.orderStatus) }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\">\n        <template #default=\"scope\">\n          <el-button size=\"small\" @click=\"editOrder(scope.row)\">编辑</el-button>\n          <el-button size=\"small\" type=\"danger\" @click=\"confirmDelete(scope.row.orderId)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 订单表单对话框 -->\n    <el-dialog\n        v-model=\"dialogVisible\"\n        :title=\"selectedOrder ? '编辑订单' : '添加订单'\"\n        width=\"50%\"\n        @close=\"clearForm\"\n    >\n      <el-form :model=\"orderForm\" label-width=\"120px\" size=\"medium\">\n        <el-form-item label=\"订单编号\" prop=\"orderNumber\">\n          <el-input v-model=\"orderForm.orderNumber\" placeholder=\"请输入订单编号\" />\n        </el-form-item>\n        <el-form-item label=\"总金额\" prop=\"totalAmount\">\n          <el-input-number v-model=\"orderForm.totalAmount\" :min=\"0\" :precision=\"2\" />\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"orderStatus\">\n          <el-select v-model=\"orderForm.orderStatus\" placeholder=\"选择状态\">\n            <el-option label=\"待处理\" value=\"pending\" />\n            <el-option label=\"已发货\" value=\"shipped\" />\n            <el-option label=\"已完成\" value=\"completed\" />\n            <el-option label=\"已退款\" value=\"refunded\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"商家ID\" prop=\"merchantId\">\n          <el-input-number v-model=\"orderForm.merchantId\" :min=\"1\" disabled v-if=\"selectedOrder\" />\n          <el-input-number v-model=\"orderForm.merchantId\" :min=\"1\" v-else />\n        </el-form-item>\n        <el-form-item label=\"顾客ID\" prop=\"customerId\">\n          <el-input-number v-model=\"orderForm.customerId\" :min=\"1\" disabled v-if=\"selectedOrder\" />\n          <el-input-number v-model=\"orderForm.customerId\" :min=\"1\" v-else />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"saveOrder\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport AppNavbar from \"@/components/Navbar.vue\";\n\nexport default {\n  name: 'OrderManagement',\n  components: {AppNavbar},\n  data() {\n    return {\n      orders: [],\n      searchKeyword: '', // 新增搜索关键词\n      orderForm: {\n        orderNumber: '',\n        totalAmount: 0,\n        orderStatus: 'pending',\n        merchantId: null,\n        customerId: null\n      },\n      selectedOrder: null,\n      dialogVisible: false\n    };\n  },\n  methods: {\n    getStatusTagType(status) {\n      const map = {\n        pending: 'warning',\n        shipped: 'primary',\n        completed: 'success',\n        refunded: 'danger'\n      };\n      return map[status] || '';\n    },\n    getStatusText(status) {\n      const map = {\n        pending: '待处理',\n        shipped: '已发货',\n        completed: '已完成',\n        refunded: '已退款'\n      };\n      return map[status] || status;\n    },\n    fetchOrders() {\n      axios.get('http://localhost:8080/api/orders')\n          .then(response => {\n            this.orders = response.data;\n          })\n          .catch(error => {\n            ElMessage.error('获取订单列表失败: ' + error.message);\n            console.error('获取订单时出错:', error);\n          });\n    },\n    fetchOrdersByKeyword() {\n      const url = this.searchKeyword\n          ? `http://localhost:8080/api/orders/search?keyword=${this.searchKeyword}`\n          : 'http://localhost:8080/api/orders';\n\n      axios.get(url)\n          .then(response => {\n            this.orders = response.data;\n          })\n          .catch(error => {\n            ElMessage.error('获取订单列表失败: ' + error.message);\n            console.error('获取订单时出错:', error);\n          });\n    },\n    showOrderForm() {\n      this.selectedOrder = null;\n      this.orderForm = {\n        orderNumber: '',\n        totalAmount: 0,\n        orderStatus: 'pending',\n        merchantId: null,\n        customerId: null\n      };\n      this.dialogVisible = true;\n    },\n    editOrder(order) {\n      this.selectedOrder = order;\n      this.orderForm = {\n        orderNumber: order.orderNumber,\n        totalAmount: order.totalAmount,\n        orderStatus: order.orderStatus,\n        merchantId: order.merchantId,\n        customerId: order.customerId\n      };\n      this.dialogVisible = true;\n    },\n    clearForm() {\n      this.selectedOrder = null;\n      this.orderForm = {\n        orderNumber: '',\n        totalAmount: 0,\n        orderStatus: 'pending',\n        merchantId: null,\n        customerId: null\n      };\n    },\n    saveOrder() {\n      const url = this.selectedOrder\n          ? `http://localhost:8080/api/orders/${this.selectedOrder.orderId}`\n          : 'http://localhost:8080/api/orders';\n\n      const method = this.selectedOrder ? 'put' : 'post';\n\n      const orderData = {\n        merchantId: this.orderForm.merchantId,\n        customerId: this.orderForm.customerId,\n        orderNumber: this.orderForm.orderNumber,\n        totalAmount: this.orderForm.totalAmount,\n        orderStatus: this.orderForm.orderStatus\n      };\n\n      axios[method](url, orderData)\n          .then(() => {\n            ElMessage.success(this.selectedOrder ? '订单更新成功' : '订单添加成功');\n            this.fetchOrders();\n            this.dialogVisible = false;\n          })\n          .catch(error => {\n            ElMessage.error('操作失败: ' + error.message);\n            console.error('保存订单时出错:', error);\n          });\n    },\n    confirmDelete(orderId) {\n      ElMessageBox.confirm(\n          '确定要删除这个订单吗？此操作不可撤销。',\n          '警告',\n          {\n            confirmButtonText: '确认删除',\n            cancelButtonText: '取消',\n            type: 'warning',\n          }\n      )\n          .then(() => {\n            this.deleteOrder(orderId);\n          })\n          .catch(() => {\n            ElMessage.info('已取消删除');\n          });\n    },\n    deleteOrder(orderId) {\n      axios.delete(`http://localhost:8080/api/orders/${orderId}`)\n          .then(() => {\n            ElMessage.success('订单删除成功');\n            this.fetchOrders();\n          })\n          .catch(error => {\n            ElMessage.error('删除失败: ' + error.message);\n            console.error('删除订单时出错:', error);\n          });\n    }\n  },\n  mounted() {\n    this.fetchOrders(); // 初始加载所有订单\n  }\n};\n</script>\n\n<style scoped>\n.el-table {\n  width: 100%;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}