{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, computed, onMounted, onUnmounted, nextTick } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  __name: 'CustomerBehavior',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedMerchantId = ref(null);\n    const loading = ref(false);\n    const analysisData = ref(null);\n    const selectedSegment = ref('');\n    const merchantLoading = ref(false);\n\n    // 初始化空的商家列表\n    const merchants = ref([]);\n    const segmentPieRef = ref(null);\n    let segmentPieChart = null;\n\n    // 搜索商家方法\n    const searchMerchant = async query => {\n      if (query !== '') {\n        merchantLoading.value = true;\n        try {\n          // 调用后端API搜索商家\n          const response = await axios.get(`http://localhost:8080/api/merchants/search`, {\n            params: {\n              keyword: query\n            }\n          });\n          merchants.value = response.data;\n        } catch (error) {\n          console.error('搜索商家失败:', error);\n          ElMessage.error('搜索商家失败');\n        } finally {\n          merchantLoading.value = false;\n        }\n      } else {\n        // 如果没有输入查询词，则获取所有商家或者清空列表\n        loadAllMerchants();\n      }\n    };\n\n    // 加载所有商家\n    const loadAllMerchants = async () => {\n      merchantLoading.value = true;\n      try {\n        const response = await axios.get('http://localhost:8080/api/merchants');\n        merchants.value = response.data;\n      } catch (error) {\n        console.error('获取商家列表失败:', error);\n        ElMessage.error('获取商家列表失败');\n      } finally {\n        merchantLoading.value = false;\n      }\n    };\n\n    // 加载数据\n    const loadData = async () => {\n      if (!selectedMerchantId.value) {\n        ElMessage.warning('请选择商家');\n        return;\n      }\n      loading.value = true;\n      try {\n        const response = await axios.get(`http://localhost:8080/api/data-analysis/customer-behavior/${selectedMerchantId.value}`);\n        analysisData.value = response.data;\n        nextTick(() => {\n          renderSegmentPie();\n        });\n      } catch (error) {\n        ElMessage.error('加载数据失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 渲染客户细分饼图\n    const renderSegmentPie = () => {\n      if (!segmentPieRef.value) return;\n      if (segmentPieChart) {\n        segmentPieChart.dispose();\n      }\n      segmentPieChart = echarts.init(segmentPieRef.value);\n      const data = Object.entries(analysisData.value.segmentStats).map(([segment, stats]) => ({\n        name: segment,\n        value: stats.count\n      }));\n      const option = {\n        tooltip: {\n          trigger: 'item',\n          formatter: '{b}: {c} ({d}%)'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left'\n        },\n        series: [{\n          type: 'pie',\n          radius: '65%',\n          center: ['50%', '50%'],\n          data: data,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }]\n      };\n      segmentPieChart.setOption(option);\n    };\n\n    // 计算属性\n    const avgTotalSpend = computed(() => {\n      if (!analysisData.value?.customerAnalytics) return 0;\n      const analytics = analysisData.value.customerAnalytics;\n      return analytics.reduce((sum, c) => sum + c.totalSpend, 0) / analytics.length;\n    });\n    const avgFrequency = computed(() => {\n      if (!analysisData.value?.customerAnalytics) return 0;\n      const analytics = analysisData.value.customerAnalytics;\n      return analytics.reduce((sum, c) => sum + c.monthlyFrequency, 0) / analytics.length;\n    });\n    const segmentTableData = computed(() => {\n      if (!analysisData.value) return [];\n      return Object.entries(analysisData.value.segmentStats).map(([segment, stats]) => {\n        const segmentCustomers = analysisData.value.customerAnalytics.filter(c => c.customerSegment === segment);\n        const avgTotalSpend = segmentCustomers.reduce((sum, c) => sum + c.totalSpend, 0) / segmentCustomers.length || 0;\n        const avgFrequency = segmentCustomers.reduce((sum, c) => sum + c.monthlyFrequency, 0) / segmentCustomers.length || 0;\n        return {\n          segment,\n          count: stats.count,\n          percentage: stats.percentage,\n          avgTotalSpend,\n          avgFrequency\n        };\n      });\n    });\n    const topCustomers = computed(() => {\n      if (!analysisData.value) return [];\n      return analysisData.value.customerAnalytics.filter(c => c.customerSegment === '高价值客户').sort((a, b) => b.totalSpend - a.totalSpend).slice(0, 10);\n    });\n    const segments = computed(() => {\n      if (!analysisData.value) return [];\n      return Object.keys(analysisData.value.segmentStats);\n    });\n    const filteredCustomers = computed(() => {\n      if (!analysisData.value?.customerAnalytics) return [];\n      let customers = analysisData.value.customerAnalytics;\n      if (selectedSegment.value) {\n        customers = customers.filter(c => c.customerSegment === selectedSegment.value);\n      }\n      return customers;\n    });\n\n    // 方法\n    const getSegmentType = segment => {\n      const map = {\n        '高价值客户': 'success',\n        '忠诚客户': 'primary',\n        '潜力客户': 'warning',\n        '休眠客户': 'danger'\n      };\n      return map[segment] || '';\n    };\n    const formatDate = date => {\n      if (!date) return '-';\n      return new Date(date).toLocaleString();\n    };\n    const formatText = text => {\n      return text?.replace(/\\n/g, '<br>') || '';\n    };\n    const getSummaries = param => {\n      const {\n        columns,\n        data\n      } = param;\n      const sums = [];\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = '总计';\n          return;\n        }\n        const values = data.map(item => Number(item[column.property]));\n        if (!values.every(value => isNaN(value))) {\n          sums[index] = values.reduce((prev, curr) => {\n            const value = Number(curr);\n            if (!isNaN(value)) {\n              return prev + curr;\n            } else {\n              return prev;\n            }\n          }, 0);\n          if (column.property === 'percentage') {\n            sums[index] = sums[index].toFixed(1) + '%';\n          } else if (column.property === 'avgTotalSpend') {\n            sums[index] = '￥' + sums[index].toFixed(2);\n          } else if (column.property === 'avgFrequency') {\n            sums[index] = sums[index].toFixed(2) + ' 次/月';\n          }\n        } else {\n          sums[index] = '-';\n        }\n      });\n      return sums;\n    };\n    const exportReport = () => {\n      if (!analysisData.value) {\n        ElMessage.warning('暂无数据可导出');\n        return;\n      }\n\n      // 准备导出数据\n      const exportData = {\n        merchantId: selectedMerchantId.value,\n        exportDate: new Date().toLocaleString(),\n        summary: {\n          totalCustomers: analysisData.value.totalCustomers,\n          highValueContribution: analysisData.value.highValueContribution,\n          avgTotalSpend: avgTotalSpend.value,\n          avgFrequency: avgFrequency.value\n        },\n        segmentStats: analysisData.value.segmentStats,\n        customerAnalytics: analysisData.value.customerAnalytics,\n        insights: analysisData.value.insights,\n        recommendations: analysisData.value.recommendations\n      };\n\n      // 创建下载链接\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n        type: 'application/json'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `客户行为分析报告_${selectedMerchantId.value}_${new Date().toISOString().split('T')[0]}.json`;\n      link.click();\n      window.URL.revokeObjectURL(url);\n      ElMessage.success('报告导出成功');\n    };\n    onMounted(() => {\n      // 组件挂载时加载商家列表\n      loadAllMerchants();\n      if (selectedMerchantId.value) {\n        loadData();\n      }\n    });\n\n    // 组件卸载时清理\n    onUnmounted(() => {\n      if (segmentPieChart) {\n        segmentPieChart.dispose();\n      }\n    });\n    const __returned__ = {\n      selectedMerchantId,\n      loading,\n      analysisData,\n      selectedSegment,\n      merchantLoading,\n      merchants,\n      segmentPieRef,\n      get segmentPieChart() {\n        return segmentPieChart;\n      },\n      set segmentPieChart(v) {\n        segmentPieChart = v;\n      },\n      searchMerchant,\n      loadAllMerchants,\n      loadData,\n      renderSegmentPie,\n      avgTotalSpend,\n      avgFrequency,\n      segmentTableData,\n      topCustomers,\n      segments,\n      filteredCustomers,\n      getSegmentType,\n      formatDate,\n      formatText,\n      getSummaries,\n      exportReport,\n      ref,\n      computed,\n      onMounted,\n      onUnmounted,\n      nextTick,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get echarts() {\n        return echarts;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onUnmounted","nextTick","ElMessage","echarts","axios","selectedMerchantId","loading","analysisData","selectedSegment","merchantLoading","merchants","segmentPieRef","segmentPieChart","searchMerchant","query","value","response","get","params","keyword","data","error","console","loadAllMerchants","loadData","warning","renderSegmentPie","dispose","init","Object","entries","segmentStats","map","segment","stats","name","count","option","tooltip","trigger","formatter","legend","orient","left","series","type","radius","center","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","setOption","avgTotalSpend","customerAnalytics","analytics","reduce","sum","c","totalSpend","length","avgFrequency","monthlyFrequency","segmentTableData","segmentCustomers","filter","customerSegment","percentage","topCustomers","sort","a","b","slice","segments","keys","filteredCustomers","customers","getSegmentType","formatDate","date","Date","toLocaleString","formatText","text","replace","getSummaries","param","columns","sums","forEach","column","index","values","item","Number","property","every","isNaN","prev","curr","toFixed","exportReport","exportData","merchantId","exportDate","summary","totalCustomers","highValueContribution","insights","recommendations","blob","Blob","JSON","stringify","url","window","URL","createObjectURL","link","document","createElement","href","download","toISOString","split","click","revokeObjectURL","success"],"sources":["E:/shixun/420/ecms/ecmsvue/src/views/CustomerBehavior.vue"],"sourcesContent":["<template>\r\n  <div class=\"customer-behavior\">\r\n    <!-- 头部 -->\r\n    <el-card class=\"header-card\">\r\n      <div class=\"header\">\r\n        <h3>客户行为分析</h3>\r\n        <div class=\"controls\">\r\n          <el-select\r\n              v-model=\"selectedMerchantId\"\r\n              placeholder=\"搜索选择商家\"\r\n              style=\"width: 200px\"\r\n              @change=\"loadData\"\r\n              filterable\r\n              remote\r\n              :remote-method=\"searchMerchant\"\r\n              :loading=\"merchantLoading\"\r\n              clearable\r\n          >\r\n            <el-option\r\n                v-for=\"merchant in merchants\"\r\n                :key=\"merchant.id\"\r\n                :label=\"merchant.name\"\r\n                :value=\"merchant.id\"\r\n            />\r\n          </el-select>\r\n          <el-button type=\"primary\" :loading=\"loading\" @click=\"loadData\" :disabled=\"!selectedMerchantId\">\r\n            分析客户\r\n          </el-button>\r\n          <el-button type=\"success\" @click=\"exportReport\" :disabled=\"!analysisData\">\r\n            导出报告\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n\r\n    <!-- 统计卡片 -->\r\n    <el-row :gutter=\"20\" class=\"stats-row\" v-if=\"analysisData\">\r\n      <el-col :span=\"6\">\r\n        <el-card shadow=\"hover\">\r\n          <el-statistic title=\"总客户数\" :value=\"analysisData.totalCustomers\" />\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n        <el-card shadow=\"hover\">\r\n          <el-statistic title=\"高价值客户贡献\" :value=\"analysisData.highValueContribution\" suffix=\"%\" :precision=\"1\" />\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n        <el-card shadow=\"hover\">\r\n          <el-statistic title=\"平均消费额\" :value=\"avgTotalSpend\" prefix=\"￥\" :precision=\"2\" />\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n        <el-card shadow=\"hover\">\r\n          <el-statistic title=\"平均购买频率\" :value=\"avgFrequency\" suffix=\"次/月\" :precision=\"2\" />\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 图表区域 -->\r\n    <el-row :gutter=\"20\" v-if=\"analysisData\">\r\n      <el-col :span=\"8\">\r\n        <el-card>\r\n          <template #header>客户细分分布</template>\r\n          <div ref=\"segmentPieRef\" style=\"height: 300px\"></div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"16\">\r\n        <el-card>\r\n          <template #header>客户细分统计</template>\r\n          <el-table :data=\"segmentTableData\" style=\"width: 100%\" show-summary :summary-method=\"getSummaries\">\r\n            <el-table-column prop=\"segment\" label=\"客户细分\" width=\"120\" />\r\n            <el-table-column prop=\"count\" label=\"客户数量\" width=\"100\" />\r\n            <el-table-column prop=\"percentage\" label=\"占比\" width=\"100\">\r\n              <template #default=\"scope\">\r\n                {{ scope.row.percentage.toFixed(1) }}%\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"avgTotalSpend\" label=\"平均消费额\">\r\n              <template #default=\"scope\">\r\n                ￥{{ scope.row.avgTotalSpend.toFixed(2) }}\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"avgFrequency\" label=\"平均购买频率\">\r\n              <template #default=\"scope\">\r\n                {{ scope.row.avgFrequency.toFixed(2) }} 次/月\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 高价值客户榜单 -->\r\n    <el-card class=\"mt-20\" v-if=\"analysisData\">\r\n      <template #header>\r\n        <div class=\"table-header\">\r\n          <span>高价值客户榜单 TOP 10</span>\r\n          <el-tag type=\"success\">高价值客户</el-tag>\r\n        </div>\r\n      </template>\r\n      <el-table :data=\"topCustomers\" style=\"width: 100%\">\r\n        <el-table-column type=\"index\" label=\"排名\" width=\"60\" />\r\n        <el-table-column prop=\"customerId\" label=\"客户ID\" width=\"100\" />\r\n        <el-table-column prop=\"totalSpend\" label=\"总消费额\" width=\"150\">\r\n          <template #default=\"scope\">\r\n            ￥{{ scope.row.totalSpend.toFixed(2) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"orderCount\" label=\"订单数\" width=\"100\" />\r\n        <el-table-column prop=\"avgOrderValue\" label=\"平均订单金额\">\r\n          <template #default=\"scope\">\r\n            ￥{{ scope.row.avgOrderValue.toFixed(2) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"monthlyFrequency\" label=\"月购买频率\">\r\n          <template #default=\"scope\">\r\n            {{ scope.row.monthlyFrequency.toFixed(2) }} 次/月\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"rfmScore\" label=\"RFM分数\" width=\"100\">\r\n          <template #default=\"scope\">\r\n            <el-tag>{{ scope.row.rfmScore }}</el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"lastPurchase\" label=\"最后购买时间\" width=\"160\">\r\n          <template #default=\"scope\">\r\n            {{ formatDate(scope.row.lastPurchase) }}\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-card>\r\n\r\n    <!-- 分析洞察与建议 -->\r\n    <el-row :gutter=\"20\" class=\"mt-20\" v-if=\"analysisData\">\r\n      <el-col :span=\"12\">\r\n        <el-card>\r\n          <template #header>客户行为洞察</template>\r\n          <div class=\"insights-content\" v-html=\"formatText(analysisData.insights)\"></div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"12\">\r\n        <el-card>\r\n          <template #header>营销建议</template>\r\n          <div class=\"recommendations-content\" v-html=\"formatText(analysisData.recommendations)\"></div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 客户细分详情 -->\r\n    <el-card class=\"mt-20\" v-if=\"analysisData\">\r\n      <template #header>\r\n        <div class=\"table-header\">\r\n          <span>客户细分详情</span>\r\n          <el-select v-model=\"selectedSegment\" placeholder=\"选择客户细分\" clearable style=\"width: 200px\">\r\n            <el-option v-for=\"segment in segments\" :key=\"segment\" :label=\"segment\" :value=\"segment\" />\r\n          </el-select>\r\n        </div>\r\n      </template>\r\n      <el-table :data=\"filteredCustomers\" style=\"width: 100%\" max-height=\"400\">\r\n        <el-table-column prop=\"customerId\" label=\"客户ID\" width=\"100\" />\r\n        <el-table-column prop=\"customerSegment\" label=\"客户细分\" width=\"120\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"getSegmentType(scope.row.customerSegment)\">\r\n              {{ scope.row.customerSegment }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"totalSpend\" label=\"总消费额\">\r\n          <template #default=\"scope\">\r\n            ￥{{ scope.row.totalSpend.toFixed(2) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"orderCount\" label=\"订单数\" />\r\n        <el-table-column prop=\"rfmScore\" label=\"RFM分数\">\r\n          <template #default=\"scope\">\r\n            <el-tag>{{ scope.row.rfmScore }}</el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"lastPurchase\" label=\"最后购买\">\r\n          <template #default=\"scope\">\r\n            {{ formatDate(scope.row.lastPurchase) }}\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref, computed, onMounted, onUnmounted, nextTick} from 'vue'\r\nimport {ElMessage} from 'element-plus'\r\nimport * as echarts from 'echarts'\r\nimport axios from 'axios'\r\n\r\nconst selectedMerchantId = ref(null)\r\nconst loading = ref(false)\r\nconst analysisData = ref(null)\r\nconst selectedSegment = ref('')\r\nconst merchantLoading = ref(false)\r\n\r\n// 初始化空的商家列表\r\nconst merchants = ref([])\r\n\r\nconst segmentPieRef = ref(null)\r\nlet segmentPieChart = null\r\n\r\n// 搜索商家方法\r\nconst searchMerchant = async (query) => {\r\n  if (query !== '') {\r\n    merchantLoading.value = true\r\n    try {\r\n      // 调用后端API搜索商家\r\n      const response = await axios.get(`http://localhost:8080/api/merchants/search`, {\r\n        params: {keyword: query}\r\n      })\r\n      merchants.value = response.data\r\n    } catch (error) {\r\n      console.error('搜索商家失败:', error)\r\n      ElMessage.error('搜索商家失败')\r\n    } finally {\r\n      merchantLoading.value = false\r\n    }\r\n  } else {\r\n    // 如果没有输入查询词，则获取所有商家或者清空列表\r\n    loadAllMerchants()\r\n  }\r\n}\r\n\r\n// 加载所有商家\r\nconst loadAllMerchants = async () => {\r\n  merchantLoading.value = true\r\n  try {\r\n    const response = await axios.get('http://localhost:8080/api/merchants')\r\n    merchants.value = response.data\r\n  } catch (error) {\r\n    console.error('获取商家列表失败:', error)\r\n    ElMessage.error('获取商家列表失败')\r\n  } finally {\r\n    merchantLoading.value = false\r\n  }\r\n}\r\n\r\n// 加载数据\r\nconst loadData = async () => {\r\n  if (!selectedMerchantId.value) {\r\n    ElMessage.warning('请选择商家')\r\n    return\r\n  }\r\n\r\n  loading.value = true\r\n  try {\r\n    const response = await axios.get(`http://localhost:8080/api/data-analysis/customer-behavior/${selectedMerchantId.value}`)\r\n    analysisData.value = response.data\r\n    nextTick(() => {\r\n      renderSegmentPie()\r\n    })\r\n  } catch (error) {\r\n    ElMessage.error('加载数据失败')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 渲染客户细分饼图\r\nconst renderSegmentPie = () => {\r\n  if (!segmentPieRef.value) return\r\n\r\n  if (segmentPieChart) {\r\n    segmentPieChart.dispose()\r\n  }\r\n\r\n  segmentPieChart = echarts.init(segmentPieRef.value)\r\n\r\n  const data = Object.entries(analysisData.value.segmentStats).map(([segment, stats]) => ({\r\n    name: segment,\r\n    value: stats.count\r\n  }))\r\n\r\n  const option = {\r\n    tooltip: {\r\n      trigger: 'item',\r\n      formatter: '{b}: {c} ({d}%)'\r\n    },\r\n    legend: {\r\n      orient: 'vertical',\r\n      left: 'left'\r\n    },\r\n    series: [\r\n      {\r\n        type: 'pie',\r\n        radius: '65%',\r\n        center: ['50%', '50%'],\r\n        data: data,\r\n        emphasis: {\r\n          itemStyle: {\r\n            shadowBlur: 10,\r\n            shadowOffsetX: 0,\r\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n\r\n  segmentPieChart.setOption(option)\r\n}\r\n\r\n// 计算属性\r\nconst avgTotalSpend = computed(() => {\r\n  if (!analysisData.value?.customerAnalytics) return 0\r\n  const analytics = analysisData.value.customerAnalytics\r\n  return analytics.reduce((sum, c) => sum + c.totalSpend, 0) / analytics.length\r\n})\r\n\r\nconst avgFrequency = computed(() => {\r\n  if (!analysisData.value?.customerAnalytics) return 0\r\n  const analytics = analysisData.value.customerAnalytics\r\n  return analytics.reduce((sum, c) => sum + c.monthlyFrequency, 0) / analytics.length\r\n})\r\n\r\nconst segmentTableData = computed(() => {\r\n  if (!analysisData.value) return []\r\n  return Object.entries(analysisData.value.segmentStats).map(([segment, stats]) => {\r\n    const segmentCustomers = analysisData.value.customerAnalytics.filter(c => c.customerSegment === segment)\r\n    const avgTotalSpend = segmentCustomers.reduce((sum, c) => sum + c.totalSpend, 0) / segmentCustomers.length || 0\r\n    const avgFrequency = segmentCustomers.reduce((sum, c) => sum + c.monthlyFrequency, 0) / segmentCustomers.length || 0\r\n\r\n    return {\r\n      segment,\r\n      count: stats.count,\r\n      percentage: stats.percentage,\r\n      avgTotalSpend,\r\n      avgFrequency\r\n    }\r\n  })\r\n})\r\n\r\nconst topCustomers = computed(() => {\r\n  if (!analysisData.value) return []\r\n  return analysisData.value.customerAnalytics\r\n      .filter(c => c.customerSegment === '高价值客户')\r\n      .sort((a, b) => b.totalSpend - a.totalSpend)\r\n      .slice(0, 10)\r\n})\r\n\r\nconst segments = computed(() => {\r\n  if (!analysisData.value) return []\r\n  return Object.keys(analysisData.value.segmentStats)\r\n})\r\n\r\nconst filteredCustomers = computed(() => {\r\n  if (!analysisData.value?.customerAnalytics) return []\r\n  let customers = analysisData.value.customerAnalytics\r\n  if (selectedSegment.value) {\r\n    customers = customers.filter(c => c.customerSegment === selectedSegment.value)\r\n  }\r\n  return customers\r\n})\r\n\r\n// 方法\r\nconst getSegmentType = (segment) => {\r\n  const map = {\r\n    '高价值客户': 'success',\r\n    '忠诚客户': 'primary',\r\n    '潜力客户': 'warning',\r\n    '休眠客户': 'danger'\r\n  }\r\n  return map[segment] || ''\r\n}\r\n\r\nconst formatDate = (date) => {\r\n  if (!date) return '-'\r\n  return new Date(date).toLocaleString()\r\n}\r\n\r\nconst formatText = (text) => {\r\n  return text?.replace(/\\n/g, '<br>') || ''\r\n}\r\n\r\nconst getSummaries = (param) => {\r\n  const {columns, data} = param\r\n  const sums = []\r\n\r\n  columns.forEach((column, index) => {\r\n    if (index === 0) {\r\n      sums[index] = '总计'\r\n      return\r\n    }\r\n\r\n    const values = data.map(item => Number(item[column.property]))\r\n    if (!values.every(value => isNaN(value))) {\r\n      sums[index] = values.reduce((prev, curr) => {\r\n        const value = Number(curr)\r\n        if (!isNaN(value)) {\r\n          return prev + curr\r\n        } else {\r\n          return prev\r\n        }\r\n      }, 0)\r\n\r\n      if (column.property === 'percentage') {\r\n        sums[index] = sums[index].toFixed(1) + '%'\r\n      } else if (column.property === 'avgTotalSpend') {\r\n        sums[index] = '￥' + sums[index].toFixed(2)\r\n      } else if (column.property === 'avgFrequency') {\r\n        sums[index] = sums[index].toFixed(2) + ' 次/月'\r\n      }\r\n    } else {\r\n      sums[index] = '-'\r\n    }\r\n  })\r\n\r\n  return sums\r\n}\r\n\r\nconst exportReport = () => {\r\n  if (!analysisData.value) {\r\n    ElMessage.warning('暂无数据可导出')\r\n    return\r\n  }\r\n\r\n  // 准备导出数据\r\n  const exportData = {\r\n    merchantId: selectedMerchantId.value,\r\n    exportDate: new Date().toLocaleString(),\r\n    summary: {\r\n      totalCustomers: analysisData.value.totalCustomers,\r\n      highValueContribution: analysisData.value.highValueContribution,\r\n      avgTotalSpend: avgTotalSpend.value,\r\n      avgFrequency: avgFrequency.value\r\n    },\r\n    segmentStats: analysisData.value.segmentStats,\r\n    customerAnalytics: analysisData.value.customerAnalytics,\r\n    insights: analysisData.value.insights,\r\n    recommendations: analysisData.value.recommendations\r\n  }\r\n\r\n  // 创建下载链接\r\n  const blob = new Blob([JSON.stringify(exportData, null, 2)], {type: 'application/json'})\r\n  const url = window.URL.createObjectURL(blob)\r\n  const link = document.createElement('a')\r\n  link.href = url\r\n  link.download = `客户行为分析报告_${selectedMerchantId.value}_${new Date().toISOString().split('T')[0]}.json`\r\n  link.click()\r\n  window.URL.revokeObjectURL(url)\r\n\r\n  ElMessage.success('报告导出成功')\r\n}\r\n\r\nonMounted(() => {\r\n  // 组件挂载时加载商家列表\r\n  loadAllMerchants()\r\n\r\n  if (selectedMerchantId.value) {\r\n    loadData()\r\n  }\r\n})\r\n\r\n// 组件卸载时清理\r\nonUnmounted(() => {\r\n  if (segmentPieChart) {\r\n    segmentPieChart.dispose()\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.customer-behavior {\r\n  padding: 20px;\r\n}\r\n\r\n.header-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.controls {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.stats-row {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.table-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.insights-content,\r\n.recommendations-content {\r\n  line-height: 1.6;\r\n  white-space: pre-line;\r\n  color: #606266;\r\n  padding: 10px;\r\n}\r\n\r\n.mt-20 {\r\n  margin-top: 20px;\r\n}\r\n\r\n:deep(.el-statistic__content) {\r\n  font-size: 24px;\r\n}\r\n\r\n:deep(.el-table .cell) {\r\n  padding: 8px;\r\n}\r\n\r\n:deep(.el-table__footer-wrapper td) {\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}