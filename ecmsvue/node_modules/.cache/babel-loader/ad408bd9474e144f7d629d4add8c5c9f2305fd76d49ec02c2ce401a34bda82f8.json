{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios'; // 引入 axios 库进行 HTTP 请求\nimport { ElMessage } from 'element-plus'; // 引入 Element Plus 的消息组件\nimport AppMerchantNavbar from \"@/components/MerchantNavbar.vue\";\nimport { gsap } from \"gsap\"; // 引入导航栏组件\n\nexport default {\n  name: 'ProductManagement',\n  // 组件名称\n  components: {\n    AppNavbar: AppMerchantNavbar\n  },\n  // 注册导航栏组件\n  data() {\n    return {\n      products: [],\n      // 产品数组\n      searchKeyword: '',\n      // 新增搜索关键词\n      productForm: {\n        // 表单数据模型\n        productName: '',\n        price: 0,\n        stockQuantity: 0,\n        status: 'active',\n        merchantId: null,\n        description: ''\n      },\n      selectedProduct: null,\n      // 当前选择的产品\n      dialogVisible: false,\n      // 控制添加/编辑产品对话框的显示\n      deleteDialogVisible: false,\n      // 控制删除确认对话框的显示\n      productIdToDelete: null // 当前待删除产品的ID\n    };\n  },\n  methods: {\n    async handleNavigation(path) {\n      await this.leaveAnimation();\n      this.$router.push(path);\n    },\n    leaveAnimation() {\n      return new Promise(resolve => {\n        const tl = gsap.timeline();\n\n        // 使用更精确的选择器\n        tl.to(\".container\", {\n          duration: 0.8,\n          opacity: 0,\n          y: 100,\n          ease: \"power4.in\"\n        }).eventCallback(\"onComplete\", resolve);\n      });\n    },\n    fetchProducts() {\n      // 获取所有产品\n      const url = 'http://localhost:8080/api/products';\n      axios.get(url).then(response => {\n        this.products = response.data; // 更新产品列表\n      }).catch(error => {\n        ElMessage.error('获取产品列表失败: ' + error.message); // 显示失败消息\n        console.error('获取产品时出错:', error);\n      });\n    },\n    fetchProductsByKeyword() {\n      // 根据搜索关键词获取产品\n      const url = this.searchKeyword ? `http://localhost:8080/api/products/search?keyword=${this.searchKeyword}` : 'http://localhost:8080/api/products';\n      axios.get(url).then(response => {\n        this.products = response.data; // 更新产品列表\n      }).catch(error => {\n        ElMessage.error('获取产品列表失败: ' + error.message); // 显示失败消息\n        console.error('获取产品时出错:', error);\n      });\n    },\n    showProductForm() {\n      // 显示添加产品表单\n      this.selectedProduct = null; // 清空选择的产品\n      this.productForm = {\n        // 重置表单\n        productName: '',\n        price: 0,\n        stockQuantity: 0,\n        status: 'active',\n        merchantId: null,\n        description: ''\n      };\n      this.dialogVisible = true; // 显示对话框\n    },\n    editProduct(product) {\n      // 显示编辑产品表单\n      this.selectedProduct = product; // 设置选择的产品\n      this.productForm = {\n        productName: product.productName,\n        price: product.price,\n        stockQuantity: product.stockQuantity,\n        status: product.status,\n        merchantId: product.merchantId,\n        description: product.description || ''\n      };\n      this.dialogVisible = true; // 显示对话框\n    },\n    clearForm() {\n      // 清空表单\n      this.selectedProduct = null; // 取消选择的产品\n      this.productForm = {\n        // 重置表单\n        productName: '',\n        price: 0,\n        stockQuantity: 0,\n        status: 'active',\n        merchantId: null,\n        description: ''\n      };\n    },\n    saveProduct() {\n      // 保存产品（添加或更新）\n      const url = this.selectedProduct ? `http://localhost:8080/api/products/${this.selectedProduct.productId}` // 更新产品\n      : 'http://localhost:8080/api/products'; // 添加产品\n\n      const method = this.selectedProduct ? 'put' : 'post'; // 确定使用的请求方法\n\n      const productData = {\n        // 整理待提交的产品数据\n        merchantId: this.productForm.merchantId,\n        productName: this.productForm.productName,\n        price: this.productForm.price,\n        stockQuantity: this.productForm.stockQuantity,\n        status: this.productForm.status,\n        description: this.productForm.description\n      };\n      axios[method](url, productData).then(() => {\n        ElMessage.success(this.selectedProduct ? '产品更新成功' : '产品添加成功'); // 显示成功消息\n        this.fetchProducts(); // 重新获取产品列表\n        this.dialogVisible = false; // 关闭对话框\n      }).catch(error => {\n        ElMessage.error('操作失败: ' + error.message); // 显示错误消息\n        console.error('保存产品时出错:', error);\n      });\n    },\n    confirmDelete(productId) {\n      // 确认删除产品\n      this.productIdToDelete = productId; // 存储待删除产品的ID\n      this.deleteDialogVisible = true; // 显示删除确认对话框\n    },\n    deleteProduct() {\n      // 删除产品\n      axios.delete(`http://localhost:8080/api/products/${this.productIdToDelete}`).then(() => {\n        ElMessage.success('产品删除成功'); // 显示成功消息\n        this.fetchProducts(); // 重新获取产品列表\n        this.deleteDialogVisible = false; // 关闭删除对话框\n      }).catch(error => {\n        ElMessage.error('删除失败: ' + error.message); // 显示错误消息\n        console.error('删除产品时出错:', error);\n      });\n    }\n  },\n  mounted() {\n    this.fetchProducts(); // 初始加载所有产品\n  }\n};","map":{"version":3,"names":["axios","ElMessage","AppMerchantNavbar","gsap","name","components","AppNavbar","data","products","searchKeyword","productForm","productName","price","stockQuantity","status","merchantId","description","selectedProduct","dialogVisible","deleteDialogVisible","productIdToDelete","methods","handleNavigation","path","leaveAnimation","$router","push","Promise","resolve","tl","timeline","to","duration","opacity","y","ease","eventCallback","fetchProducts","url","get","then","response","catch","error","message","console","fetchProductsByKeyword","showProductForm","editProduct","product","clearForm","saveProduct","productId","method","productData","success","confirmDelete","deleteProduct","delete","mounted"],"sources":["D:\\code_new\\ecms\\ecmsvue\\src\\views\\Products.vue"],"sourcesContent":["<template>\n  <AppNavbar @navigate=\"handleNavigation\"/> <!-- 引入导航栏组件 -->\n  <div class=\"container\">\n\n    <h1>产品管理</h1> <!-- 页面标题 -->\n\n    <el-input\n        v-model=\"searchKeyword\"\n    placeholder=\"请输入产品名称或描述进行搜索\"\n    style=\"width: 300px; margin-bottom: 20px;\"\n    @input=\"fetchProductsByKeyword\"\n    />\n    <!-- 绑定搜索关键词 -->\n    <!-- 输入框占位符 -->\n    <!-- 设置输入框样式 -->\n    <!-- 输入变化时调用搜索方法 -->\n\n    <el-button type=\"primary\" @click=\"showProductForm\" style=\"margin-bottom: 20px;\">添加产品</el-button> <!-- 添加产品按钮 -->\n\n    <!-- 产品表格 -->\n    <el-table :data=\"products\" style=\"width: 100%;\">\n      <el-table-column prop=\"productName\" label=\"产品名称\" /> <!-- 产品名称列 -->\n      <el-table-column prop=\"price\" label=\"价格\" /> <!-- 产品价格列 -->\n      <el-table-column prop=\"status\" label=\"状态\">\n        <template #default=\"scope\">\n          <el-tag :type=\"scope.row.status === 'active' ? 'success' : 'danger'\"> <!-- 根据状态显示标签 -->\n            {{ scope.row.status === 'active' ? '可用' : '不可用' }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\">\n        <template #default=\"scope\">\n          <el-button size=\"small\" @click=\"editProduct(scope.row)\">编辑</el-button> <!-- 编辑按钮 -->\n          <el-button size=\"small\" type=\"danger\" @click=\"confirmDelete(scope.row.productId)\">删除</el-button> <!-- 删除按钮 -->\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 产品表单对话框 -->\n    <el-dialog\n        v-model=\"dialogVisible\"\n    :title=\"selectedProduct ? '编辑产品' : '添加产品'\"\n    width=\"50%\"\n    @close=\"clearForm\"\n    >\n    <!-- 控制对话框的显示 -->\n    <!-- 动态设置对话框标题 -->\n      <!-- 关闭对话框时清空表单 -->\n\n    <el-form :model=\"productForm\" label-width=\"120px\" size=\"default\"> <!-- 表单 -->\n      <el-form-item label=\"产品名称\" prop=\"productName\">\n        <el-input v-model=\"productForm.productName\" placeholder=\"请输入产品名称\" /> <!-- 产品名称输入 -->\n      </el-form-item>\n      <el-form-item label=\"价格\" prop=\"price\">\n        <el-input-number v-model=\"productForm.price\" :min=\"0\" :precision=\"2\" /> <!-- 产品价格输入 -->\n      </el-form-item>\n      <el-form-item label=\"库存数量\" prop=\"stockQuantity\">\n        <el-input-number v-model=\"productForm.stockQuantity\" :min=\"0\" /> <!-- 产品库存输入 -->\n      </el-form-item>\n      <el-form-item label=\"状态\" prop=\"status\">\n        <el-select v-model=\"productForm.status\" placeholder=\"选择状态\"> <!-- 产品状态选择 -->\n          <el-option label=\"可用\" value=\"active\" />\n          <el-option label=\"不可用\" value=\"inactive\" />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"商家ID\" prop=\"merchantId\">\n        <el-input-number v-model=\"productForm.merchantId\" :min=\"1\" disabled v-if=\"selectedProduct\" /> <!-- 商家ID输入 -->\n        <el-input-number v-model=\"productForm.merchantId\" :min=\"1\" v-else />\n      </el-form-item>\n      <el-form-item label=\"描述\" prop=\"description\">\n        <el-input v-model=\"productForm.description\" type=\"textarea\" :rows=\"3\" /> <!-- 产品描述输入 -->\n      </el-form-item>\n    </el-form>\n    <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"dialogVisible = false\">取消</el-button> <!-- 取消按钮 -->\n          <el-button type=\"primary\" @click=\"saveProduct\">保存</el-button> <!-- 保存按钮 -->\n        </span>\n    </template>\n    </el-dialog>\n\n    <!-- 删除确认对话框 -->\n    <el-dialog\n        v-model=\"deleteDialogVisible\"\n    title=\"确认删除\"\n    width=\"30%\"\n    >\n      <!-- 控制删除对话框的显示 -->\n    <span>确定要删除这个产品吗？此操作不可撤销。</span> <!-- 删除确认提示 -->\n    <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"deleteDialogVisible = false\">取消</el-button> <!-- 取消按钮 -->\n          <el-button type=\"danger\" @click=\"deleteProduct\">确认删除</el-button> <!-- 确认删除按钮 -->\n        </span>\n    </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'; // 引入 axios 库进行 HTTP 请求\nimport { ElMessage } from 'element-plus'; // 引入 Element Plus 的消息组件\nimport AppMerchantNavbar from \"@/components/MerchantNavbar.vue\";\nimport {gsap} from \"gsap\"; // 引入导航栏组件\n\nexport default {\n  name: 'ProductManagement', // 组件名称\n  components: { AppNavbar: AppMerchantNavbar }, // 注册导航栏组件\n  data() {\n    return {\n      products: [], // 产品数组\n      searchKeyword: '', // 新增搜索关键词\n      productForm: { // 表单数据模型\n        productName: '',\n        price: 0,\n        stockQuantity: 0,\n        status: 'active',\n        merchantId: null,\n        description: ''\n      },\n      selectedProduct: null, // 当前选择的产品\n      dialogVisible: false, // 控制添加/编辑产品对话框的显示\n      deleteDialogVisible: false, // 控制删除确认对话框的显示\n      productIdToDelete: null // 当前待删除产品的ID\n    };\n  },\n  methods: {\n    async handleNavigation(path) {\n      await this.leaveAnimation();\n      this.$router.push(path);\n    },\n    leaveAnimation() {\n      return new Promise((resolve) => {\n        const tl = gsap.timeline();\n\n        // 使用更精确的选择器\n        tl.to(\".container\", {\n          duration: 0.8,\n          opacity: 0,\n          y: 100,\n          ease: \"power4.in\"\n        })\n            .eventCallback(\"onComplete\", resolve);\n      });\n    },\n    fetchProducts() {\n      // 获取所有产品\n      const url = 'http://localhost:8080/api/products';\n      axios.get(url)\n          .then(response => {\n            this.products = response.data; // 更新产品列表\n          })\n          .catch(error => {\n            ElMessage.error('获取产品列表失败: ' + error.message); // 显示失败消息\n            console.error('获取产品时出错:', error);\n          });\n    },\n    fetchProductsByKeyword() {\n      // 根据搜索关键词获取产品\n      const url = this.searchKeyword\n          ? `http://localhost:8080/api/products/search?keyword=${this.searchKeyword}`\n          : 'http://localhost:8080/api/products';\n\n      axios.get(url)\n          .then(response => {\n            this.products = response.data; // 更新产品列表\n          })\n          .catch(error => {\n            ElMessage.error('获取产品列表失败: ' + error.message); // 显示失败消息\n            console.error('获取产品时出错:', error);\n          });\n    },\n    showProductForm() {\n      // 显示添加产品表单\n      this.selectedProduct = null; // 清空选择的产品\n      this.productForm = { // 重置表单\n        productName: '',\n        price: 0,\n        stockQuantity: 0,\n        status: 'active',\n        merchantId: null,\n        description: ''\n      };\n      this.dialogVisible = true; // 显示对话框\n    },\n    editProduct(product) {\n      // 显示编辑产品表单\n      this.selectedProduct = product; // 设置选择的产品\n      this.productForm = {\n        productName: product.productName,\n        price: product.price,\n        stockQuantity: product.stockQuantity,\n        status: product.status,\n        merchantId: product.merchantId,\n        description: product.description || ''\n      };\n      this.dialogVisible = true; // 显示对话框\n    },\n    clearForm() {\n      // 清空表单\n      this.selectedProduct = null; // 取消选择的产品\n      this.productForm = { // 重置表单\n        productName: '',\n        price: 0,\n        stockQuantity: 0,\n        status: 'active',\n        merchantId: null,\n        description: ''\n      };\n    },\n    saveProduct() {\n      // 保存产品（添加或更新）\n      const url = this.selectedProduct\n          ? `http://localhost:8080/api/products/${this.selectedProduct.productId}` // 更新产品\n          : 'http://localhost:8080/api/products'; // 添加产品\n\n      const method = this.selectedProduct ? 'put' : 'post'; // 确定使用的请求方法\n\n      const productData = { // 整理待提交的产品数据\n        merchantId: this.productForm.merchantId,\n        productName: this.productForm.productName,\n        price: this.productForm.price,\n        stockQuantity: this.productForm.stockQuantity,\n        status: this.productForm.status,\n        description: this.productForm.description\n      };\n\n      axios[method](url,productData)\n          .then(() => {\n            ElMessage.success(this.selectedProduct ? '产品更新成功' : '产品添加成功'); // 显示成功消息\n            this.fetchProducts(); // 重新获取产品列表\n            this.dialogVisible = false; // 关闭对话框\n          })\n          .catch(error => {\n            ElMessage.error('操作失败: ' + error.message); // 显示错误消息\n            console.error('保存产品时出错:', error);\n          });\n    },\n    confirmDelete(productId) {\n      // 确认删除产品\n      this.productIdToDelete = productId; // 存储待删除产品的ID\n      this.deleteDialogVisible = true; // 显示删除确认对话框\n    },\n    deleteProduct() {\n      // 删除产品\n      axios.delete(`http://localhost:8080/api/products/${this.productIdToDelete}`)\n          .then(() => {\n            ElMessage.success('产品删除成功'); // 显示成功消息\n            this.fetchProducts(); // 重新获取产品列表\n            this.deleteDialogVisible = false; // 关闭删除对话框\n          })\n          .catch(error => {\n            ElMessage.error('删除失败: ' + error.message); // 显示错误消息\n            console.error('删除产品时出错:', error);\n          });\n    }\n  },\n  mounted() {\n    this.fetchProducts(); // 初始加载所有产品\n  }\n};\n</script>\n\n<style scoped>\n.el-table {\n  width: 100%; /* 设置表格宽度 */\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end; /* 确保对话框底部按钮右对齐 */\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}