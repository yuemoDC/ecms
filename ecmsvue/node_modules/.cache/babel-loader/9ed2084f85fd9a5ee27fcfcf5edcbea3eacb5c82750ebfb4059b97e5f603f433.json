{"ast":null,"code":"import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home-container\"\n};\nconst _hoisted_2 = {\n  ref: \"title\",\n  class: \"title\"\n};\nconst _hoisted_3 = {\n  class: \"notice-list\"\n};\nconst _hoisted_4 = {\n  ref: \"notice1\"\n};\nconst _hoisted_5 = {\n  ref: \"notice2\"\n};\nconst _hoisted_6 = {\n  ref: \"notice3\"\n};\nconst _hoisted_7 = {\n  ref: \"userInfo\",\n  class: \"user-info\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(), _createBlock(_resolveDynamicComponent($setup.navbarComponent))), _createCommentVNode(\" 根据用户角色动态加载导航栏 \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, \"欢迎来到首页!\", 512 /* NEED_PATCH */), _createElementVNode(\"p\", {\n    ref: \"welcomeMsg\",\n    class: \"welcome-msg\"\n  }, \" 欢迎回来，\" + _toDisplayString($setup.currentUser?.username || '用户') + \"！ \", 513 /* TEXT, NEED_PATCH */), _createElementVNode(\"p\", {\n    ref: \"timeMsg\",\n    class: \"time-msg\"\n  }, \"当前时间：\" + _toDisplayString($setup.currentTime), 513 /* TEXT, NEED_PATCH */), _createCommentVNode(\" 公告栏 \"), _createVNode(_component_el_card, {\n    ref: \"noticeBoard\",\n    class: \"notice-board\",\n    shadow: \"hover\"\n  }, {\n    default: _withCtx(() => [_cache[0] || (_cache[0] = _createElementVNode(\"h3\", null, \"📢 系统公告\", -1 /* HOISTED */)), _createElementVNode(\"ul\", _hoisted_3, [_createElementVNode(\"li\", _hoisted_4, \"🛠 系统维护时间：每周日凌晨 2:00 - 4:00\", 512 /* NEED_PATCH */), _createElementVNode(\"li\", _hoisted_5, \"📊 数据将在每天晚上自动备份\", 512 /* NEED_PATCH */), _createElementVNode(\"li\", _hoisted_6, \"📌 如遇页面问题，请刷新或重新登录\", 512 /* NEED_PATCH */)])]),\n    _: 1 /* STABLE */\n  }, 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_7, [$setup.currentUser ? (_openBlock(), _createBlock(_component_el_tag, {\n    key: 0,\n    type: \"success\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" 你好，你的\" + _toDisplayString($setup.currentUser.role) + \"ID为: \" + _toDisplayString($setup.currentUser.id), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  })) : (_openBlock(), _createBlock(_component_el_tag, {\n    key: 1,\n    type: \"info\"\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\" 未登录 \")])),\n    _: 1 /* STABLE */\n  }))], 512 /* NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_createBlock","_resolveDynamicComponent","$setup","navbarComponent","_createCommentVNode","_createElementVNode","_hoisted_1","_hoisted_2","_toDisplayString","currentUser","username","currentTime","_createVNode","_component_el_card","shadow","default","_withCtx","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_","_hoisted_7","_component_el_tag","key","type","_createTextVNode","role","id","_cache"],"sources":["D:\\code_new\\ecms\\ecmsvue\\src\\components\\AdminNavbar.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <component :is=\"navbarComponent\" /> <!-- 根据用户角色动态加载导航栏 -->\r\n    <div class=\"home-container\">\r\n      <h1 ref=\"title\" class=\"title\">欢迎来到首页!</h1>\r\n      <p ref=\"welcomeMsg\" class=\"welcome-msg\">\r\n        欢迎回来，{{ currentUser?.username || '用户' }}！\r\n      </p>\r\n      <p ref=\"timeMsg\" class=\"time-msg\">当前时间：{{ currentTime }}</p>\r\n\r\n      <!-- 公告栏 -->\r\n      <el-card ref=\"noticeBoard\" class=\"notice-board\" shadow=\"hover\">\r\n        <h3>📢 系统公告</h3>\r\n        <ul class=\"notice-list\">\r\n          <li ref=\"notice1\">🛠 系统维护时间：每周日凌晨 2:00 - 4:00</li>\r\n          <li ref=\"notice2\">📊 数据将在每天晚上自动备份</li>\r\n          <li ref=\"notice3\">📌 如遇页面问题，请刷新或重新登录</li>\r\n        </ul>\r\n      </el-card>\r\n\r\n      <div ref=\"userInfo\" class=\"user-info\">\r\n        <el-tag type=\"success\" v-if=\"currentUser\">\r\n          你好，你的{{ currentUser.role }}ID为: {{ currentUser.id }}\r\n        </el-tag>\r\n        <el-tag type=\"info\" v-else>\r\n          未登录\r\n        </el-tag>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, nextTick } from 'vue';\r\nimport AppMerchantNavbar from '../components/MerchantNavbar.vue';\r\nimport AppAdminNavbar from '../components/AdminNavbar.vue';\r\nimport gsap from 'gsap';\r\n\r\nexport default {\r\n  name: 'HomePage',\r\n  components: {\r\n    AppMerchantNavbar,\r\n    AppAdminNavbar\r\n  },\r\n  setup() {\r\n    // 定义引用\r\n    const title = ref(null);\r\n    const welcomeMsg = ref(null);\r\n    const timeMsg = ref(null);\r\n    const noticeBoard = ref(null);\r\n    const userInfo = ref(null);\r\n    const notice1 = ref(null);\r\n    const notice2 = ref(null);\r\n    const notice3 = ref(null);\r\n\r\n    const currentUser = ref(null);\r\n    const currentTime = ref('');\r\n\r\n    // 检查是否首次访问\r\n    const checkFirstVisit = () => {\r\n      const visited = sessionStorage.getItem('homeVisited');\r\n      if (!visited) {\r\n        sessionStorage.setItem('homeVisited', 'true');\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    // 获取当前用户信息\r\n    const getCurrentUser = () => {\r\n      // 从 localStorage 获取用户信息\r\n      const userData = localStorage.getItem('user');\r\n      if (userData) {\r\n        try {\r\n          const parsedUserData = JSON.parse(userData);\r\n          if (parsedUserData.success) {\r\n            currentUser.value = {\r\n              role: parsedUserData.role,\r\n              id: parsedUserData.userid, // 使用 userid 作为 id\r\n              token: parsedUserData.token,\r\n              username: parsedUserData.username\r\n            };\r\n          } else {\r\n            console.error('用户信息不正确:', parsedUserData);\r\n          }\r\n        } catch (e) {\r\n          console.error('解析用户信息失败:', e);\r\n        }\r\n      }\r\n    };\r\n\r\n    // 更新时间\r\n    const updateTime = () => {\r\n      const now = new Date();\r\n      currentTime.value = now.toLocaleString();\r\n    };\r\n\r\n    // 执行入场动画\r\n    const playEntranceAnimation = () => {\r\n      try {\r\n        // 创建要动画的元素数组，过滤掉不存在的元素\r\n        const elements = [\r\n          title.value,\r\n          welcomeMsg.value,\r\n          timeMsg.value,\r\n          noticeBoard.value,\r\n          userInfo.value\r\n        ].filter(el => el !== null && el !== undefined);\r\n\r\n        // 创建公告项元素数组，过滤掉不存在的元素\r\n        const noticeItems = [\r\n          notice1.value,\r\n          notice2.value,\r\n          notice3.value\r\n        ].filter(el => el !== null && el !== undefined);\r\n\r\n        // 只有在有元素存在的情况下才设置初始状态\r\n        if (elements.length > 0) {\r\n          gsap.set(elements, { opacity: 0 });\r\n        }\r\n\r\n        // 为各个存在的元素单独设置初始状态\r\n        if (title.value) gsap.set(title.value, { y: -50 });\r\n        if (welcomeMsg.value) gsap.set(welcomeMsg.value, { x: -50 });\r\n        if (timeMsg.value) gsap.set(timeMsg.value, { x: 50 });\r\n        if (noticeBoard.value) gsap.set(noticeBoard.value, { scale: 0.8 });\r\n        if (userInfo.value) gsap.set(userInfo.value, { y: -30 });\r\n\r\n        if (noticeItems.length > 0) {\r\n          gsap.set(noticeItems, { x: 20, opacity: 0 });\r\n        }\r\n\r\n        // 创建动画时间线\r\n        const tl = gsap.timeline();\r\n\r\n        // 添加动画序列，只对存在的元素进行动画\r\n        if (title.value) {\r\n          tl.to(title.value, {\r\n            opacity: 1,\r\n            y: 0,\r\n            duration: 0.8,\r\n            ease: \"power3.out\"\r\n          });\r\n        }\r\n\r\n        if (welcomeMsg.value) {\r\n          tl.to(welcomeMsg.value, {\r\n            opacity: 1,\r\n            x: 0,\r\n            duration: 0.6,\r\n            ease: \"power2.out\"\r\n          }, \"-=0.3\");\r\n        }\r\n\r\n        if (timeMsg.value) {\r\n          tl.to(timeMsg.value, {\r\n            opacity: 1,\r\n            x: 0,\r\n            duration: 0.6,\r\n            ease: \"power2.out\"\r\n          }, \"-=0.4\");\r\n        }\r\n\r\n        if (userInfo.value) {\r\n          tl.to(userInfo.value, {\r\n            opacity: 1,\r\n            y: 0,\r\n            duration: 0.5,\r\n            ease: \"back.out(1.7)\"\r\n          }, \"-=0.5\");\r\n        }\r\n\r\n        if (noticeBoard.value) {\r\n          tl.to(noticeBoard.value, {\r\n            opacity: 1,\r\n            scale: 1,\r\n            duration: 0.8,\r\n            ease: \"back.out(1.2)\"\r\n          }, \"-=0.3\");\r\n        }\r\n\r\n        if (noticeItems.length > 0) {\r\n          tl.to(noticeItems, {\r\n            opacity: 1,\r\n            x: 0,\r\n            duration: 0.5,\r\n            stagger: 0.15,\r\n            ease: \"power1.out\"\r\n          }, \"-=0.5\");\r\n        }\r\n      } catch (error) {\r\n        console.error('动画执行出错:', error);\r\n        // 发生错误时，确保所有元素可见\r\n        makeAllElementsVisible();\r\n      }\r\n    };\r\n\r\n    // 使所有元素可见的辅助函数\r\n    const makeAllElementsVisible = () => {\r\n      const allElements = [\r\n        title.value,\r\n        welcomeMsg.value,\r\n        timeMsg.value,\r\n        noticeBoard.value,\r\n        userInfo.value,\r\n        notice1.value,\r\n        notice2.value,\r\n        notice3.value\r\n      ].filter(el => el !== null && el !== undefined);\r\n\r\n      if (allElements.length > 0) {\r\n        gsap.set(allElements, { opacity: 1, x: 0, y: 0, scale: 1 });\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      // 加载用户数据和开始时间更新\r\n      getCurrentUser();\r\n      updateTime();\r\n      setInterval(updateTime, 1000);\r\n\r\n      // 使用 nextTick 确保 DOM 已更新\r\n      nextTick(() => {\r\n        // 再添加一个 setTimeout 以确保 DOM 完全渲染\r\n        setTimeout(() => {\r\n          try {\r\n            const isFirstVisit = checkFirstVisit();\r\n            if (isFirstVisit) {\r\n              playEntranceAnimation();\r\n            } else {\r\n              // 非首次访问，直接显示所有元素\r\n              makeAllElementsVisible();\r\n            }\r\n          } catch (error) {\r\n            console.error('动画初始化错误:', error);\r\n            makeAllElementsVisible();\r\n          }\r\n        }, 100); // 给予足够的时间让DOM完全渲染\r\n      });\r\n    });\r\n\r\n    // 计算当前应该使用的导航栏组件\r\n    const navbarComponent = computed(() => {\r\n      if (currentUser.value && currentUser.value.role === 'admin') {\r\n        return 'AppAdminNavbar';\r\n      }\r\n      return 'AppMerchantNavbar';\r\n    });\r\n\r\n    return {\r\n      // 返回所有引用和数据\r\n      title,\r\n      welcomeMsg,\r\n      timeMsg,\r\n      noticeBoard,\r\n      userInfo,\r\n      notice1,\r\n      notice2,\r\n      notice3,\r\n      currentUser,\r\n      currentTime,\r\n      navbarComponent\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.home-container {\r\n  position: relative;\r\n  padding: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.title {\r\n  font-size: 36px;\r\n  color: #409EFF;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.welcome-msg {\r\n  font-size: 20px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.time-msg {\r\n  font-size: 16px;\r\n  color: #888;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.user-info {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n}\r\n\r\n.notice-board {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  text-align: left;\r\n  padding: 20px;\r\n  border-left: 5px solid #409EFF;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.notice-board:hover {\r\n  transform: translateY(-5px);\r\n}\r\n\r\n.notice-list {\r\n  list-style: none;\r\n  padding-left: 0;\r\n  margin-top: 10px;\r\n}\r\n\r\n.notice-list li {\r\n  margin-bottom: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n  padding: 5px 0;\r\n}\r\n\r\n/* 响应式优化 */\r\n@media (max-width: 768px) {\r\n  .user-info {\r\n    position: static;\r\n    margin-top: 20px;\r\n    text-align: center;\r\n  }\r\n\r\n  .notice-board {\r\n    width: 90%;\r\n  }\r\n}\r\n</style>"],"mappings":";;EAGSA,KAAK,EAAC;AAAgB;;EACrBC,GAAG,EAAC,OAAO;EAACD,KAAK,EAAC;;;EAShBA,KAAK,EAAC;AAAa;;EACjBC,GAAG,EAAC;AAAS;;EACbA,GAAG,EAAC;AAAS;;EACbA,GAAG,EAAC;AAAS;;EAIhBA,GAAG,EAAC,UAAU;EAACD,KAAK,EAAC;;;;;uBAnB9BE,mBAAA,CA6BM,e,cA5BJC,YAAA,CAAmCC,wBAFvC,CAEoBC,MAAA,CAAAC,eAAe,KAAKC,mBAAA,mBAAsB,EAC1DC,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJD,mBAAA,CAA0C,MAA1CE,UAA0C,EAAZ,SAAO,yBACrCF,mBAAA,CAEI;IAFDP,GAAG,EAAC,YAAY;IAACD,KAAK,EAAC;KAAc,QACjC,GAAAW,gBAAA,CAAGN,MAAA,CAAAO,WAAW,EAAEC,QAAQ,YAAW,IAC1C,+BACAL,mBAAA,CAA4D;IAAzDP,GAAG,EAAC,SAAS;IAACD,KAAK,EAAC;KAAW,OAAK,GAAAW,gBAAA,CAAGN,MAAA,CAAAS,WAAW,gCAErDP,mBAAA,SAAY,EACZQ,YAAA,CAOUC,kBAAA;IAPDf,GAAG,EAAC,aAAa;IAACD,KAAK,EAAC,cAAc;IAACiB,MAAM,EAAC;;IAX7DC,OAAA,EAAAC,QAAA,CAYQ,MAAgB,C,0BAAhBX,mBAAA,CAAgB,YAAZ,SAAO,sBACXA,mBAAA,CAIK,MAJLY,UAIK,GAHHZ,mBAAA,CAAkD,MAAlDa,UAAkD,EAAhC,6BAA2B,yBAC7Cb,mBAAA,CAAsC,MAAtCc,UAAsC,EAApB,iBAAe,yBACjCd,mBAAA,CAAyC,MAAzCe,UAAyC,EAAvB,oBAAkB,wB;IAhB9CC,CAAA;4BAoBMhB,mBAAA,CAOM,OAPNiB,UAOM,GANyBpB,MAAA,CAAAO,WAAW,I,cAAxCT,YAAA,CAESuB,iBAAA;IAvBjBC,GAAA;IAqBgBC,IAAI,EAAC;;IArBrBV,OAAA,EAAAC,QAAA,CAqBkD,MACnC,CAtBfU,gBAAA,CAqBkD,QACnC,GAAAlB,gBAAA,CAAGN,MAAA,CAAAO,WAAW,CAACkB,IAAI,IAAG,OAAK,GAAAnB,gBAAA,CAAGN,MAAA,CAAAO,WAAW,CAACmB,EAAE,iB;IAtB3DP,CAAA;uBAwBQrB,YAAA,CAESuB,iBAAA;IA1BjBC,GAAA;IAwBgBC,IAAI,EAAC;;IAxBrBV,OAAA,EAAAC,QAAA,CAwBmC,MAE3Ba,MAAA,QAAAA,MAAA,OA1BRH,gBAAA,CAwBmC,OAE3B,E;IA1BRL,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}