{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, reactive, onMounted } from 'vue';\nimport axios from 'axios';\nimport { Chart, registerables } from 'chart.js';\nimport { Line } from 'vue-chartjs';\n\n// Register Chart.js components\nChart.register(...registerables);\nexport default {\n  name: 'SalesPredictionView',\n  components: {\n    Line\n  },\n  setup() {\n    // 反应式状态\n    const merchantId = ref(1); // 默认商家ID\n    const selectedProductId = ref(null);\n    const daysToPredict = ref(30);\n    const selectedView = ref('all'); // 'all' 或 'product'\n    const loading = ref(false);\n    const error = ref(null);\n    const products = ref([]);\n    const productOrders = ref([]);\n\n    // 图表数据\n    const chartData = reactive({\n      labels: [],\n      datasets: [{\n        label: '预测销售额',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1,\n        data: []\n      }]\n    });\n\n    // 图表选项\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: '销售金额 (¥)'\n          }\n        },\n        x: {\n          title: {\n            display: true,\n            text: '日期'\n          }\n        }\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `销售额: ¥${context.raw.toFixed(2)}`;\n            }\n          }\n        },\n        legend: {\n          position: 'top'\n        }\n      }\n    };\n\n    // 获取所有产品销售预测\n    const fetchAllProductsPredictions = async () => {\n      loading.value = true;\n      error.value = null;\n      try {\n        const response = await axios.get(`http://localhost:8080/api/ai/sales-prediction/${merchantId.value}`);\n\n        // 更新图表数据\n        chartData.labels = response.data.dates;\n        chartData.datasets[0].data = response.data.predictions;\n        chartData.datasets[0].label = '所有产品销售预测';\n\n        // 获取产品列表\n        await fetchProducts();\n      } catch (err) {\n        console.error('获取预测数据失败:', err);\n        error.value = err.response?.data?.message || '无法获取预测数据';\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 获取单个产品销售预测\n    const fetchProductPredictions = async () => {\n      if (!selectedProductId.value) {\n        if (products.value.length > 0) {\n          selectedProductId.value = products.value[0].productId;\n        } else {\n          await fetchProducts();\n          if (products.value.length > 0) {\n            selectedProductId.value = products.value[0].productId;\n          } else {\n            error.value = '没有可用的产品';\n            return;\n          }\n        }\n      }\n      loading.value = true;\n      error.value = null;\n      try {\n        const response = await axios.get(`http://localhost:8080/api/ai/sales-prediction-by-product/${merchantId.value}/${selectedProductId.value}/${daysToPredict.value}`);\n\n        // 更新图表数据\n        chartData.labels = response.data.dates;\n        chartData.datasets[0].data = response.data.predictions;\n\n        // 从产品列表中查找产品名称\n        const product = products.value.find(p => p.productId === selectedProductId.value);\n        const productName = product ? product.productName : `产品 #${selectedProductId.value}`;\n        chartData.datasets[0].label = `${productName} 销售预测`;\n\n        // 获取产品的历史订单\n        await fetchProductOrders();\n      } catch (err) {\n        console.error('获取产品预测数据失败:', err);\n        error.value = err.response?.data?.message || '无法获取产品预测数据';\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 获取产品列表\n    const fetchProducts = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/products`);\n        products.value = response.data.filter(product => product.merchantId === merchantId.value);\n\n        // 如果没有找到当前商家的产品，就显示所有产品\n        if (products.value.length === 0) {\n          products.value = response.data;\n        }\n      } catch (err) {\n        console.error('获取产品列表失败:', err);\n        error.value = '无法获取产品列表';\n      }\n    };\n\n    // 获取产品的历史订单\n    const fetchProductOrders = async () => {\n      try {\n        // 获取订单列表\n        const response = await axios.get(`http://localhost:8080/api/orders/${merchantId.value}`);\n\n        // 过滤与所选产品相关的订单\n        // 注意：这里的逻辑可能需要根据你的后端返回的数据结构进行调整\n        productOrders.value = response.data.filter(order => {\n          return order.merchantId === merchantId.value;\n          // 如果订单中包含产品信息，则可以进一步过滤\n          // return order.merchantId === merchantId.value && order.productId === selectedProductId.value;\n        });\n      } catch (err) {\n        console.error('获取产品订单失败:', err);\n        productOrders.value = [];\n      }\n    };\n\n    // 切换视图类型\n    const changeViewType = () => {\n      if (selectedView.value === 'all') {\n        fetchAllProductsPredictions();\n      } else {\n        fetchProductPredictions();\n      }\n    };\n\n    // 查看特定产品的预测\n    const viewProductPrediction = productId => {\n      selectedProductId.value = productId;\n      selectedView.value = 'product';\n      fetchProductPredictions();\n    };\n\n    // 计算统计指标\n    const calculateAverage = data => {\n      if (!data || data.length === 0) return 0;\n      return data.reduce((sum, val) => sum + val, 0) / data.length;\n    };\n    const calculateSum = data => {\n      if (!data || data.length === 0) return 0;\n      return data.reduce((sum, val) => sum + val, 0);\n    };\n    const calculateTrend = data => {\n      if (!data || data.length < 2) return 0;\n      const firstValue = data[0];\n      const lastValue = data[data.length - 1];\n      return (lastValue - firstValue) / firstValue * 100;\n    };\n\n    // 格式化日期\n    const formatDate = dateString => {\n      if (!dateString) return '未知日期';\n      try {\n        const date = new Date(dateString);\n        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n      } catch (e) {\n        return '日期格式错误';\n      }\n    };\n\n    // 获取订单中的产品数量\n    const getOrderQuantity = order => {\n      // 这里假设订单中有一个quantity字段\n      return order.quantity || 1;\n    };\n\n    // 获取订单状态文本\n    const getStatusText = order => {\n      if (!order || !order.status) return '未知状态';\n      const statusMap = {\n        'PENDING': '待处理',\n        'PROCESSING': '处理中',\n        'SHIPPED': '已发货',\n        'DELIVERED': '已送达',\n        'COMPLETED': '已完成',\n        'CANCELLED': '已取消'\n      };\n      return statusMap[order.status] || order.status;\n    };\n\n    // 获取订单状态CSS类\n    const getStatusClass = order => {\n      if (!order || !order.status) return '';\n      const statusClassMap = {\n        'PENDING': 'status-pending',\n        'PROCESSING': 'status-processing',\n        'SHIPPED': 'status-shipped',\n        'DELIVERED': 'status-delivered',\n        'COMPLETED': 'status-completed',\n        'CANCELLED': 'status-cancelled'\n      };\n      return statusClassMap[order.status] || '';\n    };\n\n    // 生命周期钩子\n    onMounted(async () => {\n      await fetchProducts();\n      await fetchAllProductsPredictions();\n    });\n    return {\n      merchantId,\n      selectedProductId,\n      daysToPredict,\n      selectedView,\n      loading,\n      error,\n      products,\n      productOrders,\n      chartData,\n      chartOptions,\n      fetchAllProductsPredictions,\n      fetchProductPredictions,\n      changeViewType,\n      viewProductPrediction,\n      calculateAverage,\n      calculateSum,\n      calculateTrend,\n      formatDate,\n      getOrderQuantity,\n      getStatusText,\n      getStatusClass\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","axios","Chart","registerables","Line","register","name","components","setup","merchantId","selectedProductId","daysToPredict","selectedView","loading","error","products","productOrders","chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","data","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","x","plugins","tooltip","callbacks","context","raw","toFixed","legend","position","fetchAllProductsPredictions","value","response","get","dates","predictions","fetchProducts","err","console","message","fetchProductPredictions","length","productId","product","find","p","productName","fetchProductOrders","filter","order","changeViewType","viewProductPrediction","calculateAverage","reduce","sum","val","calculateSum","calculateTrend","firstValue","lastValue","formatDate","dateString","date","Date","getFullYear","String","getMonth","padStart","getDate","e","getOrderQuantity","quantity","getStatusText","status","statusMap","getStatusClass","statusClassMap"],"sources":["E:\\shixun\\420\\ecms\\ecmsvue\\src\\views\\SalesPrediction.vue"],"sourcesContent":["// views/SalesPredictionView.vue\r\n<template>\r\n  <div class=\"sales-prediction-container\">\r\n    <h1>销售预测分析</h1>\r\n\r\n    <div class=\"card filters-card\">\r\n      <div class=\"card-title\">预测条件</div>\r\n      <div class=\"filters\">\r\n        <div class=\"form-group\">\r\n          <label for=\"merchantId\">商家ID:</label>\r\n          <input\r\n              id=\"merchantId\"\r\n              v-model.number=\"merchantId\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              class=\"form-control\"\r\n              @change=\"selectedView === 'product' ? fetchProductPredictions() : fetchAllProductsPredictions()\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"viewType\">查看方式:</label>\r\n          <select id=\"viewType\" v-model=\"selectedView\" class=\"form-control\" @change=\"changeViewType\">\r\n            <option value=\"all\">所有产品总览</option>\r\n            <option value=\"product\">单个产品明细</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div v-if=\"selectedView === 'product'\" class=\"form-group\">\r\n          <label for=\"productSelect\">选择产品:</label>\r\n          <select id=\"productSelect\" v-model=\"selectedProductId\" class=\"form-control\" @change=\"fetchProductPredictions()\">\r\n            <option v-for=\"product in products\" :key=\"product.productId\" :value=\"product.productId\">\r\n              {{ product.productName }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n\r\n        <div v-if=\"selectedView === 'product'\" class=\"form-group\">\r\n          <label for=\"daysPredict\">预测天数:</label>\r\n          <input\r\n              id=\"daysPredict\"\r\n              v-model.number=\"daysToPredict\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              max=\"365\"\r\n              class=\"form-control\"\r\n              @change=\"fetchProductPredictions()\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card data-card\">\r\n      <div class=\"card-title\">预测数据</div>\r\n      <div v-if=\"loading\" class=\"loading-container\">\r\n        <div class=\"spinner\"></div>\r\n        <p>正在加载预测数据...</p>\r\n      </div>\r\n\r\n      <div v-else-if=\"error\" class=\"error-container\">\r\n        <div class=\"alert alert-danger\">{{ error }}</div>\r\n        <button @click=\"selectedView === 'product' ? fetchProductPredictions() : fetchAllProductsPredictions()\" class=\"btn btn-primary\">\r\n          重试\r\n        </button>\r\n      </div>\r\n\r\n      <div v-else class=\"prediction-content\">\r\n        <!-- 图表区域 -->\r\n        <div class=\"chart-container\">\r\n          <Line :data=\"chartData\" :options=\"chartOptions\" />\r\n        </div>\r\n\r\n        <!-- 统计摘要 -->\r\n        <div v-if=\"chartData.datasets[0].data.length > 0\" class=\"stats-container\">\r\n          <h3>预测摘要</h3>\r\n          <div class=\"stats-grid\">\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">预测周期</div>\r\n              <div class=\"stat-value\">{{ chartData.labels[0] }} 至 {{ chartData.labels[chartData.labels.length - 1] }}</div>\r\n            </div>\r\n\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">平均预测销售额</div>\r\n              <div class=\"stat-value\">¥{{ calculateAverage(chartData.datasets[0].data).toFixed(2) }}</div>\r\n            </div>\r\n\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">最高预测销售额</div>\r\n              <div class=\"stat-value\">¥{{ Math.max(...chartData.datasets[0].data).toFixed(2) }}</div>\r\n            </div>\r\n\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">最低预测销售额</div>\r\n              <div class=\"stat-value\">¥{{ Math.min(...chartData.datasets[0].data).toFixed(2) }}</div>\r\n            </div>\r\n\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">总预测销售额</div>\r\n              <div class=\"stat-value\">¥{{ calculateSum(chartData.datasets[0].data).toFixed(2) }}</div>\r\n            </div>\r\n\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">预测趋势</div>\r\n              <div class=\"stat-value\" :class=\"calculateTrend(chartData.datasets[0].data) >= 0 ? 'positive' : 'negative'\">\r\n                {{ calculateTrend(chartData.datasets[0].data) >= 0 ? '上升' : '下降' }}\r\n                {{ Math.abs(calculateTrend(chartData.datasets[0].data)).toFixed(2) }}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 相关产品卡片 -->\r\n    <div v-if=\"selectedView === 'all' && !loading && !error\" class=\"card related-card\">\r\n      <div class=\"card-title\">相关产品数据</div>\r\n      <div class=\"product-grid\">\r\n        <div v-for=\"product in products.slice(0, 4)\" :key=\"product.productId\" class=\"product-item\">\r\n          <h4>{{ product.productName }}</h4>\r\n          <p>{{ product.description ? (product.description.length > 50 ? product.description.substring(0, 50) + '...' : product.description) : '暂无描述' }}</p>\r\n          <div class=\"product-price\">¥{{ product.price }}</div>\r\n          <button @click=\"viewProductPrediction(product.productId)\" class=\"btn btn-sm btn-primary\">查看预测</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 历史订单数据 -->\r\n    <div v-if=\"selectedProductId && selectedView === 'product' && !loading && !error\" class=\"card orders-card\">\r\n      <div class=\"card-title\">产品历史订单</div>\r\n      <div v-if=\"productOrders.length === 0\" class=\"no-data\">\r\n        暂无该产品的历史订单数据\r\n      </div>\r\n      <div v-else class=\"order-list\">\r\n        <table class=\"table\">\r\n          <thead>\r\n          <tr>\r\n            <th>订单号</th>\r\n            <th>订单日期</th>\r\n            <th>数量</th>\r\n            <th>订单金额</th>\r\n            <th>状态</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr v-for=\"order in productOrders.slice(0, 5)\" :key=\"order.orderId\">\r\n            <td>{{ order.orderNumber || '未知' }}</td>\r\n            <td>{{ formatDate(order.createdAt) }}</td>\r\n            <td>{{ getOrderQuantity(order) }}</td>\r\n            <td>¥{{ order.totalAmount || '0.00' }}</td>\r\n            <td><span :class=\"getStatusClass(order)\">{{ getStatusText(order) }}</span></td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n        <div v-if=\"productOrders.length > 5\" class=\"view-more\">\r\n          <router-link :to=\"'/orders?productId=' + selectedProductId\" class=\"btn btn-sm btn-outline\">查看更多订单</router-link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport { Line } from 'vue-chartjs';\r\n\r\n// Register Chart.js components\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  name: 'SalesPredictionView',\r\n  components: {\r\n    Line\r\n  },\r\n  setup() {\r\n    // 反应式状态\r\n    const merchantId = ref(1);  // 默认商家ID\r\n    const selectedProductId = ref(null);\r\n    const daysToPredict = ref(30);\r\n    const selectedView = ref('all');  // 'all' 或 'product'\r\n    const loading = ref(false);\r\n    const error = ref(null);\r\n    const products = ref([]);\r\n    const productOrders = ref([]);\r\n\r\n    // 图表数据\r\n    const chartData = reactive({\r\n      labels: [],\r\n      datasets: [{\r\n        label: '预测销售额',\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1,\r\n        data: []\r\n      }]\r\n    });\r\n\r\n    // 图表选项\r\n    const chartOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        y: {\r\n          beginAtZero: false,\r\n          title: {\r\n            display: true,\r\n            text: '销售金额 (¥)'\r\n          }\r\n        },\r\n        x: {\r\n          title: {\r\n            display: true,\r\n            text: '日期'\r\n          }\r\n        }\r\n      },\r\n      plugins: {\r\n        tooltip: {\r\n          callbacks: {\r\n            label: function(context) {\r\n              return `销售额: ¥${context.raw.toFixed(2)}`;\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          position: 'top'\r\n        }\r\n      }\r\n    };\r\n\r\n    // 获取所有产品销售预测\r\n    const fetchAllProductsPredictions = async () => {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/api/ai/sales-prediction/${merchantId.value}`);\r\n\r\n        // 更新图表数据\r\n        chartData.labels = response.data.dates;\r\n        chartData.datasets[0].data = response.data.predictions;\r\n        chartData.datasets[0].label = '所有产品销售预测';\r\n\r\n        // 获取产品列表\r\n        await fetchProducts();\r\n      } catch (err) {\r\n        console.error('获取预测数据失败:', err);\r\n        error.value = err.response?.data?.message || '无法获取预测数据';\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // 获取单个产品销售预测\r\n    const fetchProductPredictions = async () => {\r\n      if (!selectedProductId.value) {\r\n        if (products.value.length > 0) {\r\n          selectedProductId.value = products.value[0].productId;\r\n        } else {\r\n          await fetchProducts();\r\n          if (products.value.length > 0) {\r\n            selectedProductId.value = products.value[0].productId;\r\n          } else {\r\n            error.value = '没有可用的产品';\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      try {\r\n        const response = await axios.get(\r\n            `http://localhost:8080/api/ai/sales-prediction-by-product/${merchantId.value}/${selectedProductId.value}/${daysToPredict.value}`\r\n        );\r\n\r\n        // 更新图表数据\r\n        chartData.labels = response.data.dates;\r\n        chartData.datasets[0].data = response.data.predictions;\r\n\r\n        // 从产品列表中查找产品名称\r\n        const product = products.value.find(p => p.productId === selectedProductId.value);\r\n        const productName = product ? product.productName : `产品 #${selectedProductId.value}`;\r\n        chartData.datasets[0].label = `${productName} 销售预测`;\r\n\r\n        // 获取产品的历史订单\r\n        await fetchProductOrders();\r\n      } catch (err) {\r\n        console.error('获取产品预测数据失败:', err);\r\n        error.value = err.response?.data?.message || '无法获取产品预测数据';\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // 获取产品列表\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/api/products`);\r\n        products.value = response.data.filter(product => product.merchantId === merchantId.value);\r\n\r\n        // 如果没有找到当前商家的产品，就显示所有产品\r\n        if (products.value.length === 0) {\r\n          products.value = response.data;\r\n        }\r\n      } catch (err) {\r\n        console.error('获取产品列表失败:', err);\r\n        error.value = '无法获取产品列表';\r\n      }\r\n    };\r\n\r\n    // 获取产品的历史订单\r\n    const fetchProductOrders = async () => {\r\n      try {\r\n        // 获取订单列表\r\n        const response = await axios.get(`http://localhost:8080/api/orders/${merchantId.value}`);\r\n\r\n        // 过滤与所选产品相关的订单\r\n        // 注意：这里的逻辑可能需要根据你的后端返回的数据结构进行调整\r\n        productOrders.value = response.data.filter(order => {\r\n          return order.merchantId === merchantId.value;\r\n          // 如果订单中包含产品信息，则可以进一步过滤\r\n          // return order.merchantId === merchantId.value && order.productId === selectedProductId.value;\r\n        });\r\n      } catch (err) {\r\n        console.error('获取产品订单失败:', err);\r\n        productOrders.value = [];\r\n      }\r\n    };\r\n\r\n    // 切换视图类型\r\n    const changeViewType = () => {\r\n      if (selectedView.value === 'all') {\r\n        fetchAllProductsPredictions();\r\n      } else {\r\n        fetchProductPredictions();\r\n      }\r\n    };\r\n\r\n    // 查看特定产品的预测\r\n    const viewProductPrediction = (productId) => {\r\n      selectedProductId.value = productId;\r\n      selectedView.value = 'product';\r\n      fetchProductPredictions();\r\n    };\r\n\r\n    // 计算统计指标\r\n    const calculateAverage = (data) => {\r\n      if (!data || data.length === 0) return 0;\r\n      return data.reduce((sum, val) => sum + val, 0) / data.length;\r\n    };\r\n\r\n    const calculateSum = (data) => {\r\n      if (!data || data.length === 0) return 0;\r\n      return data.reduce((sum, val) => sum + val, 0);\r\n    };\r\n\r\n    const calculateTrend = (data) => {\r\n      if (!data || data.length < 2) return 0;\r\n      const firstValue = data[0];\r\n      const lastValue = data[data.length - 1];\r\n      return ((lastValue - firstValue) / firstValue) * 100;\r\n    };\r\n\r\n    // 格式化日期\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '未知日期';\r\n      try {\r\n        const date = new Date(dateString);\r\n        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\r\n      } catch (e) {\r\n        return '日期格式错误';\r\n      }\r\n    };\r\n\r\n    // 获取订单中的产品数量\r\n    const getOrderQuantity = (order) => {\r\n      // 这里假设订单中有一个quantity字段\r\n      return order.quantity || 1;\r\n    };\r\n\r\n    // 获取订单状态文本\r\n    const getStatusText = (order) => {\r\n      if (!order || !order.status) return '未知状态';\r\n\r\n      const statusMap = {\r\n        'PENDING': '待处理',\r\n        'PROCESSING': '处理中',\r\n        'SHIPPED': '已发货',\r\n        'DELIVERED': '已送达',\r\n        'COMPLETED': '已完成',\r\n        'CANCELLED': '已取消'\r\n      };\r\n\r\n      return statusMap[order.status] || order.status;\r\n    };\r\n\r\n    // 获取订单状态CSS类\r\n    const getStatusClass = (order) => {\r\n      if (!order || !order.status) return '';\r\n\r\n      const statusClassMap = {\r\n        'PENDING': 'status-pending',\r\n        'PROCESSING': 'status-processing',\r\n        'SHIPPED': 'status-shipped',\r\n        'DELIVERED': 'status-delivered',\r\n        'COMPLETED': 'status-completed',\r\n        'CANCELLED': 'status-cancelled'\r\n      };\r\n\r\n      return statusClassMap[order.status] || '';\r\n    };\r\n\r\n    // 生命周期钩子\r\n    onMounted(async () => {\r\n      await fetchProducts();\r\n      await fetchAllProductsPredictions();\r\n    });\r\n\r\n    return {\r\n      merchantId,\r\n      selectedProductId,\r\n      daysToPredict,\r\n      selectedView,\r\n      loading,\r\n      error,\r\n      products,\r\n      productOrders,\r\n      chartData,\r\n      chartOptions,\r\n      fetchAllProductsPredictions,\r\n      fetchProductPredictions,\r\n      changeViewType,\r\n      viewProductPrediction,\r\n      calculateAverage,\r\n      calculateSum,\r\n      calculateTrend,\r\n      formatDate,\r\n      getOrderQuantity,\r\n      getStatusText,\r\n      getStatusClass\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.sales-prediction-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\nh1 {\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n.card {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.card-title {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin-bottom: 15px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px solid #eee;\r\n  color: #333;\r\n}\r\n\r\n.filters {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  align-items: flex-end;\r\n}\r\n\r\n.form-group {\r\n  flex: 1;\r\n  min-width: 200px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\n.form-control {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 300px;\r\n}\r\n\r\n.spinner {\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #3498db;\r\n  border-radius: 50%;\r\n  width: 30px;\r\n  height: 30px;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.error-container {\r\n  min-height: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 15px;\r\n}\r\n\r\n.chart-container {\r\n  height: 400px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.stats-container {\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n}\r\n\r\n.stats-container h3 {\r\n  margin-top: 0;\r\n  margin-bottom: 15px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 15px;\r\n}\r\n\r\n.stat-item {\r\n  padding: 10px;\r\n  background-color: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-label {\r\n  font-size: 14px;\r\n  color: #6c757d;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.stat-value.positive {\r\n  color: #28a745;\r\n}\r\n\r\n.stat-value.negative {\r\n  color: #dc3545;\r\n}\r\n\r\n.product-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.product-item {\r\n  padding: 15px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 6px;\r\n  position: relative;\r\n}\r\n\r\n.product-item h4 {\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n  color: #333;\r\n}\r\n\r\n.product-item p {\r\n  color: #6c757d;\r\n  margin-bottom: 15px;\r\n  line-height: 1.4;\r\n  font-size: 14px;\r\n}\r\n\r\n.product-price {\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.order-list {\r\n  overflow-x: auto;\r\n}\r\n\r\n.table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.table th, .table td {\r\n  padding: 10px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.table th {\r\n  background-color: #f8f9fa;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-pending { color: #ffc107; }\r\n.status-processing { color: #17a2b8; }\r\n.status-shipped { color: #6f42c1; }\r\n.status-delivered { color: #20c997; }\r\n.status-completed { color: #28a745; }\r\n.status-cancelled { color: #dc3545; }\r\n\r\n.no-data {\r\n  text-align: center;\r\n  padding: 30px;\r\n  color: #6c757d;\r\n  font-style: italic;\r\n}\r\n\r\n.view-more {\r\n  text-align: right;\r\n  margin-top: 10px;\r\n}\r\n\r\n.btn-outline {\r\n  background-color: transparent;\r\n  border: 1px solid #007bff;\r\n  color: #007bff;\r\n}\r\n\r\n.btn-outline:hover {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.btn-sm {\r\n  padding: 4px 8px;\r\n  font-size: 14px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .filters {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n\r\n  .form-group {\r\n    width: 100%;\r\n  }\r\n\r\n  .stats-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .product-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}