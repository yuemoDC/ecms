{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive } from 'vue'; // 导入Vue的响应性API\nimport { User, Lock } from '@element-plus/icons-vue'; // 导入Element Plus的图标\nimport { useRouter } from 'vue-router'; // 导入路由\nimport axios from '../utils/axios'; // 导入自定义的axios实例\nimport { ElMessage } from 'element-plus'; // 导入Element Plus的消息提示组件\n\nexport default {\n  __name: 'UserLogin',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter(); // 获取路由实例\n    const loginFormRef = ref(null); // 创建用于引用表单的ref\n\n    const loginForm = reactive({\n      // 创建响应式登录表单数据\n      username: '',\n      password: ''\n    });\n    const rules = {\n      // 定义表单校验规则\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }],\n      // 用户名必填规则\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }] // 密码必填规则\n    };\n    const handleLogin = async () => {\n      // 登录处理函数\n      if (!loginFormRef.value) return; // 确保表单引用存在\n\n      await loginFormRef.value.validate(async valid => {\n        // 校验表单\n        if (valid) {\n          // 如果表单有效\n          try {\n            const response = await axios.post('/api/auth/login', loginForm); // 发送登录请求\n            if (response.data.success) {\n              // 登录成功处理\n              ElMessage.success('登录成功'); // 显示成功消息\n              localStorage.setItem('token', response.data.token); // 存储token\n              localStorage.setItem('user', JSON.stringify(response.data)); // 存储用户信息（转成字符串）\n              router.push('/SplashScreen'); // 导航到主页\n            } else {\n              ElMessage.error(response.data.message || '登录失败'); // 显示错误消息\n            }\n          } catch (error) {\n            ElMessage.error('登录失败，请稍后重试'); // 处理请求错误\n            console.error('Login error:', error); // 输出错误信息\n          }\n        }\n      });\n    };\n    const __returned__ = {\n      router,\n      loginFormRef,\n      loginForm,\n      rules,\n      handleLogin,\n      ref,\n      reactive,\n      get User() {\n        return User;\n      },\n      get Lock() {\n        return Lock;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get axios() {\n        return axios;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","User","Lock","useRouter","axios","ElMessage","router","loginFormRef","loginForm","username","password","rules","required","message","trigger","handleLogin","value","validate","valid","response","post","data","success","localStorage","setItem","token","JSON","stringify","push","error","console"],"sources":["D:/code_new/ecms/ecmsvue/src/views/UserLogin.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\"> <!-- 登录组件的容器 -->\n    <el-card class=\"login-card\"> <!-- Element Plus 的卡片组件 -->\n      <template #header>\n        <h2>登录</h2> <!-- 登录标题 -->\n      </template>\n      <el-form :model=\"loginForm\" :rules=\"rules\" ref=\"loginFormRef\"> <!-- 表单组件 -->\n        <el-form-item prop=\"username\"> <!-- 用户名输入项 -->\n          <el-input v-model=\"loginForm.username\" placeholder=\"请输入用户名\"> <!-- 用户名输入框 -->\n            <template #prefix>\n              <el-icon><User /></el-icon> <!-- 用户名图标 -->\n            </template>\n          </el-input>\n        </el-form-item>\n        <el-form-item prop=\"password\"> <!-- 密码输入项 -->\n          <el-input v-model=\"loginForm.password\" type=\"password\" placeholder=\"请输入密码\"> <!-- 密码输入框 -->\n            <template #prefix>\n              <el-icon><Lock /></el-icon> <!-- 密码图标 -->\n            </template>\n          </el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleLogin\" style=\"width: 100%\">登录</el-button> <!-- 登录按钮 -->\n        </el-form-item>\n        <div class=\"register-link\"> <!-- 注册链接 -->\n          <router-link to=\"/register\">还没有账号？立即注册</router-link>\n        </div>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script setup name=\"UserLogin\">\nimport { ref, reactive } from 'vue' // 导入Vue的响应性API\nimport { User, Lock } from '@element-plus/icons-vue' // 导入Element Plus的图标\nimport { useRouter } from 'vue-router' // 导入路由\nimport axios from '../utils/axios' // 导入自定义的axios实例\nimport { ElMessage } from 'element-plus' // 导入Element Plus的消息提示组件\n\nconst router = useRouter() // 获取路由实例\nconst loginFormRef = ref(null) // 创建用于引用表单的ref\n\nconst loginForm = reactive({ // 创建响应式登录表单数据\n  username: '',\n  password: ''\n})\n\nconst rules = { // 定义表单校验规则\n  username: [{ required: true, message: '请输入用户名', trigger: 'blur' }], // 用户名必填规则\n  password: [{ required: true, message: '请输入密码', trigger: 'blur' }] // 密码必填规则\n}\n\nconst handleLogin = async () => { // 登录处理函数\n  if (!loginFormRef.value) return // 确保表单引用存在\n\n  await loginFormRef.value.validate(async (valid) => { // 校验表单\n    if (valid) { // 如果表单有效\n      try {\n        const response = await axios.post('/api/auth/login', loginForm) // 发送登录请求\n        if (response.data.success) { // 登录成功处理\n          ElMessage.success('登录成功') // 显示成功消息\n          localStorage.setItem('token', response.data.token) // 存储token\n          localStorage.setItem('user', JSON.stringify(response.data)); // 存储用户信息（转成字符串）\n          router.push('/SplashScreen') // 导航到主页\n        } else {\n          ElMessage.error(response.data.message || '登录失败') // 显示错误消息\n        }\n      } catch (error) {\n        ElMessage.error('登录失败，请稍后重试') // 处理请求错误\n        console.error('Login error:', error) // 输出错误信息\n      }\n    }\n  })\n}\n</script>\n\n<style scoped>\n.login-container {\n  height: 100vh; /* 设置容器高度为视口高度 */\n  display: flex; /* 使用flex布局 */\n  justify-content: center; /* 居中对齐 */\n  align-items: center; /* 垂直居中 */\n  background-color: #f5f5f5; /* 背景色 */\n}\n\n.login-card {\n  width: 400px; /* 卡片宽度 */\n}\n\n.register-link {\n  text-align: center; /* 注册链接居中对齐 */\n  margin-top: 15px; /* 上外边距 */\n}\n\n.register-link a {\n  color: #409eff; /* 链接颜色 */\n  text-decoration: none; /* 移除下划线 */\n}\n\n.register-link a:hover {\n  text-decoration: underline; /* 悬停时添加下划线 */\n}\n</style>"],"mappings":";AAiCA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,KAAK,EAAC;AACpC,SAASC,IAAI,EAAEC,IAAI,QAAQ,yBAAyB,EAAC;AACrD,SAASC,SAAS,QAAQ,YAAY,EAAC;AACvC,OAAOC,KAAK,MAAM,gBAAgB,EAAC;AACnC,SAASC,SAAS,QAAQ,cAAc,EAAC;;;;;;;;IAEzC,MAAMC,MAAM,GAAGH,SAAS,CAAC,CAAC,EAAC;IAC3B,MAAMI,YAAY,GAAGR,GAAG,CAAC,IAAI,CAAC,EAAC;;IAE/B,MAAMS,SAAS,GAAGR,QAAQ,CAAC;MAAE;MAC3BS,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;IAED,MAAMC,KAAK,GAAG;MAAE;MACdF,QAAQ,EAAE,CAAC;QAAEG,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,CAAC,CAAC;MAAE;MACpEJ,QAAQ,EAAE,CAAC;QAAEE,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC,CAAC,CAAC;IACpE;IAEA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAAE;MAChC,IAAI,CAACR,YAAY,CAACS,KAAK,EAAE,OAAM,CAAC;;MAEhC,MAAMT,YAAY,CAACS,KAAK,CAACC,QAAQ,CAAC,MAAOC,KAAK,IAAK;QAAE;QACnD,IAAIA,KAAK,EAAE;UAAE;UACX,IAAI;YACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,iBAAiB,EAAEZ,SAAS,CAAC,EAAC;YAChE,IAAIW,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;cAAE;cAC3BjB,SAAS,CAACiB,OAAO,CAAC,MAAM,CAAC,EAAC;cAC1BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACI,KAAK,CAAC,EAAC;cACnDF,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEE,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;cAC7Df,MAAM,CAACsB,IAAI,CAAC,eAAe,CAAC,EAAC;YAC/B,CAAC,MAAM;cACLvB,SAAS,CAACwB,KAAK,CAACV,QAAQ,CAACE,IAAI,CAACR,OAAO,IAAI,MAAM,CAAC,EAAC;YACnD;UACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;YACdxB,SAAS,CAACwB,KAAK,CAAC,YAAY,CAAC,EAAC;YAC9BC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC,EAAC;UACvC;QACF;MACF,CAAC;IACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}