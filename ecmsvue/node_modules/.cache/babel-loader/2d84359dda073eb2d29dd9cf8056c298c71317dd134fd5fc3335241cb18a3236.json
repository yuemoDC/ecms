{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home-container\"\n};\nconst _hoisted_2 = {\n  class: \"user-info\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppNavbar = _resolveComponent(\"AppNavbar\");\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" 导航栏组件 \"), _createVNode(_component_AppNavbar), _createElementVNode(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h1\", null, \"欢迎来到首页!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 如果当前用户存在，则显示用户ID和用户名 \"), $data.currentUser ? (_openBlock(), _createBlock(_component_el_tag, {\n    key: 0,\n    type: \"success\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" 当前用户ID: \" + _toDisplayString($data.currentUser.id), 1 /* TEXT */), _cache[0] || (_cache[0] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createTextVNode(\" 用户名: \" + _toDisplayString($data.currentUser.username), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  })) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 如果当前用户不存在，则显示未登录提示 \"), _createVNode(_component_el_tag, {\n    type: \"info\"\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\" 未登录 \")])),\n    _: 1 /* STABLE */\n  })], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createCommentVNode","_createVNode","_component_AppNavbar","_createElementVNode","_hoisted_1","_hoisted_2","$data","currentUser","_createBlock","_component_el_tag","key","type","default","_withCtx","_createTextVNode","_toDisplayString","id","username","_","_Fragment","_cache"],"sources":["D:\\code_new\\ecms\\ecmsvue\\src\\views\\Home.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 导航栏组件 -->\n    <AppNavbar />\n    <div class=\"home-container\">\n      <h1>欢迎来到首页!</h1>\n      <div class=\"user-info\">\n        <!-- 如果当前用户存在，则显示用户ID和用户名 -->\n        <el-tag type=\"success\" v-if=\"currentUser\">\n          当前用户ID: {{ currentUser.id }}<br>\n          用户名: {{ currentUser.username }}\n        </el-tag>\n        <!-- 如果当前用户不存在，则显示未登录提示 -->\n        <el-tag type=\"info\" v-else>\n          未登录\n        </el-tag>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// 导入导航栏组件\nimport AppNavbar from '../components/Navbar.vue';\n\nexport default {\n  // 组件名称\n  name: 'HomePage',\n  // 注册使用的组件\n  components: {\n    AppNavbar\n  },\n  // 数据属性\n  data() {\n    return {\n      // 当前用户信息\n      currentUser: null\n    }\n  },\n  // 生命周期钩子：在实例创建完成后调用\n  created() {\n    // 获取当前用户信息\n    this.getCurrentUser();\n  },\n  // 方法\n  methods: {\n    // 获取当前用户信息的方法\n    getCurrentUser() {\n      // 从localStorage中获取用户信息\n      const userData = localStorage.getItem('user');\n      if (userData) {\n        try {\n          // 解析用户信息\n          const parsedUser = JSON.parse(userData);\n          // 检查解析后的用户信息是否包含必要的字段\n          if (parsedUser && parsedUser.id && parsedUser.username) {\n            // 设置当前用户信息\n            this.currentUser = {\n              id: parsedUser.id,\n              username: parsedUser.username\n            };\n          } else {\n            // 如果用户信息不完整，输出错误信息\n            console.error('用户信息不完整:', parsedUser);\n          }\n        } catch (e) {\n          // 如果解析失败，输出错误信息\n          console.error('解析用户信息失败:', e);\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 首页容器样式 */\n.home-container {\n  position: relative;\n  padding: 20px;\n}\n\n/* 用户信息样式 */\n.user-info {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n}\n\n/* 响应式设计：屏幕宽度小于768px时的样式 */\n@media (max-width: 768px) {\n  .user-info {\n    position: static;\n    margin-top: 20px;\n    text-align: center;\n  }\n}\n</style>"],"mappings":";;EAISA,KAAK,EAAC;AAAgB;;EAEpBA,KAAK,EAAC;AAAW;;;;uBAL1BC,mBAAA,CAiBM,cAhBJC,mBAAA,WAAc,EACdC,YAAA,CAAaC,oBAAA,GACbC,mBAAA,CAaM,OAbNC,UAaM,G,0BAZJD,mBAAA,CAAgB,YAAZ,SAAO,sBACXA,mBAAA,CAUM,OAVNE,UAUM,GATJL,mBAAA,0BAA6B,EACAM,KAAA,CAAAC,WAAW,I,cAAxCC,YAAA,CAGSC,iBAAA;IAXjBC,GAAA;IAQgBC,IAAI,EAAC;;IARrBC,OAAA,EAAAC,QAAA,CAQkD,MAChC,CATlBC,gBAAA,CAQkD,WAChC,GAAAC,gBAAA,CAAGT,KAAA,CAAAC,WAAW,CAACS,EAAE,kB,0BAAGb,mBAAA,CAAI,sCAT1CW,gBAAA,CAS0C,QAC3B,GAAAC,gBAAA,CAAGT,KAAA,CAAAC,WAAW,CAACU,QAAQ,iB;IAVtCC,CAAA;uBAaQnB,mBAAA,CAESoB,SAAA;IAfjBT,GAAA;EAAA,IAYQV,mBAAA,wBAA2B,EAC3BC,YAAA,CAESQ,iBAAA;IAFDE,IAAI,EAAC;EAAM;IAb3BC,OAAA,EAAAC,QAAA,CAamC,MAE3BO,MAAA,QAAAA,MAAA,OAfRN,gBAAA,CAamC,OAE3B,E;IAfRI,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}