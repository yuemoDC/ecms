{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'AppAdminNavbar',\n  data() {\n    return {\n      activeIndex: 'home' // 默认值设为 home\n    };\n  },\n  created() {\n    // 检查 localStorage 中是否有 activeIndex，如果没有则设置为 home\n    if (!localStorage.getItem('activeIndex')) {\n      localStorage.setItem('activeIndex', 'home');\n    }\n    this.updateActiveIndex(); // 初始化 activeIndex\n  },\n  watch: {\n    '$route.path'() {\n      this.updateActiveIndex(); // 路由变化时更新 activeIndex\n    }\n  },\n  methods: {\n    updateActiveIndex() {\n      const path = this.$route.path;\n      if (path === '/home') {\n        this.activeIndex = 'home';\n      } else if (path === '/merchant-applications') {\n        this.activeIndex = 'merchant-applications';\n      } else if (path === '/data-visualization') {\n        this.activeIndex = 'data-visualization';\n      } else if (path === '/systemSettings') {\n        this.activeIndex = 'systemSettings';\n      } else if (path === '/data-SalesPrediction') {\n        this.activeIndex = 'data-SalesPrediction';\n      } else {\n        this.activeIndex = ''; // 其他情况设为空\n      }\n      localStorage.setItem('activeIndex', this.activeIndex); // 更新 localStorage\n    },\n    handleSelect(index) {\n      if (index === 'logout') return;\n      this.activeIndex = index;\n      localStorage.setItem('activeIndex', index); // 保存状态到localStorage\n      this.$router.push({\n        name: index\n      });\n    },\n    handleLogout() {\n      // 处理用户登出\n      localStorage.removeItem('token'); // 清除本地存储中的 token\n      localStorage.removeItem('activeIndex'); // 清除保存的状态\n      this.activeIndex = 'home'; // 设置默认的激活菜单项\n      this.$router.push('/login'); // 跳转到登录页面\n    }\n  }\n};","map":{"version":3,"names":["name","data","activeIndex","created","localStorage","getItem","setItem","updateActiveIndex","watch","$route.path","methods","path","$route","handleSelect","index","$router","push","handleLogout","removeItem"],"sources":["D:\\code_new\\ecms\\ecmsvue\\src\\components\\AdminNavbar.vue"],"sourcesContent":["<template>\r\n  <el-header>\r\n    <div class=\"navbar\"> <!-- 导航栏容器 -->\r\n      <el-menu :default-active=\"activeIndex\" class=\"menu\" @select=\"handleSelect\" mode=\"horizontal\">\r\n        <!-- 设置默认选中的菜单项 -->\r\n        <el-menu-item index=\"home\">首页</el-menu-item> <!-- 仪表盘菜单项 -->\r\n        <el-menu-item index=\"merchant-applications\">商家入驻审批</el-menu-item>\r\n        <el-menu-item index=\"data-visualization\">可视化管理</el-menu-item> <!-- 角色管理菜单项 -->\r\n        <el-sub-menu index=\"data-SalesPrediction\">\r\n          <template slot=\"title\"></template> </el-sub-menu>\r\n\r\n        <!-- 登出按钮放在最右边 -->\r\n        <div class=\"logout-wrapper\">\r\n          <el-menu-item index=\"logout\" @click=\"handleLogout\">登出</el-menu-item> <!-- 登出菜单项 -->\r\n        </div>\r\n      </el-menu>\r\n    </div>\r\n  </el-header>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'AppAdminNavbar',\r\n  data() {\r\n    return {\r\n      activeIndex: 'home' // 默认值设为 home\r\n    };\r\n  },\r\n  created() {\r\n    // 检查 localStorage 中是否有 activeIndex，如果没有则设置为 home\r\n    if (!localStorage.getItem('activeIndex')) {\r\n      localStorage.setItem('activeIndex', 'home');\r\n    }\r\n    this.updateActiveIndex(); // 初始化 activeIndex\r\n  },\r\n  watch: {\r\n    '$route.path'() {\r\n      this.updateActiveIndex(); // 路由变化时更新 activeIndex\r\n    }\r\n  },\r\n  methods: {\r\n    updateActiveIndex() {\r\n      const path = this.$route.path;\r\n      if (path === '/home') {\r\n        this.activeIndex = 'home';\r\n      } else if (path === '/merchant-applications') {\r\n        this.activeIndex = 'merchant-applications';\r\n      } else if (path === '/data-visualization') {\r\n        this.activeIndex = 'data-visualization';\r\n      } else if (path === '/systemSettings') {\r\n        this.activeIndex = 'systemSettings';\r\n      } else if (path === '/data-SalesPrediction') {\r\n        this.activeIndex = 'data-SalesPrediction';\r\n      } else {\r\n        this.activeIndex = ''; // 其他情况设为空\r\n      }\r\n      localStorage.setItem('activeIndex', this.activeIndex); // 更新 localStorage\r\n    },\r\n    handleSelect(index) {\r\n      if (index === 'logout') return;\r\n      this.activeIndex = index;\r\n      localStorage.setItem('activeIndex', index); // 保存状态到localStorage\r\n      this.$router.push({ name: index });\r\n    },\r\n    handleLogout() {\r\n      // 处理用户登出\r\n      localStorage.removeItem('token'); // 清除本地存储中的 token\r\n      localStorage.removeItem('activeIndex'); // 清除保存的状态\r\n      this.activeIndex = 'home'; // 设置默认的激活菜单项\r\n      this.$router.push('/login'); // 跳转到登录页面\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":";AAqBA,eAAe;EACbA,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,MAAK,CAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAE;MACxCD,YAAY,CAACE,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;IAC7C;IACA,IAAI,CAACC,iBAAiB,CAAC,CAAC,EAAE;EAC5B,CAAC;EACDC,KAAK,EAAE;IACL,aAAaC,CAAA,EAAG;MACd,IAAI,CAACF,iBAAiB,CAAC,CAAC,EAAE;IAC5B;EACF,CAAC;EACDG,OAAO,EAAE;IACPH,iBAAiBA,CAAA,EAAG;MAClB,MAAMI,IAAG,GAAI,IAAI,CAACC,MAAM,CAACD,IAAI;MAC7B,IAAIA,IAAG,KAAM,OAAO,EAAE;QACpB,IAAI,CAACT,WAAU,GAAI,MAAM;MAC3B,OAAO,IAAIS,IAAG,KAAM,wBAAwB,EAAE;QAC5C,IAAI,CAACT,WAAU,GAAI,uBAAuB;MAC5C,OAAO,IAAIS,IAAG,KAAM,qBAAqB,EAAE;QACzC,IAAI,CAACT,WAAU,GAAI,oBAAoB;MACzC,OAAO,IAAIS,IAAG,KAAM,iBAAiB,EAAE;QACrC,IAAI,CAACT,WAAU,GAAI,gBAAgB;MACrC,OAAO,IAAIS,IAAG,KAAM,uBAAuB,EAAE;QAC3C,IAAI,CAACT,WAAU,GAAI,sBAAsB;MAC3C,OAAO;QACL,IAAI,CAACA,WAAU,GAAI,EAAE,EAAE;MACzB;MACAE,YAAY,CAACE,OAAO,CAAC,aAAa,EAAE,IAAI,CAACJ,WAAW,CAAC,EAAE;IACzD,CAAC;IACDW,YAAYA,CAACC,KAAK,EAAE;MAClB,IAAIA,KAAI,KAAM,QAAQ,EAAE;MACxB,IAAI,CAACZ,WAAU,GAAIY,KAAK;MACxBV,YAAY,CAACE,OAAO,CAAC,aAAa,EAAEQ,KAAK,CAAC,EAAE;MAC5C,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAEhB,IAAI,EAAEc;MAAM,CAAC,CAAC;IACpC,CAAC;IACDG,YAAYA,CAAA,EAAG;MACb;MACAb,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC,EAAE;MAClCd,YAAY,CAACc,UAAU,CAAC,aAAa,CAAC,EAAE;MACxC,IAAI,CAAChB,WAAU,GAAI,MAAM,EAAE;MAC3B,IAAI,CAACa,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}